# %%  (function)

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a



# %% import math (import)
import math


# %% from math import gcd (import)
from math import gcd


# %% import numpy as np (import)
import numpy as np


# %% from math import lcm (import)
from math import lcm


# %%  (function)

def fibonacci_greatest_common_divisor(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return max(fibonacci_greatest_common_divisor(n-1), fibonacci_greatest_common_divisor(n-2))


# %%  (function)

def greatest_common_divisor(n):
    if n < 2:
        return n
    else:
        return gcd(n, greatest_common_divisor(n-1))




# %%  (function)

def consecutive_integers(n):
    for i in range(n):
        for j in range(i+1, n):
            yield i * j


# %%  (function)

def convert_to_base_10(number, base):
    if number == 0:
        return 0
    return number % base + 10 * convert_to_base_10(number // base, base)


# %% from math import floor (import)
from math import floor


# %%  (function)

def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return len(divisors)


# %%  (function)

def convert_base(num, base1, base2):
    num = str(num)
    digits = '0123456789ABCDEF'
    value = 0
    for i in range(len(num)):
        value += digits.index(num[i]) * (base1 ** (len(num) - i - 1))
    return value


# %%  (function)

def is_sum_4(page_number):
    digits = [int(digit) for digit in str(page_number)]
    return sum(digits) == 4

pages_with_sum_4 = [page for page in range(1, 1000) if is_sum_4(page)]
print(len(pages_with_sum_4))


# %%  (function)

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)


# %%  (function)

def cube_sum(numbers):
    # Calculate the sum of the vertex numbers.
    vertex_sum = sum(sum(numbers[i:i+3]) for i in range(0, 8, 3))
    # Calculate the number that must divide the final sum.
    divisor = max(numbers)
    # Check if the divisor divides the vertex sum.
    if vertex_sum % divisor == 0:
        return divisor
    else:
        return 0



# %%  (function)

def main():
    numbers = [1, 2, 3, 4, 5, 6, 7, 8]
    print(cube_sum(numbers))

if __name__ == "__main__":
    main()


