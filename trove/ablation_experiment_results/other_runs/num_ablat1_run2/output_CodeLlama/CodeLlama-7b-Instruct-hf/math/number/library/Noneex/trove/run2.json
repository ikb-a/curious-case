# %% from fractions import Fraction (import)
from fractions import Fraction


# %%  (function)

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a



# %%  (function)

def is_prime(n):
    if n == 2 or n == 3:
        return True
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True



# %%  (function)

def lcm(a, b):
    return a * b / gcd(a, b)


# %% import math (import)
import math


# %% from math import floor (import)
from math import floor


# %% from math import gcd (import)
from math import gcd


# %% import numpy as np (import)
import numpy as np


# %% from math import lcm (import)
from math import lcm


# %%  (function)

def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result


# %%  (function)

def sum_of_divisors(n):
    divisors = [1]
    i = 2
    while i * i <= n:
        if n % i == 0:
            divisors.append(i)
            if i * i != n:
                divisors.append(n // i)
        i += 1
    return sum(divisors)



# %%  (function)

def is_nice(n):
    divisors = [1]
    i = 2
    while i * i <= n:
        if n % i == 0:
            divisors.append(i)
            if i * i != n:
                divisors.append(n // i)
        i += 1
    return len(divisors) == 4 and sum(divisors) == n



# %%  (function)

def sum_of_nice_numbers(n):
    return sum(i for i in range(n, n + 10) if is_nice(i))


# %%  (function)

def divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return len(divisors)


# %%  (function)

def to_base_10(number, base):
    digits = '0123456789ABCDEF'
    return int(str(number), base)


# %%  (function)

def get_gcd(a, b):
    while b:
        a, b = b, a % b
    return a



# %%  (function)

def is_relatively_prime(a, b):
    return get_gcd(a, b) == 1


# %% import sympy (import)
import sympy


# %% import itertools (import)
import itertools


# %%  (function)

def gcf(a, b):
    if b == 0:
        return a
    return gcf(b, a % b)


