# %% from __future__ import division (import)
from __future__ import division


# %% from __future__ import print_function (import)
from __future__ import print_function


# %%  (function)

def distinct_prime_divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    prime_divisors = []
    for i in divisors:
        if is_prime(i):
            prime_divisors.append(i)
    return prime_divisors




# %% from fractions import Fraction (import)
from fractions import Fraction


# %%  (function)

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a



# %%  (function)

def is_prime(n):
    if n == 2 or n == 3:
        return True
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True



# %% import math (import)
import math


# %% from math import gcd (import)
from math import gcd


# %% from math import lcm (import)
from math import lcm


# %% import numpy as np (import)
import numpy as np


# %%  (function)

def sum_of_distinct_prime_divisors(n):
    return sum(distinct_prime_divisors(n))




# %%  (function)

def sum_of_positive_divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)


# %%  (function)

def get_divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return divisors


