{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "mathd_algebra_109": {"skill_name": "mathd_algebra_109", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a+2*b=12\"\n    and h1 : \"a=4\"\n  shows \"b=0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "description": "", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a+2*b=12\"\n    and h1 : \"a=4\"\n  shows \"b=0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_109.json_v0", "update_count": -1}, "linear_combination_solve_for_b": {"skill_name": "linear_combination_solve_for_b", "marker": "theorem linear_combination_solve_for_b:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*a)/n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a)/n\"\n    by (metis h1 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_combination_solve_for_b:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*a)/n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a)/n\"\n    by (metis h1 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_combination_solve_for_bV2": {"skill_name": "linear_combination_solve_for_bV2", "marker": "theorem linear_combination_solve_for_b:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis using h1 by simp\nqed", "description": "-", "full_code": "theorem linear_combination_solve_for_b:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis using h1 by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_parametrized": {"skill_name": "mathd_algebra_parametrized", "marker": "theorem mathd_algebra_parametrized:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  hence \"2 * b = c - 12\" by (simp add: field_simps)\n  thus \"b = (c - 12) / 2\" using assms(1) by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_parametrized:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  hence \"2 * b = c - 12\" by (simp add: field_simps)\n  thus \"b = (c - 12) / 2\" using assms(1) by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolved": {"skill_name": "mathd_algebra_109_evolved", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  then have \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  then have \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solver": {"skill_name": "linear_equation_solver", "marker": "lemma linear_equation_solver:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"m > 0\" \"n > 0\"\n    and h2 : \"a = c\"\n  shows \"b = (p - m*c)/n\"\nproof -\n  have \"n*b = p - m*c\" using h0 h2 by simp\n  then have \"b = (p - m*c)/n\"\n    by (metis h1(2) less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_equation_solver:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"m > 0\" \"n > 0\"\n    and h2 : \"a = c\"\n  shows \"b = (p - m*c)/n\"\nproof -\n  have \"n*b = p - m*c\" using h0 h2 by simp\n  then have \"b = (p - m*c)/n\"\n    by (metis h1(2) less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solution": {"skill_name": "linear_equation_solution", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m * c) / n\"\nproof -\n  have \"n * b = p - m * a\" using h0 by simp\n  then have \"n * b = p - m * c\" using h1 by simp\n  then have \"b = (p - m * c) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m * c) / n\"\nproof -\n  have \"n * b = p - m * a\" using h0 by simp\n  then have \"n * b = p - m * c\" using h1 by simp\n  then have \"b = (p - m * c) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extended": {"skill_name": "mathd_algebra_109_extended", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n    and x y :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n      and h1 : \"a = 4\"\n      and h2 : \"x = a\"\n      and h3 : \"y = b\"\n  shows \"y = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right)\n  then have \"b = 0 / 2\" by auto\n  thus \"y = 0\" using h3 by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n    and x y :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n      and h1 : \"a = 4\"\n      and h2 : \"x = a\"\n      and h3 : \"y = b\"\n  shows \"y = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right)\n  then have \"b = 0 / 2\" by auto\n  thus \"y = 0\" using h3 by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV2": {"skill_name": "linear_equation_solutionV2", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n > 0\"\n  shows \"b = (p - m * x) / n\"\nproof -\n  have \"m * a + n * b = p\" using h0 by simp\n  then have \"m * x + n * b = p\" using h1 by simp\n  then have \"n * b = p - m * x\" by auto\n  then have \"b = (p - m * x) / n\" by (metis h2 less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n > 0\"\n  shows \"b = (p - m * x) / n\"\nproof -\n  have \"m * a + n * b = p\" using h0 by simp\n  then have \"m * x + n * b = p\" using h1 by simp\n  then have \"n * b = p - m * x\" by auto\n  then have \"b = (p - m * x) / n\" by (metis h2 less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV3": {"skill_name": "linear_equation_solutionV3", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*x) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  then have \"m*x + n*b = p\" using h1 by simp\n  then have \"n*b = p - m*x\" by (simp add: add.commute)\n  then show \"b = (p - m*x) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*x) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  then have \"m*x + n*b = p\" using h1 by simp\n  then have \"n*b = p - m*x\" by (simp add: add.commute)\n  then show \"b = (p - m*x) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV4": {"skill_name": "linear_equation_solutionV4", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*x)/n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  also have \"... = m*x + n*b\" using h1 by (metis h0)\n  finally have \"n*b = p - m*x\" by (metis \\<open>p = m * x + n * b\\<close> add_diff_cancel_left' h1 mult_delta_right)\n  then have \"b = (p - m*x)/n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = x\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*x)/n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  also have \"... = m*x + n*b\" using h1 by (metis h0)\n  finally have \"n*b = p - m*x\" by (metis \\<open>p = m * x + n * b\\<close> add_diff_cancel_left' h1 mult_delta_right)\n  then have \"b = (p - m*x)/n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV2": {"skill_name": "mathd_algebra_109_extendedV2", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b + c = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + 0 = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right eq_iff_diff_eq_0)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b + c = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + 0 = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right eq_iff_diff_eq_0)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV2": {"skill_name": "mathd_algebra_109_evolvedV2", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  with h0 have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  with h0 have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV3": {"skill_name": "mathd_algebra_109_evolvedV3", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then show \"b = 0\" using h1\n  proof -\n    have \"3 * 4 + 2 * b = 12\" by (metis dbl_inc_simps(3) dbl_simps(3) h0 h1)\n    then have \"12 + 2 * b = 12\" by simp\n    thus ?thesis\n      by auto\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then show \"b = 0\" using h1\n  proof -\n    have \"3 * 4 + 2 * b = 12\" by (metis dbl_inc_simps(3) dbl_simps(3) h0 h1)\n    then have \"12 + 2 * b = 12\" by simp\n    thus ?thesis\n      by auto\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV3": {"skill_name": "mathd_algebra_109_extendedV3", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  fixes n :: nat\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"n > 0\"\n  shows \"b = 0 \\<or> b = 1/n * (12 - 3 * a)\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0 \\<or> b = 1/n * (12 - 3 * a)\" using h2 by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  fixes n :: nat\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"n > 0\"\n  shows \"b = 0 \\<or> b = 1/n * (12 - 3 * a)\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0 \\<or> b = 1/n * (12 - 3 * a)\" using h2 by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_2d": {"skill_name": "mathd_algebra_109_2d", "marker": "theorem mathd_algebra_109_2d:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"3*c + 2*d = 12\"\n    and h2 : \"a = 4\"\n    and h3 : \"c = 4\"\n  shows \"b = d\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * c + 2 * d = 12\" using h1 by simp\n  have \"3 * 4 + 2 * b = 12\" using h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"3 * 4 + 2 * d = 12\" using h3 by (metis dbl_inc_simps(3) dbl_simps(3) h1)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"12 + 2 * d = 12\" by (smt (verit) \\<open>3 * 4 + 2 * d = 12\\<close>)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  have \"2 * d = 0\" by (metis \\<open>12 + 2 * d = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by (metis \\<open>2 * b = 0\\<close> divide_eq_0_iff mult_eq_0_iff zero_neq_numeral)\n  then have \"d = 0 / 2\" by (metis \\<open>2 * d = 0\\<close> divide_eq_0_iff mult_eq_0_iff zero_neq_numeral)\n  thus \"b = d\" by (simp add: \\<open>b = 0 / 2\\<close>)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_2d:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"3*c + 2*d = 12\"\n    and h2 : \"a = 4\"\n    and h3 : \"c = 4\"\n  shows \"b = d\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * c + 2 * d = 12\" using h1 by simp\n  have \"3 * 4 + 2 * b = 12\" using h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"3 * 4 + 2 * d = 12\" using h3 by (metis dbl_inc_simps(3) dbl_simps(3) h1)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"12 + 2 * d = 12\" by (smt (verit) \\<open>3 * 4 + 2 * d = 12\\<close>)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  have \"2 * d = 0\" by (metis \\<open>12 + 2 * d = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by (metis \\<open>2 * b = 0\\<close> divide_eq_0_iff mult_eq_0_iff zero_neq_numeral)\n  then have \"d = 0 / 2\" by (metis \\<open>2 * d = 0\\<close> divide_eq_0_iff mult_eq_0_iff zero_neq_numeral)\n  thus \"b = d\" by (simp add: \\<open>b = 0 / 2\\<close>)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV4": {"skill_name": "mathd_algebra_109_extendedV4", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right)\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right)\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_with_known_a": {"skill_name": "linear_equation_with_known_a", "marker": "theorem linear_equation_with_known_a:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = k\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*k) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  also have \"... = (p - m*k) / n\" using h1 by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_equation_with_known_a:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = k\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*k) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*a) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  also have \"... = (p - m*k) / n\" using h1 by simp\n  finally show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation_generalized": {"skill_name": "solve_linear_equation_generalized", "marker": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes h0 : \"a \\<noteq> 0\"\n  assumes h1 : \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x + b = c\" using h1 by simp\n  then have \"a * x = c - b\" by (simp add: h0)\n  then show \"x = (c - b) / a\" using h0 by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes h0 : \"a \\<noteq> 0\"\n  assumes h1 : \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x + b = c\" using h1 by simp\n  then have \"a * x = c - b\" by (simp add: h0)\n  then show \"x = (c - b) / a\" using h0 by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation_generalizedV2": {"skill_name": "solve_linear_equation_generalizedV2", "marker": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * x + b = c \\<Longrightarrow> x = (c - b) / a\"\nproof -\n  assume \"a * x + b = c\"\n  then have \"a * x = c - b\" by (simp add: algebra_simps)\n  then show \"x = (c - b) / a\" by (metis assms div_by_1 frac_eq_eq mult.commute mult_cancel_left1 zero_neq_one)\nqed", "description": "-", "full_code": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * x + b = c \\<Longrightarrow> x = (c - b) / a\"\nproof -\n  assume \"a * x + b = c\"\n  then have \"a * x = c - b\" by (simp add: algebra_simps)\n  then show \"x = (c - b) / a\" by (metis assms div_by_1 frac_eq_eq mult.commute mult_cancel_left1 zero_neq_one)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V2": {"skill_name": "mathd_algebra_109V2", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by (simp add: field_simps)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by (simp add: field_simps)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_v2": {"skill_name": "mathd_algebra_109_v2", "marker": "theorem mathd_algebra_109_v2:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 12 - 12\" by simp\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_v2:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 12 - 12\" by simp\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation_system": {"skill_name": "solve_linear_equation_system", "marker": "theorem solve_linear_equation_system:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"m > 0\" \n    and h2 : \"n > 0\"\n  shows \"b = (p - m * a) / n\"\nproof -\n  have \"m * a + n * b = p\" using h0 by simp\n  then have \"n * b = p - m * a\" by (simp add: h1)\n  then show ?thesis by (metis h2 less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\nqed", "description": "-", "full_code": "theorem solve_linear_equation_system:\n  fixes a b :: real\n  assumes h0 : \"m * a + n * b = p\"\n    and h1 : \"m > 0\" \n    and h2 : \"n > 0\"\n  shows \"b = (p - m * a) / n\"\nproof -\n  have \"m * a + n * b = p\" using h0 by simp\n  then have \"n * b = p - m * a\" by (simp add: h1)\n  then show ?thesis by (metis h2 less_numeral_extra(3) mult.commute nonzero_mult_div_cancel_right)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV4": {"skill_name": "mathd_algebra_109_evolvedV4", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  then have \"3 * a = 12\" by simp\n  hence \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"12 + 2 * b = 12\" by (metis \\<open>3 * a = 12\\<close> dbl_inc_simps(3) dbl_simps(3) h0)\n  finally have \"2 * b = 0\" by simp\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  then have \"3 * a = 12\" by simp\n  hence \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"12 + 2 * b = 12\" by (metis \\<open>3 * a = 12\\<close> dbl_inc_simps(3) dbl_simps(3) h0)\n  finally have \"2 * b = 0\" by simp\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_v2V2": {"skill_name": "mathd_algebra_109_v2V2", "marker": "theorem mathd_algebra_109_v2:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  then have \"3 * a + 2 * b = 12\" using h0 by simp\n  thus \"b = 0\" \n  proof -\n    have \"12 + 2 * b = 12\" using `3 * a + 2 * b = 12` by (smt (verit) \\<open>3 * a = 3 * 4\\<close>)\n    thus ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_v2:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  then have \"3 * a + 2 * b = 12\" using h0 by simp\n  thus \"b = 0\" \n  proof -\n    have \"12 + 2 * b = 12\" using `3 * a + 2 * b = 12` by (smt (verit) \\<open>3 * a = 3 * 4\\<close>)\n    thus ?thesis by simp\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV5": {"skill_name": "mathd_algebra_109_evolvedV5", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  thus \"b = 0\" by (simp)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  thus \"b = 0\" by (simp)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV6": {"skill_name": "mathd_algebra_109_evolvedV6", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  then have \"12 + 2 * b = 12\" using h0 by (metis add_cancel_right_right)\n  then have \"2 * b = 0\" by (simp add: add.commute)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  then have \"12 + 2 * b = 12\" using h0 by (metis add_cancel_right_right)\n  then have \"2 * b = 0\" by (simp add: add.commute)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV7": {"skill_name": "mathd_algebra_109_evolvedV7", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  then have \"12 + 2 * b = 12\" using h0 by (simp add: h1)\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by (simp add: field_simps)\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have \"3 * a = 3 * 4\" by simp\n  hence \"3 * a = 12\" by simp\n  then have \"12 + 2 * b = 12\" using h0 by (simp add: h1)\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by (simp add: field_simps)\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV5": {"skill_name": "mathd_algebra_109_extendedV5", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"0 < c\"\n  shows \"b = 0 \\<and> c > 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  hence \"b = 0\" by simp\n  thus \"b = 0 \\<and> c > 0\" using h2 by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"0 < c\"\n  shows \"b = 0 \\<and> c > 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  hence \"b = 0\" by simp\n  thus \"b = 0 \\<and> c > 0\" using h2 by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_solution": {"skill_name": "mathd_algebra_solution", "marker": "theorem mathd_algebra_solution:\n  fixes a b :: real\n  assumes h0: \"3 * a + 2 * b = 12\"\n    and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by simp\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_solution:\n  fixes a b :: real\n  assumes h0: \"3 * a + 2 * b = 12\"\n    and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by simp\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_110": {"skill_name": "mathd_algebra_110", "marker": "theorem mathd_algebra_110:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"c = 12\" using h2 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0 h2)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (metis \\<open>12 + 2 * b = 12\\<close> add_diff_cancel_left' dbl_def dbl_simps(3) h2 mult_2)\n  have \"2 * b = 0\" by (metis \\<open>2 * b = 12 - 12\\<close> dbl_simps(3) diff_self h2)\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_110:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"c = 12\" using h2 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0 h2)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (metis \\<open>12 + 2 * b = 12\\<close> add_diff_cancel_left' dbl_def dbl_simps(3) h2 mult_2)\n  have \"2 * b = 0\" by (metis \\<open>2 * b = 12 - 12\\<close> dbl_simps(3) diff_self h2)\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV6": {"skill_name": "mathd_algebra_109_extendedV6", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"n * a + m * b = c\" \n    and h1 : \"a = k\" \n    and h2 : \"n > 0\" \"m > 0\" \"c > 0\"\n  shows \"b = (c - n * k) / m\"\nproof -\n  have \"n * a + m * b = c\" using h0 by simp\n  then have \"n * k + m * b = c\" using h1 by simp\n  have \"m * b = c - n * k\" by (smt (verit) h0 h1)\n  thus \"b = (c - n * k) / m\" using h2(2) by (auto simp: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"n * a + m * b = c\" \n    and h1 : \"a = k\" \n    and h2 : \"n > 0\" \"m > 0\" \"c > 0\"\n  shows \"b = (c - n * k) / m\"\nproof -\n  have \"n * a + m * b = c\" using h0 by simp\n  then have \"n * k + m * b = c\" using h1 by simp\n  have \"m * b = c - n * k\" by (smt (verit) h0 h1)\n  thus \"b = (c - n * k) / m\" using h2(2) by (auto simp: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_multi": {"skill_name": "mathd_algebra_109_multi", "marker": "theorem mathd_algebra_109_multi:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = x\"  \n  shows \"b = (12 - 3*x) / 2\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * x + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_cancel_right_right diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  thus \"b = 0\" by simp\nqed\n\ntheorem mathd_algebra_109_multi:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = x\"  \n  shows \"b = (12 - 3*x) / 2\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * x + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then show ?thesis by (simp add: algebra_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV5": {"skill_name": "linear_equation_solutionV5", "marker": "theorem linear_equation_solution:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\"\n  assumes \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x + b = c\" using assms by simp\n  then have \"a * x = c - b\" by simp\n  then show \"x = (c - b) / a\" using assms(1) by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\"\n  assumes \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x + b = c\" using assms by simp\n  then have \"a * x = c - b\" by simp\n  then show \"x = (c - b) / a\" using assms(1) by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV8": {"skill_name": "mathd_algebra_109_evolvedV8", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  hence \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by (simp)\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by (simp add: field_simps)\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  hence \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by (simp)\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by (simp add: field_simps)\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV9": {"skill_name": "mathd_algebra_109_evolvedV9", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus ?thesis by simp\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V3": {"skill_name": "mathd_algebra_109V3", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by simp\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n  proof -\n    have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n    thus \"b = 0\" by simp\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_51": {"skill_name": "mathd_algebra_51", "marker": "theorem mathd_algebra_51:\n  fixes a b :: real\n  assumes \"0 < a \\<and> 0 < b\"\n    and \"a + b = 35\"\n    and \"a = (2/5) * b\"\n  shows \"b - a = 15\"\nproof -\n  have \"b = 35 - a\" using assms(2) by simp\n  then have \"a = (2/5) * (35 - a)\" using assms(3) by simp\n  then have \"5 * a = 2 * (35 - a)\" by (simp add: field_simps)\n  hence \"5 * a = 70 - 2 * a\" by simp\n  then have \"5 * a + 2 * a = 70\" by (simp add: field_simps)\n  thus ?thesis using assms(1) by (smt (verit) assms(2))\nqed", "description": "-", "full_code": "theorem mathd_algebra_51:\n  fixes a b :: real\n  assumes \"0 < a \\<and> 0 < b\"\n    and \"a + b = 35\"\n    and \"a = (2/5) * b\"\n  shows \"b - a = 15\"\nproof -\n  have \"b = 35 - a\" using assms(2) by simp\n  then have \"a = (2/5) * (35 - a)\" using assms(3) by simp\n  then have \"5 * a = 2 * (35 - a)\" by (simp add: field_simps)\n  hence \"5 * a = 70 - 2 * a\" by simp\n  then have \"5 * a + 2 * a = 70\" by (simp add: field_simps)\n  thus ?thesis using assms(1) by (smt (verit) assms(2))\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV7": {"skill_name": "mathd_algebra_109_extendedV7", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = k\"            \n  shows \"b = (c - 3*k) / 2\"      \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * k + 2 * b = c\" using h1 by (metis h0)\n  have \"2 * b = c - 3 * k\" by (smt (verit) h0 h1)\n  then show \"b = (c - 3 * k) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = k\"            \n  shows \"b = (c - 3*k) / 2\"      \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * k + 2 * b = c\" using h1 by (metis h0)\n  have \"2 * b = c - 3 * k\" by (smt (verit) h0 h1)\n  then show \"b = (c - 3 * k) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalized": {"skill_name": "mathd_algebra_109_generalized", "marker": "theorem mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV10": {"skill_name": "mathd_algebra_109_evolvedV10", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b + c = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + 0 = 12\\<close>)\n  hence \"2 * b = 12 - 12\" by (simp)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then show \"b = 0\" by (simp)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b + c = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + 0 = 12\\<close>)\n  hence \"2 * b = 12 - 12\" by (simp)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then show \"b = 0\" by (simp)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation": {"skill_name": "linear_equation", "marker": "lemma linear_equation:\n  fixes a b :: real\n  assumes \"m * a + n * b = c\"\n    and \"a = x\"\n  shows \"n * b = c - m * x\"\nproof -\n  have \"m * x + n * b = c\" using assms by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_equation:\n  fixes a b :: real\n  assumes \"m * a + n * b = c\"\n    and \"a = x\"\n  shows \"n * b = c - m * x\"\nproof -\n  have \"m * x + n * b = c\" using assms by simp\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_n_dimensional": {"skill_name": "mathd_algebra_n_dimensional", "marker": "theorem mathd_algebra_n_dimensional:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = n\"\n    and h1 : \"a = m\"\n  shows \"b = (n - 3*m) / 2\"\nproof -\n  have \"3 * a + 2 * b = n\" using h0 by simp\n  have \"3 * m + 2 * b = n\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = n - 3 * m\" by (smt (verit) h0 h1)\n  then have \"b = (n - 3 * m) / 2\" by (simp add: field_simps)\n  thus \"b = (n - 3 * m) / 2\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_n_dimensional:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = n\"\n    and h1 : \"a = m\"\n  shows \"b = (n - 3*m) / 2\"\nproof -\n  have \"3 * a + 2 * b = n\" using h0 by simp\n  have \"3 * m + 2 * b = n\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = n - 3 * m\" by (smt (verit) h0 h1)\n  then have \"b = (n - 3 * m) / 2\" by (simp add: field_simps)\n  thus \"b = (n - 3 * m) / 2\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "isolate_variable": {"skill_name": "isolate_variable", "marker": "lemma isolate_variable:\n  fixes a b c :: real\n  assumes h0: \"k * a + m * b = c\" \n    and h1: \"k \\<noteq> 0\"\n  shows \"a = (c - m * b) / k\"\nproof -\n  have \"k * a = c - m * b\" using h0 by simp\n  then show ?thesis by (metis h1 mult.commute nonzero_mult_div_cancel_right)\nqed", "description": "-", "full_code": "lemma isolate_variable:\n  fixes a b c :: real\n  assumes h0: \"k * a + m * b = c\" \n    and h1: \"k \\<noteq> 0\"\n  shows \"a = (c - m * b) / k\"\nproof -\n  have \"k * a = c - m * b\" using h0 by simp\n  then show ?thesis by (metis h1 mult.commute nonzero_mult_div_cancel_right)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV8": {"skill_name": "mathd_algebra_109_extendedV8", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 2 * b\"\n  shows \"b = 0 \\<and> c = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  hence \"b = 0\" by simp\n  have \"c = 2 * b\" using h2 by simp\n  thus \"b = 0 \\<and> c = 0\" by (simp add: \\<open>b = 0\\<close>)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 2 * b\"\n  shows \"b = 0 \\<and> c = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  have \"2 * b = 0\" by (metis \\<open>12 + 2 * b = 12\\<close> add_0_iff diff_minus_eq_add semiring_norm(5) verit_minus_simplify(3))\n  then have \"b = 0 / 2\" by auto\n  hence \"b = 0\" by simp\n  have \"c = 2 * b\" using h2 by simp\n  thus \"b = 0 \\<and> c = 0\" by (simp add: \\<open>b = 0\\<close>)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_relationship": {"skill_name": "mathd_algebra_relationship", "marker": "theorem mathd_algebra_relationship:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n  shows \"b = (12 - 3*a)/2\"\nproof -\n  have \"3*a + 2*b = 12\" using h0 by simp\n  then have \"2*b = 12 - 3*a\" by (simp add: algebra_simps)\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_relationship:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n  shows \"b = (12 - 3*a)/2\"\nproof -\n  have \"3*a + 2*b = 12\" using h0 by simp\n  then have \"2*b = 12 - 3*a\" by (simp add: algebra_simps)\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "specific_solution": {"skill_name": "specific_solution", "marker": "theorem specific_solution:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n    and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"b = (12 - 3*a)/2\" using mathd_algebra_relationship h0 by simp\n  then have \"b = (12 - 3*4)/2\" using h1 by simp\n  then show \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_relationship:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n  shows \"b = (12 - 3*a)/2\"\nproof -\n  have \"3*a + 2*b = 12\" using h0 by simp\n  then have \"2*b = 12 - 3*a\" by (simp add: algebra_simps)\n  then show ?thesis by (simp add: field_simps)\nqed\n\ntheorem specific_solution:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n    and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"b = (12 - 3*a)/2\" using mathd_algebra_relationship h0 by simp\n  then have \"b = (12 - 3*4)/2\" using h1 by simp\n  then show \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV9": {"skill_name": "mathd_algebra_109_extendedV9", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b x :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = x\"\n  shows \"b = (12 - 3 * x) / 2\"\nproof -\n  have \"2 * b = 12 - 3 * a\" using h0 by (simp add: field_simps)\n  then have \"b = (12 - 3 * a) / 2\" by (simp add: field_simps)\n  thus ?thesis using h1 by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b x :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = x\"\n  shows \"b = (12 - 3 * x) / 2\"\nproof -\n  have \"2 * b = 12 - 3 * a\" using h0 by (simp add: field_simps)\n  then have \"b = (12 - 3 * a) / 2\" by (simp add: field_simps)\n  thus ?thesis using h1 by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV10": {"skill_name": "mathd_algebra_109_extendedV10", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  have \"2 * b = c - 12\" by (metis \\<open>12 + 2 * b = c\\<close> add.left_commute add_diff_cancel_left add_minus_cancel equation_minus_iff is_num_normalize(1) minus_add_cancel minus_real_def mult.commute mult_2_right numeral_neq_neg_numeral numeral_times_minus_swap square_eq_iff uminus_add_conv_diff)\n  then show \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  have \"2 * b = c - 12\" by (metis \\<open>12 + 2 * b = c\\<close> add.left_commute add_diff_cancel_left add_minus_cancel equation_minus_iff is_num_normalize(1) minus_add_cancel minus_real_def mult.commute mult_2_right numeral_neq_neg_numeral numeral_times_minus_swap square_eq_iff uminus_add_conv_diff)\n  then show \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV11": {"skill_name": "mathd_algebra_109_evolvedV11", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  hence \"12 + 2 * b = 12\" by simp\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  hence \"b = 0 / 2\" by (simp add: field_simps)\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  hence \"12 + 2 * b = 12\" by simp\n  have \"2 * b = 12 - 12\" by (smt (verit) h0 h1)\n  hence \"b = 0 / 2\" by (simp add: field_simps)\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalizedV2": {"skill_name": "mathd_algebra_109_generalizedV2", "marker": "lemma mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  have \"2 * b = c - 12\" by (metis \\<open>12 + 2 * b = c\\<close> add_diff_cancel_left' dbl_def dbl_inc_simps(3) dbl_simps(3) dbl_simps(5) mult_2)\n  then show \"b = (c - 12) / 2\" by auto\nqed", "description": "-", "full_code": "lemma mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  have \"2 * b = c - 12\" by (metis \\<open>12 + 2 * b = c\\<close> add_diff_cancel_left' dbl_def dbl_inc_simps(3) dbl_simps(3) dbl_simps(5) mult_2)\n  then show \"b = (c - 12) / 2\" by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV12": {"skill_name": "mathd_algebra_109_evolvedV12", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = (c - 3 * a) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  moreover have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  hence \"2 * b = c - 12\" by (simp add: algebra_simps)\n  thus \"b = (c - 3 * a) / 2\" using h1 h2 by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = (c - 3 * a) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  moreover have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  hence \"2 * b = c - 12\" by (simp add: algebra_simps)\n  thus \"b = (c - 3 * a) / 2\" using h1 h2 by (simp add: algebra_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V4": {"skill_name": "mathd_algebra_109V4", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV6": {"skill_name": "linear_equation_solutionV6", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  then have \"m*c + n*b = p\" using h1 by simp\n  then have \"n*b = p - m*c\" by (metis add_diff_cancel_left')\n  then have \"b = (p - m*c) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  then have \"m*c + n*b = p\" using h1 by simp\n  then have \"n*b = p - m*c\" by (metis add_diff_cancel_left')\n  then have \"b = (p - m*c) / n\" by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV11": {"skill_name": "mathd_algebra_109_extendedV11", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"      \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"      \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_general": {"skill_name": "mathd_algebra_109_general", "marker": "theorem mathd_algebra_109_general:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = c\"  \n    and h1 : \"a = d\"                \n  shows \"b = (c - 3 * d) / 2\"       \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_general:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = c\"  \n    and h1 : \"a = d\"                \n  shows \"b = (c - 3 * d) / 2\"       \nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV12": {"skill_name": "mathd_algebra_109_extendedV12", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  hence \"2 * b = c - 12\" by (simp add: algebra_simps)\n  thus \"b = (c - 12) / 2\" using assms by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * a + 2 * b = c\" using h0 by simp\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = c\" by (smt (verit) \\<open>3 * 4 + 2 * b = c\\<close>)\n  hence \"2 * b = c - 12\" by (simp add: algebra_simps)\n  thus \"b = (c - 12) / 2\" using assms by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_improved": {"skill_name": "mathd_algebra_109_improved", "marker": "theorem mathd_algebra_109_improved:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n      and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  thus \"b = 0\" \n    using `12 + 2 * b = 12` by (simp add: add_eq_0_iff)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_improved:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = 12\"\n      and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  thus \"b = 0\" \n    using `12 + 2 * b = 12` by (simp add: add_eq_0_iff)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_with_parameter": {"skill_name": "linear_equation_with_parameter", "marker": "theorem linear_equation_with_parameter:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = k\" \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*k) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*k) / n\" using h1 by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by (metis h2 nonzero_mult_div_cancel_right)\nqed", "description": "-", "full_code": "theorem linear_equation_with_parameter:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = k\" \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*k) / n\"\nproof -\n  have \"n*b = p - m*a\" using h0 by simp\n  then have \"b = (p - m*k) / n\" using h1 by (metis h2 mult.commute nonzero_mult_div_cancel_right)\n  then show ?thesis by (metis h2 nonzero_mult_div_cancel_right)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_n_dimensions": {"skill_name": "mathd_algebra_109_n_dimensions", "marker": "lemma mathd_algebra_109_n_dimensions:\n  fixes a b :: \"real\"\n  assumes h0 : \"0 < a \\<and> 0 < b\"\n    and h1 : \"3*a + 2*b = 12\"\n  shows \"b = (12 - 3*a) / 2\"\nproof -\n  have \"b = (12 - 3*a) / 2\" using h1 by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma mathd_algebra_109_n_dimensions:\n  fixes a b :: \"real\"\n  assumes h0 : \"0 < a \\<and> 0 < b\"\n    and h1 : \"3*a + 2*b = 12\"\n  shows \"b = (12 - 3*a) / 2\"\nproof -\n  have \"b = (12 - 3*a) / 2\" using h1 by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV13": {"skill_name": "mathd_algebra_109_evolvedV13", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by simp\n  hence \"2 * b = 0\" by simp\n  thus \"b = 0\" by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 12 - 12\" by simp\n  hence \"2 * b = 0\" by simp\n  thus \"b = 0\" by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalV2": {"skill_name": "mathd_algebra_109_generalV2", "marker": "theorem mathd_algebra_109_general:\n  fixes a b :: real\n  assumes h0: \"c * a + d * b = e\"  \n    and h1: \"a = f\"  \n    and c: \"c > 0\" and d: \"d > 0\"  \n  shows \"b = (e - c * f) / d\"  \nproof -\n  have \"c * a + d * b = e\" using h0 by simp\n  have \"c * f + d * b = e\" using h1 by (metis assms(1))\n  have \"d * b = e - c * f\" by (metis \\<open>c * f + d * b = e\\<close> add_diff_cancel_left' h1 mult_delta_right)\n  then show \"b = (e - c * f) / d\" using d by (auto simp: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_general:\n  fixes a b :: real\n  assumes h0: \"c * a + d * b = e\"  \n    and h1: \"a = f\"  \n    and c: \"c > 0\" and d: \"d > 0\"  \n  shows \"b = (e - c * f) / d\"  \nproof -\n  have \"c * a + d * b = e\" using h0 by simp\n  have \"c * f + d * b = e\" using h1 by (metis assms(1))\n  have \"d * b = e - c * f\" by (metis \\<open>c * f + d * b = e\\<close> add_diff_cancel_left' h1 mult_delta_right)\n  then show \"b = (e - c * f) / d\" using d by (auto simp: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV14": {"skill_name": "mathd_algebra_109_evolvedV14", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by (simp add: algebra_simps)\n  thus \"b = 0\" by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  then have \"12 + 2 * b = 12\" by (simp add: algebra_simps)\n  thus \"b = 0\" by (simp add: algebra_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_simplified": {"skill_name": "mathd_algebra_109_simplified", "marker": "theorem mathd_algebra_109_simplified:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  thus \"b = 0\" \n    by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_simplified:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  then have \"3 * 4 + 2 * b = 12\" using h1 by simp\n  thus \"b = 0\" \n    by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_system": {"skill_name": "solve_linear_system", "marker": "lemma solve_linear_system:\n  fixes a b p :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = a_value\"  \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*a_value) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  have \"m*a_value + n*b = p\" using h1 by (metis h0)\n  then have \"n*b = p - m*a_value\" by simp\n  then have \"b = (p - m*a_value) / n\" using h2\n    by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma solve_linear_system:\n  fixes a b p :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = a_value\"  \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*a_value) / n\"\nproof -\n  have \"m*a + n*b = p\" using h0 by simp\n  have \"m*a_value + n*b = p\" using h1 by (metis h0)\n  then have \"n*b = p - m*a_value\" by simp\n  then have \"b = (p - m*a_value) / n\" using h2\n    by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V5": {"skill_name": "mathd_algebra_109V5", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 12 - 12\" by (simp add: algebra_simps)\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 12 - 12\" by (simp add: algebra_simps)\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}}