{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "multi_distrib_complex_general": {"skill_name": "multi_distrib_complex_general", "marker": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  assumes \"f = a + b\" and \"d = c + e\"\n  shows \"f * d = a * c + a * e + b * c + b * e\"\nproof -\n  have \"f * d = (a + b) * (c + e)\" using assms by auto\n  thus ?thesis by (simp add: distrib_left distrib_right)\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  assumes \"f = a + b\" and \"d = c + e\"\n  shows \"f * d = a * c + a * e + b * c + b * e\"\nproof -\n  have \"f * d = (a + b) * (c + e)\" using assms by auto\n  thus ?thesis by (simp add: distrib_left distrib_right)\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_over_complex": {"skill_name": "multi_distrib_over_complex", "marker": "lemma multi_distrib_over_complex:\n  fixes a b c d e f :: complex\n  assumes \"a + b = c + d\"\n  shows \"(a + b) * (e + f) = c * e + c * f + d * e + d * f\"\nproof -\n  have \"c + d = a + b\" using assms by simp\n  hence \"(a + b) * (e + f) = (c + d) * (e + f)\" by simp\n  thus ?thesis by (simp add: distrib_left distrib_right)\nqed", "description": "-", "full_code": "lemma multi_distrib_over_complex:\n  fixes a b c d e f :: complex\n  assumes \"a + b = c + d\"\n  shows \"(a + b) * (e + f) = c * e + c * f + d * e + d * f\"\nproof -\n  have \"c + d = a + b\" using assms by simp\n  hence \"(a + b) * (e + f) = (c + d) * (e + f)\" by simp\n  thus ?thesis by (simp add: distrib_left distrib_right)\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_complex_generalV2": {"skill_name": "multi_distrib_complex_generalV2", "marker": "lemma multi_distrib_complex_general:\n  fixes z1 z2 z3 z4 :: complex\n  shows \"(z1 + z2) * (z3 + z4) = z1 * z3 + z1 * z4 + z2 * z3 + z2 * z4\"\nproof -\n  have \"(z1 + z2) * (z3 + z4) = z1 * z3 + z1 * z4 + z2 * z3 + z2 * z4\"\n    by (simp add: distrib_left distrib_right)\n  thus ?thesis .\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_general:\n  fixes z1 z2 z3 z4 :: complex\n  shows \"(z1 + z2) * (z3 + z4) = z1 * z3 + z1 * z4 + z2 * z3 + z2 * z4\"\nproof -\n  have \"(z1 + z2) * (z3 + z4) = z1 * z3 + z1 * z4 + z2 * z3 + z2 * z4\"\n    by (simp add: distrib_left distrib_right)\n  thus ?thesis .\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_complex_extended": {"skill_name": "multi_distrib_complex_extended", "marker": "lemma multi_distrib_complex_extended:\n  fixes a b c d e f :: complex\n  shows \"(a + b + c) * (d + e + f) = a * d + a * e + a * f + b * d + b * e + b * f + c * d + c * e + c * f\"\nproof -\n  have \"(a + b + c) * (d + e + f) = (a + b) * (d + e + f) + c * (d + e + f)\" by (simp add: algebra_simps)\n  also have \"... = (a + b) * d + (a + b) * e + (a + b) * f + c * d + c * e + c * f\" by (auto simp: field_simps)\n  also have \"... = (a * d + b * d) + (a * e + b * e) + (a * f + b * f) + c * d + c * e + c * f\" by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_extended:\n  fixes a b c d e f :: complex\n  shows \"(a + b + c) * (d + e + f) = a * d + a * e + a * f + b * d + b * e + b * f + c * d + c * e + c * f\"\nproof -\n  have \"(a + b + c) * (d + e + f) = (a + b) * (d + e + f) + c * (d + e + f)\" by (simp add: algebra_simps)\n  also have \"... = (a + b) * d + (a + b) * e + (a + b) * f + c * d + c * e + c * f\" by (auto simp: field_simps)\n  also have \"... = (a * d + b * d) + (a * e + b * e) + (a * f + b * f) + c * d + c * e + c * f\" by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_complex_generalV3": {"skill_name": "multi_distrib_complex_generalV3", "marker": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = (a + b + e + f) * (c + d)\"\n    by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\"\n    by (simp add: distrib_right)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = (a + b + e + f) * (c + d)\"\n    by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\"\n    by (simp add: distrib_right)\n  finally show ?thesis .\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_over_complex_general": {"skill_name": "multi_distrib_over_complex_general", "marker": "lemma multi_distrib_over_complex_general:\n  fixes a b c d e f :: complex\n  assumes \"a + b = c + d\"\n  shows \"(a + b) * (e + f) = c * (e + f) + d * (e + f)\"\nproof -\n  have \"c + d = a + b\" using assms by simp\n  hence \"(a + b) * (e + f) = (c + d) * (e + f)\" by simp\n  thus ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma multi_distrib_over_complex_general:\n  fixes a b c d e f :: complex\n  assumes \"a + b = c + d\"\n  shows \"(a + b) * (e + f) = c * (e + f) + d * (e + f)\"\nproof -\n  have \"c + d = a + b\" using assms by simp\n  hence \"(a + b) * (e + f) = (c + d) * (e + f)\" by simp\n  thus ?thesis by (auto simp: field_simps)\nqed", "origin": "multi_distrib_over_complex", "update_count": 0}, "square_root_eq": {"skill_name": "square_root_eq", "marker": "lemma square_root_eq:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp", "description": "", "full_code": "lemma square_root_eq:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp", "origin": "data/full_data/debug/valid_rand/mathd_algebra_31.json_v1", "update_count": -1}, "square_nonneg": {"skill_name": "square_nonneg", "marker": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms(1) have \"b = a\" by simp\n  hence \"a^2 = b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms(1) have \"b = a\" by simp\n  hence \"a^2 = b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_nonnegV2": {"skill_name": "square_nonnegV2", "marker": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by sos\n  also have \"... = b * b\" using assms(1) by simp\n  finally show \"a^2 = b^2\" by sos\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by sos\n  also have \"... = b * b\" using assms(1) by simp\n  finally show \"a^2 = b^2\" by sos\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_nonnegative": {"skill_name": "square_root_eq_nonnegative", "marker": "lemma square_root_eq_nonnegative:\n  fixes a b :: real\n  assumes \"a = b\" and \"0 \\<le> a\" and \"0 \\<le> b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp", "description": "-", "full_code": "lemma square_root_eq_nonnegative:\n  fixes a b :: real\n  assumes \"a = b\" and \"0 \\<le> a\" and \"0 \\<le> b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp", "origin": "square_root_eq", "update_count": 0}, "square_root_product": {"skill_name": "square_root_product", "marker": "lemma square_root_product:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) ^ 2 = a * b\" by (smt (verit) assms(1) assms(2) real_sqrt_pow2_iff split_mult_pos_le)\n  also have \"... = (sqrt a) ^ 2 * (sqrt b) ^ 2\" by (metis abs_if_raw assms(1) assms(2) real_sqrt_abs real_sqrt_abs2 real_sqrt_power verit_comp_simplify1(3))\n  also have \"... = (sqrt a * sqrt b) ^ 2\" by (auto simp: field_simps)\n  finally show ?thesis by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma square_root_product:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) ^ 2 = a * b\" by (smt (verit) assms(1) assms(2) real_sqrt_pow2_iff split_mult_pos_le)\n  also have \"... = (sqrt a) ^ 2 * (sqrt b) ^ 2\" by (metis abs_if_raw assms(1) assms(2) real_sqrt_abs real_sqrt_abs2 real_sqrt_power verit_comp_simplify1(3))\n  also have \"... = (sqrt a * sqrt b) ^ 2\" by (auto simp: field_simps)\n  finally show ?thesis by (metis real_sqrt_mult)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_sum": {"skill_name": "square_root_sum", "marker": "lemma square_root_sum:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a + b) \\<le> sqrt a + sqrt b\"\nproof -\n  have \"sqrt (a + b) ^ 2 = a + b\" by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_pow2)\n  also have \"... \\<le> (sqrt a + sqrt b) ^ 2\" \n    using assms by (metis sqrt_add_le_add_sqrt sqrt_le_D)\n  finally show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "description": "-", "full_code": "lemma square_root_sum:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a + b) \\<le> sqrt a + sqrt b\"\nproof -\n  have \"sqrt (a + b) ^ 2 = a + b\" by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_pow2)\n  also have \"... \\<le> (sqrt a + sqrt b) ^ 2\" \n    using assms by (metis sqrt_add_le_add_sqrt sqrt_le_D)\n  finally show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_properties": {"skill_name": "square_root_properties", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\" \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt a = sqrt b\" \"sqrt a^2 = a\" \"sqrt b^2 = b\"\n  using assms by (auto simp: sqrt_def)", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\" \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt a = sqrt b\" \"sqrt a^2 = a\" \"sqrt b^2 = b\"\n  using assms by (auto simp: sqrt_def)", "origin": "square_root_eq", "update_count": 0}, "square_both_sides": {"skill_name": "square_both_sides", "marker": "lemma square_both_sides:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  also have \"... = b * b\" using assms by (simp)\n  finally show \"a^2 = b^2\" by sos\nqed", "description": "-", "full_code": "lemma square_both_sides:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  also have \"... = b * b\" using assms by (simp)\n  finally show \"a^2 = b^2\" by sos\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_n": {"skill_name": "square_root_eq_n", "marker": "lemma square_root_eq_n:\n  fixes a b :: real\n  assumes \"n > 0\"\n  shows \"sqrt (a * n) = sqrt (b * n) \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt (a * n) = sqrt (b * n) \\<longleftrightarrow> a * n = b * n\" \n    by auto\n  moreover have \"a * n = b * n \\<longleftrightarrow> a = b\" \n    using assms by auto\n  ultimately show ?thesis by auto\nqed", "description": "-", "full_code": "lemma square_root_eq_n:\n  fixes a b :: real\n  assumes \"n > 0\"\n  shows \"sqrt (a * n) = sqrt (b * n) \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt (a * n) = sqrt (b * n) \\<longleftrightarrow> a * n = b * n\" \n    by auto\n  moreover have \"a * n = b * n \\<longleftrightarrow> a = b\" \n    using assms by auto\n  ultimately show ?thesis by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_multiple": {"skill_name": "square_root_eq_multiple", "marker": "lemma square_root_eq_multiple:\n  fixes a b :: real\n  assumes \"a = b\" and \"c = d\"\n  shows \"sqrt a = sqrt b \\<and> sqrt c = sqrt d\"\n  using square_root_eq_general[OF assms(1)] square_root_eq_general[OF assms(2)] by auto", "description": "-", "full_code": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp\n\nlemma square_root_eq_multiple:\n  fixes a b :: real\n  assumes \"a = b\" and \"c = d\"\n  shows \"sqrt a = sqrt b \\<and> sqrt c = sqrt d\"\n  using square_root_eq_general[OF assms(1)] square_root_eq_general[OF assms(2)] by auto", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_multi": {"skill_name": "square_root_eq_multi", "marker": "lemma square_root_eq_multi:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\" \n  and \"sqrt (a + c) = sqrt (b + c)\" \n  and \"sqrt (a * d) = sqrt (b * d)\"\n  using assms by auto", "description": "-", "full_code": "lemma square_root_eq_multi:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\" \n  and \"sqrt (a + c) = sqrt (b + c)\" \n  and \"sqrt (a * d) = sqrt (b * d)\"\n  using assms by auto", "origin": "square_root_eq", "update_count": 0}, "square_root_addition": {"skill_name": "square_root_addition", "marker": "lemma square_root_addition:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt (x + y) <= sqrt x + sqrt y\"\nproof -\n  have \"sqrt (x + y) ^ 2 = x + y\" using assms by auto\n  also have \"... <= (sqrt x + sqrt y) ^ 2\"\n    by (metis assms(1) assms(2) sqrt_add_le_add_sqrt sqrt_le_D)\n  finally show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "description": "-", "full_code": "lemma square_root_addition:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt (x + y) <= sqrt x + sqrt y\"\nproof -\n  have \"sqrt (x + y) ^ 2 = x + y\" using assms by auto\n  also have \"... <= (sqrt x + sqrt y) ^ 2\"\n    by (metis assms(1) assms(2) sqrt_add_le_add_sqrt sqrt_le_D)\n  finally show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_nonneg": {"skill_name": "square_root_nonneg", "marker": "lemma square_root_nonneg:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\n  using assms by auto", "description": "-", "full_code": "lemma square_root_nonneg:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\n  using assms by auto", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_dimensional": {"skill_name": "square_root_eq_dimensional", "marker": "lemma square_root_eq_dimensional:\n  fixes a b :: \"real list\" \n  assumes \"length a = length b\" \"a = b\"\n  shows \"(\\<forall>i. 0 \\<le> a ! i) \\<Longrightarrow> (\\<forall>i. 0 \\<le> b ! i) \\<Longrightarrow> (\\<forall>i. sqrt (a ! i) = sqrt (b ! i))\"\nproof -\n  have \"\\<forall>i. sqrt (a ! i) = sqrt (b ! i)\" \n    using assms(2) by (metis nth_equalityI)\n  thus ?thesis using assms(1) by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_dimensional:\n  fixes a b :: \"real list\" \n  assumes \"length a = length b\" \"a = b\"\n  shows \"(\\<forall>i. 0 \\<le> a ! i) \\<Longrightarrow> (\\<forall>i. 0 \\<le> b ! i) \\<Longrightarrow> (\\<forall>i. sqrt (a ! i) = sqrt (b ! i))\"\nproof -\n  have \"\\<forall>i. sqrt (a ! i) = sqrt (b ! i)\" \n    using assms(2) by (metis nth_equalityI)\n  thus ?thesis using assms(1) by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_nonneg": {"skill_name": "sqrt_nonneg", "marker": "lemma sqrt_nonneg:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = sqrt a\" using assms by simp\n  thus ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "description": "-", "full_code": "lemma sqrt_nonneg:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = sqrt a\" using assms by simp\n  thus ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_positive": {"skill_name": "sqrt_positive", "marker": "lemma sqrt_positive:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = sqrt (max a 0)\" using assms by (simp add: max_def)\n  then show ?thesis using assms by simp\nqed", "description": "-", "full_code": "lemma sqrt_positive:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = sqrt (max a 0)\" using assms by (simp add: max_def)\n  then show ?thesis using assms by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_nonnegV2": {"skill_name": "square_root_nonnegV2", "marker": "lemma square_root_nonneg:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = (if a = 0 then 0 else sqrt (a))\" by auto\n  then show ?thesis using assms by auto\nqed", "description": "-", "full_code": "lemma square_root_nonneg:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = (if a = 0 then 0 else sqrt (a))\" by auto\n  then show ?thesis using assms by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_equality": {"skill_name": "sqrt_equality", "marker": "lemma sqrt_equality:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms by auto\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_equality:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms by auto\n  then show ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_inequality": {"skill_name": "square_root_inequality", "marker": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"a < b\"\n  shows \"sqrt a < sqrt b\"\nproof -\n  have \"sqrt a < sqrt b \\<longleftrightarrow> sqrt a^2 < sqrt b^2\" using assms by auto\n  then show ?thesis by (metis assms(3) real_sqrt_less_mono)\nqed", "description": "-", "full_code": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"a < b\"\n  shows \"sqrt a < sqrt b\"\nproof -\n  have \"sqrt a < sqrt b \\<longleftrightarrow> sqrt a^2 < sqrt b^2\" using assms by auto\n  then show ?thesis by (metis assms(3) real_sqrt_less_mono)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_property": {"skill_name": "square_root_property", "marker": "lemma square_root_property:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt (x^2) = abs x\"\nproof -\n  have \"sqrt (x^2) = sqrt ((abs x)^2)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma square_root_property:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt (x^2) = abs x\"\nproof -\n  have \"sqrt (x^2) = sqrt ((abs x)^2)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_productV2": {"skill_name": "square_root_productV2", "marker": "lemma square_root_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\n  by (metis real_sqrt_mult)", "description": "-", "full_code": "lemma square_root_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\n  by (metis real_sqrt_mult)", "origin": "square_root_eq", "update_count": 0}, "algebraic_manipulation": {"skill_name": "algebraic_manipulation", "marker": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"b = c - a\" using assms by (simp add: add_diff_eq)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"b = c - a\" using assms by (simp add: add_diff_eq)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_general": {"skill_name": "square_root_eq_general", "marker": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms(1) by simp\n  thus ?thesis using assms(2) assms(3) by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms(1) by simp\n  thus ?thesis using assms(2) assms(3) by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_equivalence": {"skill_name": "sqrt_equivalence", "marker": "lemma sqrt_equivalence:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nqed", "description": "-", "full_code": "lemma sqrt_equivalence:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_propertiesV2": {"skill_name": "square_root_propertiesV2", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<Longrightarrow> a = b\" \n    using assms(1) assms(2) by auto\n  have \"a = b \\<Longrightarrow> sqrt a = sqrt b\" \n    using assms(1) assms(2) by simp\n  show ?thesis\n    by auto\nqed", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<Longrightarrow> a = b\" \n    using assms(1) assms(2) by auto\n  have \"a = b \\<Longrightarrow> sqrt a = sqrt b\" \n    using assms(1) assms(2) by simp\n  show ?thesis\n    by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_propertiesV3": {"skill_name": "square_root_propertiesV3", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\" \n    and \"sqrt a^2 = abs a\" \n    and \"sqrt (a * b) = sqrt a * sqrt b\"\n  using assms by (simp_all add: power2_eq_square)", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\" \n    and \"sqrt a^2 = abs a\" \n    and \"sqrt (a * b) = sqrt a * sqrt b\"\n  using assms by (simp_all add: power2_eq_square)", "origin": "square_root_eq", "update_count": 0}, "square_root_positive_eq": {"skill_name": "square_root_positive_eq", "marker": "lemma square_root_positive_eq:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<Longrightarrow> a = b\"\n    by auto\n  moreover\n  have \"a = b \\<Longrightarrow> sqrt a = sqrt b\" by simp\n  ultimately show ?thesis by (metis)\nqed", "description": "-", "full_code": "lemma square_root_positive_eq:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<Longrightarrow> a = b\"\n    by auto\n  moreover\n  have \"a = b \\<Longrightarrow> sqrt a = sqrt b\" by simp\n  ultimately show ?thesis by (metis)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_property_generalized": {"skill_name": "square_root_property_generalized", "marker": "lemma square_root_property_generalized:\n  fixes a b :: real\n  assumes \"a = sqrt b\" and \"b >= 0\"\n  shows \"a^2 = b\"\n  by (simp add: assms)", "description": "-", "full_code": "lemma square_root_property_generalized:\n  fixes a b :: real\n  assumes \"a = sqrt b\" and \"b >= 0\"\n  shows \"a^2 = b\"\n  by (simp add: assms)", "origin": "square_root_eq", "update_count": 0}, "isolate_variable": {"skill_name": "isolate_variable", "marker": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "isolate_variableV2": {"skill_name": "isolate_variableV2", "marker": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\" by (metis assms diff_add_eq_diff_diff_swap diff_eq_diff_eq eq_iff_diff_eq_0)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\" by (metis assms diff_add_eq_diff_diff_swap diff_eq_diff_eq eq_iff_diff_eq_0)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_multi_dim": {"skill_name": "square_root_eq_multi_dim", "marker": "lemma square_root_eq_multi_dim:\n  fixes a b :: \"real list\"\n  assumes \"a = b\"\n  shows \"(\\<forall>i. sqrt (a ! i) = sqrt (b ! i))\"\nproof -\n  have \"(\\<forall>i. a ! i = b ! i)\" using assms by simp\n  then show ?thesis\n    by (metis (no_types, lifting) nth_equalityI)\nqed", "description": "-", "full_code": "lemma square_root_eq_multi:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp\n\nlemma square_root_eq_multi_dim:\n  fixes a b :: \"real list\"\n  assumes \"a = b\"\n  shows \"(\\<forall>i. sqrt (a ! i) = sqrt (b ! i))\"\nproof -\n  have \"(\\<forall>i. a ! i = b ! i)\" using assms by simp\n  then show ?thesis\n    by (metis (no_types, lifting) nth_equalityI)\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_eq": {"skill_name": "sqrt_eq", "marker": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  from assms(1) have \"sqrt a = sqrt b\" \n    by (simp add: assms(2) assms(3))\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  from assms(1) have \"sqrt a = sqrt b\" \n    by (simp add: assms(2) assms(3))\n  then show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_diff": {"skill_name": "square_root_diff", "marker": "lemma square_root_diff:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"\\<lbrakk> a^2 + b^2 = c^2; a \\<le> b \\<rbrakk> \\<Longrightarrow> a = sqrt (c^2 - b^2)\"\nproof -\n  assume \"a^2 + b^2 = c^2\" \"a \\<le> b\"\n  hence \"c^2 - b^2 = a^2\" by simp\n  hence \"sqrt (c^2 - b^2) = sqrt (a^2)\" by (metis assms(1) assms(2) power2_eq_square)\n  thus \"a = sqrt (c^2 - b^2)\" using assms(1) by simp\nqed", "description": "-", "full_code": "lemma square_root_diff:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"\\<lbrakk> a^2 + b^2 = c^2; a \\<le> b \\<rbrakk> \\<Longrightarrow> a = sqrt (c^2 - b^2)\"\nproof -\n  assume \"a^2 + b^2 = c^2\" \"a \\<le> b\"\n  hence \"c^2 - b^2 = a^2\" by simp\n  hence \"sqrt (c^2 - b^2) = sqrt (a^2)\" by (metis assms(1) assms(2) power2_eq_square)\n  thus \"a = sqrt (c^2 - b^2)\" using assms(1) by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_nonneg_eq": {"skill_name": "sqrt_nonneg_eq", "marker": "lemma sqrt_nonneg_eq:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms by (simp add: field_simps)", "description": "-", "full_code": "lemma sqrt_nonneg_eq:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms by (simp add: field_simps)", "origin": "square_root_eq", "update_count": 0}, "sqrt_diff_squares": {"skill_name": "sqrt_diff_squares", "marker": "lemma sqrt_diff_squares:\n  fixes a b :: real\n  assumes \"a >= b\"\n  shows \"sqrt (a^2 - b^2) = sqrt (a + b) * sqrt (a - b)\"\nproof -\n  have \"a^2 - b^2 = (a + b) * (a - b)\" by sos\n  thus ?thesis using assms by (metis mult.commute real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma sqrt_diff_squares:\n  fixes a b :: real\n  assumes \"a >= b\"\n  shows \"sqrt (a^2 - b^2) = sqrt (a + b) * sqrt (a - b)\"\nproof -\n  have \"a^2 - b^2 = (a + b) * (a - b)\" by sos\n  thus ?thesis using assms by (metis mult.commute real_sqrt_mult)\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_add_square": {"skill_name": "sqrt_add_square", "marker": "lemma sqrt_add_square:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a^2 + b^2) >= a\"\nproof -\n  have \"a^2 >= 0\" using assms(1) by simp\n  then have \"a^2 + b^2 >= a^2\" using assms(2) by simp\n  then have \"sqrt (a^2 + b^2) >= sqrt (a^2)\" by auto\n  thus ?thesis using assms(1) by simp\nqed", "description": "-", "full_code": "lemma sqrt_add_square:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a^2 + b^2) >= a\"\nproof -\n  have \"a^2 >= 0\" using assms(1) by simp\n  then have \"a^2 + b^2 >= a^2\" using assms(2) by simp\n  then have \"sqrt (a^2 + b^2) >= sqrt (a^2)\" by auto\n  thus ?thesis using assms(1) by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_square": {"skill_name": "square_root_eq_square", "marker": "lemma square_root_eq_square:\n  fixes a b :: real\n  assumes \"b >= 0\"\n  shows \"sqrt a = b \\<Longrightarrow> a = b^2\"\n  using assms by auto", "description": "-", "full_code": "lemma square_root_eq_square:\n  fixes a b :: real\n  assumes \"b >= 0\"\n  shows \"sqrt a = b \\<Longrightarrow> a = b^2\"\n  using assms by auto", "origin": "square_root_eq", "update_count": 0}, "sqrt_product": {"skill_name": "sqrt_product", "marker": "theorem sqrt_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt a * sqrt b\"\n    by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem sqrt_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt a * sqrt b\"\n    by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_unique": {"skill_name": "sqrt_unique", "marker": "lemma sqrt_unique:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a^2 = sqrt b^2\" using assms by auto\n  thus ?thesis by (metis assms(3) real_sqrt_eq_iff)\nqed", "description": "-", "full_code": "lemma sqrt_unique:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a^2 = sqrt b^2\" using assms by auto\n  thus ?thesis by (metis assms(3) real_sqrt_eq_iff)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_nonnegV3": {"skill_name": "square_nonnegV3", "marker": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\"  \n  have \"a^2 = a * a\" by sos  \n  then show \"a^2 >= 0\" using `a >= 0` by (metis mult_nonneg_nonneg)  \nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\"  \n  have \"a^2 = a * a\" by sos  \n  then show \"a^2 >= 0\" using `a >= 0` by (metis mult_nonneg_nonneg)  \nqed", "origin": "do_request", "update_count": 0}, "square_nonnegV4": {"skill_name": "square_nonnegV4", "marker": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\"  \n  have \"a^2 = a * a\" by sos  \n  also have \"... >= 0\" using `a >= 0` by (simp add: mult_nonneg_nonneg)  \n  finally show \"a^2 >= 0\" by simp  \nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\"  \n  have \"a^2 = a * a\" by sos  \n  also have \"... >= 0\" using `a >= 0` by (simp add: mult_nonneg_nonneg)  \n  finally show \"a^2 >= 0\" by simp  \nqed", "origin": "do_request", "update_count": 0}, "square_nonnegV5": {"skill_name": "square_nonnegV5", "marker": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\" \n  have \"a^2 = a * a\" by sos\n  moreover have \"0 <= a\" by (simp add: `a >= 0`)\n  ultimately show \"a^2 >= 0\" using mult_nonneg_nonneg by auto\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a >= 0 \\<Longrightarrow> a^2 >= 0\"\nproof -\n  assume \"a >= 0\" \n  have \"a^2 = a * a\" by sos\n  moreover have \"0 <= a\" by (simp add: `a >= 0`)\n  ultimately show \"a^2 >= 0\" using mult_nonneg_nonneg by auto\nqed", "origin": "do_request", "update_count": 0}, "algebraic_manipulationV2": {"skill_name": "algebraic_manipulationV2", "marker": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"b = c - a\" by (metis assms diff_diff_eq diff_eq_diff_eq eq_iff_diff_eq_0 neg_equal_iff_equal)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"b = c - a\" by (metis assms diff_diff_eq diff_eq_diff_eq eq_iff_diff_eq_0 neg_equal_iff_equal)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_n_dimensions": {"skill_name": "square_root_eq_n_dimensions", "marker": "lemma square_root_eq_n_dimensions:\n  fixes a b :: \"real list\"\n  assumes \"length a = length b\" and \"a = b\" and \"\\<forall>i. a ! i >= 0\"\n  shows \"map sqrt a = map sqrt b\"\nproof -\n  have \"map sqrt a = map sqrt b\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_n_dimensions:\n  fixes a b :: \"real list\"\n  assumes \"length a = length b\" and \"a = b\" and \"\\<forall>i. a ! i >= 0\"\n  shows \"map sqrt a = map sqrt b\"\nproof -\n  have \"map sqrt a = map sqrt b\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_generalV2": {"skill_name": "square_root_eq_generalV2", "marker": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms by auto", "description": "-", "full_code": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms by auto", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_for_nonnegative": {"skill_name": "square_root_eq_for_nonnegative", "marker": "lemma square_root_eq_for_nonnegative:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms square_root_eq_general by simp", "description": "-", "full_code": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp\n\nlemma square_root_eq_for_nonnegative:\n  fixes a b :: real\n  assumes \"a = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using assms square_root_eq_general by simp", "origin": "square_root_eq", "update_count": 0}, "square_root_positive": {"skill_name": "square_root_positive", "marker": "lemma square_root_positive:\n  fixes a :: real\n  assumes \"a > 0\"\n  shows \"sqrt a > 0\"\n  using assms real_sqrt_gt_0_iff by blast", "description": "-", "full_code": "lemma square_root_positive:\n  fixes a :: real\n  assumes \"a > 0\"\n  shows \"sqrt a > 0\"\n  using assms real_sqrt_gt_0_iff by blast", "origin": "square_root_eq", "update_count": 0}, "square_root_nonnegV3": {"skill_name": "square_root_nonnegV3", "marker": "lemma square_root_nonneg:\n  fixes x :: real\n  shows \"x >= 0 \\<Longrightarrow> sqrt x >= 0\"\n  by auto", "description": "-", "full_code": "lemma square_root_nonneg:\n  fixes x :: real\n  shows \"x >= 0 \\<Longrightarrow> sqrt x >= 0\"\n  by auto", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_multiV2": {"skill_name": "square_root_eq_multiV2", "marker": "lemma square_root_eq_multi:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b \\<and> sqrt (a^2) = sqrt (b^2) \\<and> (\\<forall>c. c = a \\<or> c = b \\<longrightarrow> sqrt c = sqrt c)\"\n  using square_root_eq assms by auto", "description": "-", "full_code": "lemma square_root_eq:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp\n\nlemma square_root_eq_multi:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b \\<and> sqrt (a^2) = sqrt (b^2) \\<and> (\\<forall>c. c = a \\<or> c = b \\<longrightarrow> sqrt c = sqrt c)\"\n  using square_root_eq assms by auto", "origin": "square_root_eq", "update_count": 0}, "sqrt_uniqueV2": {"skill_name": "sqrt_uniqueV2", "marker": "lemma sqrt_unique:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\" and \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a * sqrt a = sqrt b * sqrt b\" using assms(3) by (simp add: power2_eq_square)\n  then show ?thesis using assms(1) assms(2) by auto\nqed", "description": "-", "full_code": "lemma sqrt_unique:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\" and \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a * sqrt a = sqrt b * sqrt b\" using assms(3) by (simp add: power2_eq_square)\n  then show ?thesis using assms(1) assms(2) by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_preserves_equality": {"skill_name": "sqrt_preserves_equality", "marker": "lemma sqrt_preserves_equality:\n  fixes x y :: real\n  assumes \"x = y\" and \"x >= 0\" and \"y >= 0\"\n  shows \"sqrt x = sqrt y\"\n  using assms by simp", "description": "-", "full_code": "lemma sqrt_preserves_equality:\n  fixes x y :: real\n  assumes \"x = y\" and \"x >= 0\" and \"y >= 0\"\n  shows \"sqrt x = sqrt y\"\n  using assms by simp", "origin": "square_root_eq", "update_count": 0}, "sqrt_eq_9": {"skill_name": "sqrt_eq_9", "marker": "lemma sqrt_eq_9:\n  fixes u :: real\n  assumes \"sqrt u = 9\"\n  shows \"u = 81\"\nproof -\n  have \"u = 9^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "description": "", "full_code": "lemma sqrt_eq_9:\n  fixes u :: real\n  assumes \"sqrt u = 9\"\n  shows \"u = 81\"\nproof -\n  have \"u = 9^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_31.json_v25", "update_count": -1}, "square_root_mult": {"skill_name": "square_root_mult", "marker": "lemma square_root_mult:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt a * sqrt b\"\n    using assms by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_mult:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt a * sqrt b\"\n    using assms by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_sumV2": {"skill_name": "square_root_sumV2", "marker": "lemma square_root_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a + b) \\<le> sqrt a + sqrt b\"\n  using assms by (metis sqrt_add_le_add_sqrt)", "description": "-", "full_code": "lemma square_root_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a + b) \\<le> sqrt a + sqrt b\"\n  using assms by (metis sqrt_add_le_add_sqrt)", "origin": "square_root_eq", "update_count": 0}, "sqrt_square": {"skill_name": "sqrt_square", "marker": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a ^ 2 = a\"\nproof -\n  have \"sqrt a ^ 2 = (sqrt a) * (sqrt a)\" by (metis power2_eq_square)\n  also have \"... = a\" using assms by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a ^ 2 = a\"\nproof -\n  have \"sqrt a ^ 2 = (sqrt a) * (sqrt a)\" by (metis power2_eq_square)\n  also have \"... = a\" using assms by auto\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_squareV2": {"skill_name": "sqrt_squareV2", "marker": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a ^ 2 = a\"\nproof -\n  have \"sqrt a ^ 2 = a\" \n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"sqrt a > 0\" using assms by auto\n    then have \"sqrt a ^ 2 = a\" by auto\n    thus ?thesis .\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a ^ 2 = a\"\nproof -\n  have \"sqrt a ^ 2 = a\" \n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"sqrt a > 0\" using assms by auto\n    then have \"sqrt a ^ 2 = a\" by auto\n    thus ?thesis .\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_property": {"skill_name": "sqrt_property", "marker": "lemma sqrt_property:\n  fixes u v :: real\n  assumes \"u >= 0\" \"v >= 0\"\n  shows \"sqrt (u + v) <= sqrt u + sqrt v\"\nproof -\n  have \"sqrt (u + v) = sqrt (sqrt u^2 + sqrt v^2)\"\n    using assms by simp\n  also have \"... <= sqrt u + sqrt v\"\n    by (metis assms(1) assms(2) calculation sqrt_add_le_add_sqrt)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_property:\n  fixes u v :: real\n  assumes \"u >= 0\" \"v >= 0\"\n  shows \"sqrt (u + v) <= sqrt u + sqrt v\"\nproof -\n  have \"sqrt (u + v) = sqrt (sqrt u^2 + sqrt v^2)\"\n    using assms by simp\n  also have \"... <= sqrt u + sqrt v\"\n    by (metis assms(1) assms(2) calculation sqrt_add_le_add_sqrt)\n  finally show ?thesis by simp\nqed", "origin": "sqrt_eq_9", "update_count": 0}, "sqrt_eq_n": {"skill_name": "sqrt_eq_n", "marker": "lemma sqrt_eq_n:\n  fixes u :: real\n  assumes \"sqrt u = n\" \"n >= 0\"\n  shows \"u = n^2\"\nproof -\n  have \"u = n^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_eq_n:\n  fixes u :: real\n  assumes \"sqrt u = n\" \"n >= 0\"\n  shows \"u = n^2\"\nproof -\n  have \"u = n^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "origin": "sqrt_eq_9", "update_count": 0}, "squared_difference_nonneg": {"skill_name": "squared_difference_nonneg", "marker": "lemma squared_difference_nonneg:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"(sqrt a - sqrt b)^2 \\<ge> 0\"\nproof -\n  have \"sqrt a - sqrt b = (sqrt a - sqrt b) * (sqrt a + sqrt b) / (sqrt a + sqrt b)\" \n    by (metis Orderings.order_eq_iff add_cancel_left_right add_diff_cancel_left' add_le_same_cancel2 assms(1) assms(2) diff_eq_diff_eq diff_zero divide_eq_0_iff eq_iff_diff_eq_0 nonzero_mult_div_cancel_right real_sqrt_ge_zero real_sqrt_le_0_iff real_sqrt_zero)\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma squared_difference_nonneg:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"(sqrt a - sqrt b)^2 \\<ge> 0\"\nproof -\n  have \"sqrt a - sqrt b = (sqrt a - sqrt b) * (sqrt a + sqrt b) / (sqrt a + sqrt b)\" \n    by (metis Orderings.order_eq_iff add_cancel_left_right add_diff_cancel_left' add_le_same_cancel2 assms(1) assms(2) diff_eq_diff_eq diff_zero divide_eq_0_iff eq_iff_diff_eq_0 nonzero_mult_div_cancel_right real_sqrt_ge_zero real_sqrt_le_0_iff real_sqrt_zero)\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_transformation": {"skill_name": "square_root_eq_transformation", "marker": "lemma square_root_eq_transformation:\n  fixes a b c :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\" \"c \\<ge> 0\"\n  shows \"sqrt (a * c) = sqrt (b * c)\"\nproof -\n  have \"a * c = b * c\" using assms(1) by simp\n  then show ?thesis using assms(3) by auto\nqed", "description": "-", "full_code": "lemma square_root_eq_transformation:\n  fixes a b c :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\" \"c \\<ge> 0\"\n  shows \"sqrt (a * c) = sqrt (b * c)\"\nproof -\n  have \"a * c = b * c\" using assms(1) by simp\n  then show ?thesis using assms(3) by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_nonneg": {"skill_name": "square_root_eq_nonneg", "marker": "lemma square_root_eq_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" \n    using assms(1) by simp\n  thus ?thesis using assms(2) by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" \n    using assms(1) by simp\n  thus ?thesis using assms(2) by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_propertiesV4": {"skill_name": "square_root_propertiesV4", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\" \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms(1) by simp\n  thus ?thesis by (simp add: assms(2) assms(3))\nqed", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a = b\" \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms(1) by simp\n  thus ?thesis by (simp add: assms(2) assms(3))\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_nonnegV4": {"skill_name": "square_root_nonnegV4", "marker": "lemma square_root_nonneg:\n  fixes a :: real\n  assumes \"a \\<ge> 0\"\n  shows \"sqrt a \\<ge> 0\"\nproof -\n  from assms have \"sqrt a = sqrt (a)\" by simp\n  then show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "description": "-", "full_code": "lemma square_root_nonneg:\n  fixes a :: real\n  assumes \"a \\<ge> 0\"\n  shows \"sqrt a \\<ge> 0\"\nproof -\n  from assms have \"sqrt a = sqrt (a)\" by simp\n  then show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "origin": "square_root_eq", "update_count": 0}, "non_negativity_of_square_root": {"skill_name": "non_negativity_of_square_root", "marker": "lemma non_negativity_of_square_root:\n  fixes a :: real\n  assumes \"0 \\<le> a\"\n  shows \"sqrt a \\<ge> 0\"\nproof -\n  have \"sqrt a = sqrt (max a 0)\" using assms by simp\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma non_negativity_of_square_root:\n  fixes a :: real\n  assumes \"0 \\<le> a\"\n  shows \"sqrt a \\<ge> 0\"\nproof -\n  have \"sqrt a = sqrt (max a 0)\" using assms by simp\n  then show ?thesis by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_propertyV2": {"skill_name": "square_root_propertyV2", "marker": "lemma square_root_property:\n  fixes a b :: real\n  assumes \"0 \\<le> a\" \"0 \\<le> b\" \"a = b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_property:\n  fixes a b :: real\n  assumes \"0 \\<le> a\" \"0 \\<le> b\" \"a = b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" using assms by simp\n  then show ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_propertyV3": {"skill_name": "square_root_propertyV3", "marker": "lemma square_root_property:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x^2 = abs x\"\nproof -\n  have \"sqrt x^2 = sqrt (if x \\<ge> 0 then x^2 else x^2)\" \n    by (metis real_sqrt_power)\n  then show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma square_root_property:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x^2 = abs x\"\nproof -\n  have \"sqrt x^2 = sqrt (if x \\<ge> 0 then x^2 else x^2)\" \n    by (metis real_sqrt_power)\n  then show ?thesis \n    by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "unique_solution_sqrt": {"skill_name": "unique_solution_sqrt", "marker": "lemma unique_solution_sqrt:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" \n    by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" \n    by simp\n  then have \"x = 81 - 9\" \n    by (simp add: algebra_simps)\n  then show \"x = 72\" \n    by simp\nqed", "description": "-", "full_code": "lemma unique_solution_sqrt:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" \n    by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" \n    by simp\n  then have \"x = 81 - 9\" \n    by (simp add: algebra_simps)\n  then show \"x = 72\" \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "nested_sqrt_eq": {"skill_name": "nested_sqrt_eq", "marker": "lemma nested_sqrt_eq:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"x + 9 = 9^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nqed", "description": "", "full_code": "lemma nested_sqrt_eq:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"x + 9 = 9^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_31.json_v26", "update_count": -1}, "nested_sqrt_eq_multi": {"skill_name": "nested_sqrt_eq_multi", "marker": "lemma nested_sqrt_eq_multi:\n  fixes x :: real\n  assumes \"sqrt (x + a) = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"x = b^2 - a\"\nproof -\n  have \"x + a = b^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then show \"x = b^2 - a\" by simp\nqed", "description": "-", "full_code": "lemma nested_sqrt_eq_multi:\n  fixes x :: real\n  assumes \"sqrt (x + a) = b\" and \"a >= 0\" and \"b >= 0\"\n  shows \"x = b^2 - a\"\nproof -\n  have \"x + a = b^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then show \"x = b^2 - a\" by simp\nqed", "origin": "nested_sqrt_eq", "update_count": 0}, "nested_sqrt_eq_multi_dim": {"skill_name": "nested_sqrt_eq_multi_dim", "marker": "lemma nested_sqrt_eq_multi_dim:\n  fixes x :: \"real\" and n :: \"nat\"\n  assumes \"sqrt (x + real (n^2)) = real n\"\n  shows \"x = real (n^2) - real n^2\"\nproof -\n  have \"x + real (n^2) = (real n)^2\" using assms by (smt (verit) of_nat_0_le_iff real_sqrt_le_iff real_sqrt_pow2 real_sqrt_zero)\n  then have \"x + real (n^2) = real (n^2)\" by simp\n  then show \"x = real (n^2) - real n^2\" by simp\nqed", "description": "-", "full_code": "lemma nested_sqrt_eq_multi_dim:\n  fixes x :: \"real\" and n :: \"nat\"\n  assumes \"sqrt (x + real (n^2)) = real n\"\n  shows \"x = real (n^2) - real n^2\"\nproof -\n  have \"x + real (n^2) = (real n)^2\" using assms by (smt (verit) of_nat_0_le_iff real_sqrt_le_iff real_sqrt_pow2 real_sqrt_zero)\n  then have \"x + real (n^2) = real (n^2)\" by simp\n  then show \"x = real (n^2) - real n^2\" by simp\nqed", "origin": "nested_sqrt_eq", "update_count": 0}, "square_root_eq_higher_dimensions": {"skill_name": "square_root_eq_higher_dimensions", "marker": "lemma square_root_eq_higher_dimensions:\n  fixes a b :: \"real set\"\n  assumes \"a = b\"\n  shows \"(\\<forall>x. x \\<in> a \\<longrightarrow> x \\<ge> 0) \\<Longrightarrow> (\\<forall>x. x \\<in> b \\<longrightarrow> x \\<ge> 0) \\<Longrightarrow> \n         (\\<forall>x. x \\<in> a \\<longrightarrow> sqrt x = sqrt x)\"\nproof -\n  have \"(\\<forall>x. x \\<in> a \\<longrightarrow> sqrt x = sqrt x)\" by simp\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma square_root_eq_higher_dimensions:\n  fixes a b :: \"real set\"\n  assumes \"a = b\"\n  shows \"(\\<forall>x. x \\<in> a \\<longrightarrow> x \\<ge> 0) \\<Longrightarrow> (\\<forall>x. x \\<in> b \\<longrightarrow> x \\<ge> 0) \\<Longrightarrow> \n         (\\<forall>x. x \\<in> a \\<longrightarrow> sqrt x = sqrt x)\"\nproof -\n  have \"(\\<forall>x. x \\<in> a \\<longrightarrow> sqrt x = sqrt x)\" by simp\n  then show ?thesis by auto\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_pos": {"skill_name": "square_root_pos", "marker": "lemma square_root_pos:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<longleftrightarrow> a = b\" \n    using assms(1) assms(2) by auto \n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_pos:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt a = sqrt b \\<longleftrightarrow> a = b\" \n    using assms(1) assms(2) by auto \n  then show ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_equation": {"skill_name": "square_root_equation", "marker": "lemma square_root_equation:\n  fixes x :: real\n  shows \"sqrt (x + 9) = 9 \\<Longrightarrow> x = 72\"\nproof -\n  assume \"sqrt (x + 9) = 9\"\n  hence \"x + 9 = 9^2\" \n    by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  hence \"x + 9 = 81\" \n    by simp\n  hence \"x = 81 - 9\" \n    by (simp add: algebra_simps)\n  thus \"x = 72\" \n    by simp\nqed", "description": "-", "full_code": "lemma square_root_equation:\n  fixes x :: real\n  shows \"sqrt (x + 9) = 9 \\<Longrightarrow> x = 72\"\nproof -\n  assume \"sqrt (x + 9) = 9\"\n  hence \"x + 9 = 9^2\" \n    by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  hence \"x + 9 = 81\" \n    by simp\n  hence \"x = 81 - 9\" \n    by (simp add: algebra_simps)\n  thus \"x = 72\" \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "nested_sqrt_eq_multi_dimV2": {"skill_name": "nested_sqrt_eq_multi_dimV2", "marker": "lemma nested_sqrt_eq_multi_dim:\n  fixes x :: real and y :: real\n  assumes \"sqrt (x + 9) = 9\" and \"sqrt (y + 9) = 9\"\n  shows \"x = 72\" and \"y = 72\"\nproof -\n  have \"x + 9 = 9^2\" using assms(1) by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nnext\n  have \"y + 9 = 9^2\" using assms(2) by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"y + 9 = 81\" by simp\n  then show \"y = 72\" by simp\nqed", "description": "-", "full_code": "lemma nested_sqrt_eq_multi_dim:\n  fixes x :: real and y :: real\n  assumes \"sqrt (x + 9) = 9\" and \"sqrt (y + 9) = 9\"\n  shows \"x = 72\" and \"y = 72\"\nproof -\n  have \"x + 9 = 9^2\" using assms(1) by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by simp\nnext\n  have \"y + 9 = 9^2\" using assms(2) by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  then have \"y + 9 = 81\" by simp\n  then show \"y = 72\" by simp\nqed", "origin": "nested_sqrt_eq", "update_count": 0}, "square_nonnegV6": {"skill_name": "square_nonnegV6", "marker": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms(1) have \"b = a\" by simp\n  then have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  ultimately show \"a^2 = b^2\" by (simp add: assms(1))\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms(1) have \"b = a\" by simp\n  then have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  ultimately show \"a^2 = b^2\" by (simp add: assms(1))\nqed", "origin": "do_request", "update_count": 0}, "square_nonnegV7": {"skill_name": "square_nonnegV7", "marker": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  moreover have \"a * a = b * b\" using assms(1) by (metis)\n  ultimately show \"a^2 = b^2\" by simp\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"0 \\<le> a\" \"0 \\<le> b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  moreover have \"a * a = b * b\" using assms(1) by (metis)\n  ultimately show \"a^2 = b^2\" by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_inequalityV2": {"skill_name": "square_root_inequalityV2", "marker": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a < b \\<longrightarrow> sqrt a < sqrt b\"\nproof -\n  have \"sqrt a < sqrt b \\<longleftrightarrow> a < b\"\n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a < b \\<longrightarrow> sqrt a < sqrt b\"\nproof -\n  have \"sqrt a < sqrt b \\<longleftrightarrow> a < b\"\n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "isolate_variableV3": {"skill_name": "isolate_variableV3", "marker": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\"\n  proof -\n    from assms show ?thesis \n      by (simp add: add_diff_eq)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma isolate_variable:\n  fixes x :: real\n  assumes \"x + c = d\"\n  shows \"x = d - c\"\nproof -\n  have \"x = d - c\"\n  proof -\n    from assms show ?thesis \n      by (simp add: add_diff_eq)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_convergence": {"skill_name": "sqrt_convergence", "marker": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by simp\n  then show \"sqrt x >= 0\"\n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by simp\n  then show \"sqrt x >= 0\"\n    by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_convergenceV2": {"skill_name": "sqrt_convergenceV2", "marker": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  from assms have \"sqrt x = sqrt (max 0 x)\" by (simp add: max_def)\n  also have \"... >= 0\" by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  from assms have \"sqrt x = sqrt (max 0 x)\" by (simp add: max_def)\n  also have \"... >= 0\" by auto\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_convergenceV3": {"skill_name": "sqrt_convergenceV3", "marker": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  have \"sqrt x = sqrt (if x < 0 then 0 else x)\" \n    by (metis assms less_eq_real_def not_less)\n  then show \"sqrt x >= 0\" \n    using assms by auto\nqed", "description": "-", "full_code": "lemma sqrt_convergence:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt x >= 0\"\nproof -\n  have \"sqrt x = sqrt (if x < 0 then 0 else x)\" \n    by (metis assms less_eq_real_def not_less)\n  then show \"sqrt x >= 0\" \n    using assms by auto\nqed", "origin": "do_request", "update_count": 0}, "square_root_propertyV4": {"skill_name": "square_root_propertyV4", "marker": "lemma square_root_property:\n  fixes a b :: real\n  assumes \"a = sqrt b\" and \"b >= 0\"\n  shows \"a^2 = b\"\nproof -\n  have \"a^2 = (sqrt b)^2\" using assms(1) by simp\n  also have \"... = b\" using assms(2) by auto\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_root_property:\n  fixes a b :: real\n  assumes \"a = sqrt b\" and \"b >= 0\"\n  shows \"a^2 = b\"\nproof -\n  have \"a^2 = (sqrt b)^2\" using assms(1) by simp\n  also have \"... = b\" using assms(2) by auto\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "square_root_additionV2": {"skill_name": "square_root_additionV2", "marker": "lemma square_root_addition:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt (x + y) \\<ge> sqrt x\"\nproof -\n  have \"sqrt (x + y) = sqrt (x + 0 + y)\" by simp\n  also have \"... \\<ge> sqrt x\" using assms by auto\n  finally show ?thesis.\nqed", "description": "-", "full_code": "lemma square_root_addition:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt (x + y) \\<ge> sqrt x\"\nproof -\n  have \"sqrt (x + y) = sqrt (x + 0 + y)\" by simp\n  also have \"... \\<ge> sqrt x\" using assms by auto\n  finally show ?thesis.\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_productV3": {"skill_name": "square_root_productV3", "marker": "lemma square_root_product:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt (x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt (x * y) = sqrt (x * y * 1)\" by simp\n  also have \"... = sqrt x * sqrt y\" using assms by (metis calculation real_sqrt_mult)\n  finally show ?thesis.\nqed", "description": "-", "full_code": "lemma square_root_product:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt (x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt (x * y) = sqrt (x * y * 1)\" by simp\n  also have \"... = sqrt x * sqrt y\" using assms by (metis calculation real_sqrt_mult)\n  finally show ?thesis.\nqed", "origin": "square_root_eq", "update_count": 0}, "absolute_value_inequality": {"skill_name": "absolute_value_inequality", "marker": "theorem absolute_value_inequality:\n      fixes a b :: real\n      assumes h0: \"abs(a - b) < c\"\n      shows \"b - c < a \\<and> a < b + c\"\n    proof -\n      have \"a - b < c\" and \"-(a - b) < c\" using assms by auto\n      then have \"b - c < a\" and \"a < b + c\" by auto\n      then show ?thesis by auto\n    qed", "description": "-", "full_code": "theorem absolute_value_inequality:\n      fixes a b :: real\n      assumes h0: \"abs(a - b) < c\"\n      shows \"b - c < a \\<and> a < b + c\"\n    proof -\n      have \"a - b < c\" and \"-(a - b) < c\" using assms by auto\n      then have \"b - c < a\" and \"a < b + c\" by auto\n      then show ?thesis by auto\n    qed", "origin": "nested_sqrt_eq", "update_count": 0}, "sqrt_eq_square_general": {"skill_name": "sqrt_eq_square_general", "marker": "lemma sqrt_eq_square_general:\n  fixes a :: real\n  assumes \"b >= 0\" \"sqrt a = b\"\n  shows \"a = b^2\"\nproof -\n  have \"a = b^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_eq_square_general:\n  fixes a :: real\n  assumes \"b >= 0\" \"sqrt a = b\"\n  shows \"a = b^2\"\nproof -\n  have \"a = b^2\" using assms by (metis real_sqrt_eq_iff real_sqrt_unique zero_le_numeral)\n  thus ?thesis by simp\nqed", "origin": "sqrt_eq_9", "update_count": 0}, "sqrt_squareV3": {"skill_name": "sqrt_squareV3", "marker": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt(a^2) = a\"\nproof -\n  have \"a^2 >= 0\" using assms by simp\n  then show ?thesis by (metis assms real_sqrt_unique)\nqed", "description": "-", "full_code": "lemma sqrt_square:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt(a^2) = a\"\nproof -\n  have \"a^2 >= 0\" using assms by simp\n  then show ?thesis by (metis assms real_sqrt_unique)\nqed", "origin": "sqrt_eq_9", "update_count": 0}, "sqrt_squared": {"skill_name": "sqrt_squared", "marker": "lemma sqrt_squared:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt(x^2) = x\"\nproof -\n  have \"sqrt(x^2) = x\" using assms by auto\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_squared:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"sqrt(x^2) = x\"\nproof -\n  have \"sqrt(x^2) = x\" using assms by auto\n  then show ?thesis by simp\nqed", "origin": "nested_sqrt_eq", "update_count": 0}, "sqrt_equation": {"skill_name": "sqrt_equation", "marker": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" using real_sqrt_eq_iff real_sqrt_unique by fastforce\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"sqrt (x + 9) = 9\"\n  shows \"x = 72\"\nproof -\n  have \"sqrt (x + 9) = 9\" using assms by simp\n  then have \"x + 9 = 9^2\" using real_sqrt_eq_iff real_sqrt_unique by fastforce\n  then have \"x + 9 = 81\" by simp\n  then show \"x = 72\" by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "rearrangement_of_real_numbers": {"skill_name": "rearrangement_of_real_numbers", "marker": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume \"a = b + c\"\n  hence \"a - c = b + c - c\" by (simp add: algebra_simps)\n  thus \"a - c = b\" by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume \"a = b + c\"\n  hence \"a - c = b + c - c\" by (simp add: algebra_simps)\n  thus \"a - c = b\" by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "rearrangement_of_real_numbersV2": {"skill_name": "rearrangement_of_real_numbersV2", "marker": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume \"a = b + c\"\n  hence \"a - c = b + c - c\" by simp\n  thus \"a - c = b\" by simp\nqed", "description": "-", "full_code": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume \"a = b + c\"\n  hence \"a - c = b + c - c\" by simp\n  thus \"a - c = b\" by simp\nqed", "origin": "do_request", "update_count": 0}, "rearrangement_of_real_numbersV3": {"skill_name": "rearrangement_of_real_numbersV3", "marker": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume h: \"a = b + c\"  \n  have \"a - c = (b + c) - c\" using h by simp  \n  thus \"a - c = b\" by simp  \nqed", "description": "-", "full_code": "lemma rearrangement_of_real_numbers:\n  fixes a b c :: real\n  shows \"a = b + c \\<Longrightarrow> a - c = b\"\nproof -\n  assume h: \"a = b + c\"  \n  have \"a - c = (b + c) - c\" using h by simp  \n  thus \"a - c = b\" by simp  \nqed", "origin": "do_request", "update_count": 0}, "nested_sqrt_eq_generalized": {"skill_name": "nested_sqrt_eq_generalized", "marker": "lemma nested_sqrt_eq_generalized:\n  fixes x :: real and k :: real\n  assumes \"k > 0\" \"sqrt (x + k) = k\"\n  shows \"x = k^2 - k\"\nproof -\n  have \"x + k = k^2\" using assms by (metis add.commute real_sqrt_ge_0_iff real_sqrt_ge_zero real_sqrt_gt_0_iff real_sqrt_pow2 verit_comp_simplify1(3) zero_le_mult_iff zero_le_square)\n  then show \"x = k^2 - k\" by simp\nqed", "description": "-", "full_code": "lemma nested_sqrt_eq_generalized:\n  fixes x :: real and k :: real\n  assumes \"k > 0\" \"sqrt (x + k) = k\"\n  shows \"x = k^2 - k\"\nproof -\n  have \"x + k = k^2\" using assms by (metis add.commute real_sqrt_ge_0_iff real_sqrt_ge_zero real_sqrt_gt_0_iff real_sqrt_pow2 verit_comp_simplify1(3) zero_le_mult_iff zero_le_square)\n  then show \"x = k^2 - k\" by simp\nqed", "origin": "nested_sqrt_eq", "update_count": 0}, "square_root_eq_n_dimensionsV2": {"skill_name": "square_root_eq_n_dimensionsV2", "marker": "lemma square_root_eq_n_dimensions:\n  fixes a b :: \"real list\"\n  assumes \"a = b\"\n  shows \"sqrt (sum_list a) = sqrt (sum_list b)\"\n  using assms\nproof -\n  have \"sum_list a = sum_list b\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_n_dimensions:\n  fixes a b :: \"real list\"\n  assumes \"a = b\"\n  shows \"sqrt (sum_list a) = sqrt (sum_list b)\"\n  using assms\nproof -\n  have \"sum_list a = sum_list b\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_generalization": {"skill_name": "square_root_generalization", "marker": "lemma square_root_generalization:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\" and \"sqrt (a + 1) = sqrt (b + 1)\"\nproof -\n  show \"sqrt a = sqrt b\" using square_root_nonneg assms by simp\n  show \"sqrt (a + 1) = sqrt (b + 1)\" using assms by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_general:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\n  using assms by simp\n\nlemma square_root_nonneg:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\"\n  using square_root_eq_general assms by simp\n\nlemma square_root_generalization:\n  fixes a b :: real\n  assumes \"a = b\" \"a >= 0\" \"b >= 0\"\n  shows \"sqrt a = sqrt b\" and \"sqrt (a + 1) = sqrt (b + 1)\"\nproof -\n  show \"sqrt a = sqrt b\" using square_root_nonneg assms by simp\n  show \"sqrt (a + 1) = sqrt (b + 1)\" using assms by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_equationV2": {"skill_name": "sqrt_equationV2", "marker": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"sqrt (x + 9) = sqrt 81\" using assms by simp\n  then show \"sqrt (x + 9) = 9\" by auto\nqed", "description": "-", "full_code": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"sqrt (x + 9) = sqrt 81\" using assms by simp\n  then show \"sqrt (x + 9) = 9\" by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_equationV3": {"skill_name": "sqrt_equationV3", "marker": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"sqrt (x + 9) = sqrt 81\" using assms by simp\n  also have \"... = 9\" by simp\n  finally show \"sqrt (x + 9) = 9\" .\nqed", "description": "-", "full_code": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"sqrt (x + 9) = sqrt 81\" using assms by simp\n  also have \"... = 9\" by simp\n  finally show \"sqrt (x + 9) = 9\" .\nqed", "origin": "do_request", "update_count": 0}, "square_root_eq_addition": {"skill_name": "square_root_eq_addition", "marker": "lemma square_root_eq_addition:\n  fixes a b c d :: real\n  assumes \"a = b\" and \"c = d\" and \"a >= 0\" and \"c >= 0\"\n  shows \"sqrt (a + c) = sqrt (b + d)\"\nproof -\n  have \"sqrt (a + c) = sqrt (b + d)\" using assms by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_addition:\n  fixes a b c d :: real\n  assumes \"a = b\" and \"c = d\" and \"a >= 0\" and \"c >= 0\"\n  shows \"sqrt (a + c) = sqrt (b + d)\"\nproof -\n  have \"sqrt (a + c) = sqrt (b + d)\" using assms by simp\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "square_root_eq_product": {"skill_name": "square_root_eq_product", "marker": "lemma square_root_eq_product:\n  fixes a b c d :: real\n  assumes \"a = b\" and \"c = d\" and \"a >= 0\" and \"c >= 0\"\n  shows \"sqrt (a * c) = sqrt (b * d)\"\nproof -\n  have \"sqrt (a * c) = sqrt (b * d)\" using assms by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_eq_product:\n  fixes a b c d :: real\n  assumes \"a = b\" and \"c = d\" and \"a >= 0\" and \"c >= 0\"\n  shows \"sqrt (a * c) = sqrt (b * d)\"\nproof -\n  have \"sqrt (a * c) = sqrt (b * d)\" using assms by simp\n  thus ?thesis by simp\nqed", "origin": "square_root_eq", "update_count": 0}, "sqrt_equationV4": {"skill_name": "sqrt_equationV4", "marker": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"x + 9 = 81\" using assms by simp\n  then have \"sqrt (x + 9) = sqrt 81\" by simp\n  also have \"... = 9\" by simp\n  finally show \"sqrt (x + 9) = 9\" .\nqed", "description": "-", "full_code": "lemma sqrt_equation:\n  fixes x :: real\n  assumes \"x + 9 = 81\"\n  shows \"sqrt (x + 9) = 9\"\nproof -\n  have \"x + 9 = 81\" using assms by simp\n  then have \"sqrt (x + 9) = sqrt 81\" by simp\n  also have \"... = 9\" by simp\n  finally show \"sqrt (x + 9) = 9\" .\nqed", "origin": "do_request", "update_count": 0}, "algebraic_manipulationV3": {"skill_name": "algebraic_manipulationV3", "marker": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"c - a = (a + b) - a\" using assms by simp\n  have \"c - a = b\" by (metis add.commute assms diff_add_eq_diff_diff_swap diff_eq_diff_eq eq_iff_diff_eq_0 neg_equal_iff_equal)\n  thus \"b = c - a\" by simp\nqed", "description": "-", "full_code": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"c - a = (a + b) - a\" using assms by simp\n  have \"c - a = b\" by (metis add.commute assms diff_add_eq_diff_diff_swap diff_eq_diff_eq eq_iff_diff_eq_0 neg_equal_iff_equal)\n  thus \"b = c - a\" by simp\nqed", "origin": "do_request", "update_count": 0}, "algebraic_manipulationV4": {"skill_name": "algebraic_manipulationV4", "marker": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"c - a = (a + b) - a\" using assms by simp\n  also have \"... = b\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_manipulation:\n  fixes a b c :: real\n  assumes \"a + b = c\"\n  shows \"b = c - a\"\nproof -\n  have \"c - a = (a + b) - a\" using assms by simp\n  also have \"... = b\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_eqV2": {"skill_name": "sqrt_eqV2", "marker": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof (cases \"a >= 0\")\n  case True\n  then have \"sqrt a = sqrt b\" using assms by auto\n  then have \"a = b\" using True by (metis real_sqrt_eq_iff)\n  thus ?thesis by simp\nnext\n  case False\n  then have \"a < 0\" by simp\n  then have \"sqrt a = sqrt b\" using assms by simp\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof (cases \"a >= 0\")\n  case True\n  then have \"sqrt a = sqrt b\" using assms by auto\n  then have \"a = b\" using True by (metis real_sqrt_eq_iff)\n  thus ?thesis by simp\nnext\n  case False\n  then have \"a < 0\" by simp\n  then have \"sqrt a = sqrt b\" using assms by simp\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "square_root_positiveV2": {"skill_name": "square_root_positiveV2", "marker": "lemma square_root_positive:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = (if a = 0 then 0 else sqrt a)\" by auto\n  moreover {\n    assume \"a = 0\"\n    hence \"sqrt a = 0\" by simp\n  }\n  ultimately show ?thesis using assms by auto\nqed", "description": "-", "full_code": "lemma square_root_positive:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a >= 0\"\nproof -\n  have \"sqrt a = (if a = 0 then 0 else sqrt a)\" by auto\n  moreover {\n    assume \"a = 0\"\n    hence \"sqrt a = 0\" by simp\n  }\n  ultimately show ?thesis using assms by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_eqV3": {"skill_name": "sqrt_eqV3", "marker": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a * sqrt a = sqrt b * sqrt b\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by (metis assms real_sqrt_eq_iff)\nqed", "description": "-", "full_code": "lemma sqrt_eq:\n  fixes a b :: real\n  assumes \"sqrt a = sqrt b\"\n  shows \"a = b\"\nproof -\n  have \"sqrt a * sqrt a = sqrt b * sqrt b\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by (metis assms real_sqrt_eq_iff)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_multiply": {"skill_name": "sqrt_multiply", "marker": "lemma sqrt_multiply:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b)^2 = a * b\" by (smt (verit) assms(1) assms(2) real_sqrt_pow2_iff split_mult_pos_le) \n  also have \"... = (sqrt a)^2 * (sqrt b)^2\" by (metis abs_if_raw assms(1) assms(2) real_sqrt_abs real_sqrt_abs2 real_sqrt_power verit_comp_simplify1(3))\n  finally show ?thesis by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma sqrt_multiply:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b)^2 = a * b\" by (smt (verit) assms(1) assms(2) real_sqrt_pow2_iff split_mult_pos_le) \n  also have \"... = (sqrt a)^2 * (sqrt b)^2\" by (metis abs_if_raw assms(1) assms(2) real_sqrt_abs real_sqrt_abs2 real_sqrt_power verit_comp_simplify1(3))\n  finally show ?thesis by (metis real_sqrt_mult)\nqed", "origin": "square_root_eq", "update_count": 0}, "square_of_sqrt": {"skill_name": "square_of_sqrt", "marker": "lemma square_of_sqrt:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a = b \\<Longrightarrow> a = b^2\"\nproof -\n  assume \"sqrt a = b\"\n  then have \"a = b^2\" using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_sqrt:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt a = b \\<Longrightarrow> a = b^2\"\nproof -\n  assume \"sqrt a = b\"\n  then have \"a = b^2\" using assms by auto\n  thus ?thesis by simp\nqed", "origin": "sqrt_eq_9", "update_count": 0}, "square_root_squared": {"skill_name": "square_root_squared", "marker": "lemma square_root_squared:\n  fixes u :: real\n  assumes \"u >= 0\"\n  shows \"sqrt (u^2) = u\"\nproof -\n  have \"sqrt (u^2) = u\" using assms by (simp add: real_sqrt_eq_iff real_sqrt_unique)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_squared:\n  fixes u :: real\n  assumes \"u >= 0\"\n  shows \"sqrt (u^2) = u\"\nproof -\n  have \"sqrt (u^2) = u\" using assms by (simp add: real_sqrt_eq_iff real_sqrt_unique)\n  thus ?thesis by simp\nqed", "origin": "sqrt_eq_9", "update_count": 0}}