{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "mod_mul_power": {"skill_name": "mod_mul_power", "marker": "lemma mod_mul_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"x mod n = a\"\n  shows \"((b * x)^c) mod n = (b * a)^c mod n\"\nproof -\n  have \"(b * x)^c mod n = (b * (x mod n))^c mod n\"\n    by (smt (verit) mod_mult_right_eq power_mod)\n  also have \"... = (b * a)^c mod n\"\n    using assms(3) by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_mul_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"x mod n = a\"\n  shows \"((b * x)^c) mod n = (b * a)^c mod n\"\nproof -\n  have \"(b * x)^c mod n = (b * (x mod n))^c mod n\"\n    by (smt (verit) mod_mult_right_eq power_mod)\n  also have \"... = (b * a)^c mod n\"\n    using assms(3) by auto\n  finally show ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add": {"skill_name": "mod_add", "marker": "lemma mod_add:\n  fixes x y n :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"(x + y) mod n = (a + b) mod n\"\nproof -\n  have \"(x + y) mod n = ((x mod n) + (y mod n)) mod n\"\n    by presburger\n  also have \"... = (a + b) mod n\"\n    using assms(2-3) by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add:\n  fixes x y n :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"(x + y) mod n = (a + b) mod n\"\nproof -\n  have \"(x + y) mod n = ((x mod n) + (y mod n)) mod n\"\n    by presburger\n  also have \"... = (a + b) mod n\"\n    using assms(2-3) by auto\n  finally show ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "log_exp_general": {"skill_name": "log_exp_general", "marker": "lemma log_exp_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"a \\<noteq> 1\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\"\n    using log_nat_power[of b a n] assms(1) assms(2) by auto\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma log_exp_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"a \\<noteq> 1\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\"\n    using log_nat_power[of b a n] assms(1) assms(2) by auto\n  then show ?thesis by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "log_power_property": {"skill_name": "log_power_property", "marker": "lemma log_power_property:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\" using log_nat_power[of a a n] by (simp add: assms)\n  then show ?thesis using assms by auto\nqed", "description": "-", "full_code": "lemma log_power_property:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\" using log_nat_power[of a a n] by (simp add: assms)\n  then show ?thesis using assms by auto\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "log_power_identity": {"skill_name": "log_power_identity", "marker": "lemma log_power_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a a = 1\" using assms by simp\n  then have \"log a (a^n) = n * log a a\" using log_nat_power[of a a n] by (simp add: assms)\n  then show ?thesis using `log a a = 1` by simp\nqed", "description": "-", "full_code": "lemma log_power_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a a = 1\" using assms by simp\n  then have \"log a (a^n) = n * log a a\" using log_nat_power[of a a n] by (simp add: assms)\n  then show ?thesis using `log a a = 1` by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "binomial_expansion": {"skill_name": "binomial_expansion", "marker": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\"\n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\"\n    by sos\n  also have \"... = a^2 + a*b + b*a + b^2\"\n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\"\n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\"\n    by sos\n  also have \"... = a^2 + a*b + b*a + b^2\"\n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "binomial_expansionV2": {"skill_name": "binomial_expansionV2", "marker": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_zero_multiplicative_inverse": {"skill_name": "non_zero_multiplicative_inverse", "marker": "lemma non_zero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "-", "full_code": "lemma non_zero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "a_times_vera", "update_count": 0}, "general_multiplicative_inverse": {"skill_name": "general_multiplicative_inverse", "marker": "lemma general_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = (1::real)\"\n  using non_zero_multiplicative_inverse[of a] assms by simp", "description": "-", "full_code": "lemma non_zero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma general_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = (1::real)\"\n  using non_zero_multiplicative_inverse[of a] assms by simp", "origin": "a_times_vera", "update_count": 0}, "general_times_inverse": {"skill_name": "general_times_inverse", "marker": "lemma general_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * b * (1 / a) = b\"\n  using assms by (simp add: field_simps)", "description": "-", "full_code": "lemma general_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * b * (1 / a) = b\"\n  using assms by (simp add: field_simps)", "origin": "a_times_vera", "update_count": 0}, "find_a_b_value": {"skill_name": "find_a_b_value", "marker": "lemma find_a_b_value:\n  fixes c d :: real\n  assumes \n    \"c / 3 + d = 5\"\n    \"d / 3 + c = 7\"\n  shows \"c = 6 \\<and> d = 3\"\nproof -\n  have \"d = 5 - c / 3\" \n    using assms(1) by auto\n  then have \"c + (5 - c / 3) / 3 = 7\" \n    using assms(2) by auto\n  then have \"c + (5 / 3 - c / 9) = 7\" \n    by (simp add: field_simps)\n  then have \"c - c / 9 = 7 - 5 / 3\" \n    by (simp add: algebra_simps)\n  then have \"c * (1 - 1 / 9) = 7 - 5 / 3\" \n    by (simp add: algebra_simps)\n  then have \"c * (8 / 9) = 7 - 5 / 3\" \n    by (simp add: field_simps)\n  then have \"c * (8 / 9) = (21 - 5) / 3\" \n    by (simp add: field_simps)\n  then have \"c * (8 / 9) = 16 / 3\" \n    by (simp add: field_simps)\n  then have \"c = (16 / 3) * (9 / 8)\" \n    by (simp add: field_simps)\n  then have \"c = 6\" \n    by (simp add: field_simps)\n  then have \"d = 5 - c / 3\" \n    using `c = 6` by (metis \\<open>d = 5 - c / 3\\<close> semiring_norm(5))\n  then show \"c = 6 \\<and> d = 3\" \n    using `c = 6` by auto\nqed", "description": "-", "full_code": "lemma find_a_b_value:\n  fixes c d :: real\n  assumes \n    \"c / 3 + d = 5\"\n    \"d / 3 + c = 7\"\n  shows \"c = 6 \\<and> d = 3\"\nproof -\n  have \"d = 5 - c / 3\" \n    using assms(1) by auto\n  then have \"c + (5 - c / 3) / 3 = 7\" \n    using assms(2) by auto\n  then have \"c + (5 / 3 - c / 9) = 7\" \n    by (simp add: field_simps)\n  then have \"c - c / 9 = 7 - 5 / 3\" \n    by (simp add: algebra_simps)\n  then have \"c * (1 - 1 / 9) = 7 - 5 / 3\" \n    by (simp add: algebra_simps)\n  then have \"c * (8 / 9) = 7 - 5 / 3\" \n    by (simp add: field_simps)\n  then have \"c * (8 / 9) = (21 - 5) / 3\" \n    by (simp add: field_simps)\n  then have \"c * (8 / 9) = 16 / 3\" \n    by (simp add: field_simps)\n  then have \"c = (16 / 3) * (9 / 8)\" \n    by (simp add: field_simps)\n  then have \"c = 6\" \n    by (simp add: field_simps)\n  then have \"d = 5 - c / 3\" \n    using `c = 6` by (metis \\<open>d = 5 - c / 3\\<close> semiring_norm(5))\n  then show \"c = 6 \\<and> d = 3\" \n    using `c = 6` by auto\nqed", "origin": "do_request", "update_count": 0}, "division_rule": {"skill_name": "division_rule", "marker": "lemma division_rule:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a * x = b\"\n  shows \"a = b / x\"\nproof -\n  have \"a * x = b\" by (simp add: assms(2))\n  then show ?thesis \n    using assms(1) by (simp add: divide_simps)\nqed", "description": "-", "full_code": "lemma division_rule:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a * x = b\"\n  shows \"a = b / x\"\nproof -\n  have \"a * x = b\" by (simp add: assms(2))\n  then show ?thesis \n    using assms(1) by (simp add: divide_simps)\nqed", "origin": "cancle_div", "update_count": 0}, "add_and_multiply": {"skill_name": "add_and_multiply", "marker": "lemma add_and_multiply:\n  fixes x y z :: real\n  assumes \"x > 0\" \"y > 0\" \"z > 0\"\n  shows \"x * (y + z) = x * y + x * z\"\nproof -\n  have \"x * (y + z) = x * y + x * z\" by (simp add: distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma add_and_multiply:\n  fixes x y z :: real\n  assumes \"x > 0\" \"y > 0\" \"z > 0\"\n  shows \"x * (y + z) = x * y + x * z\"\nproof -\n  have \"x * (y + z) = x * y + x * z\" by (simp add: distrib_left)\n  thus ?thesis by simp\nqed", "origin": "cancle_div", "update_count": 0}, "trivial_inequality": {"skill_name": "trivial_inequality", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV2": {"skill_name": "trivial_inequalityV2", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\"\n    by simp\n  also have \"... >= 0 + 0\"\n    using assms by auto\n  finally show ?thesis \n    by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\"\n    by simp\n  also have \"... >= 0 + 0\"\n    using assms by auto\n  finally show ?thesis \n    by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV3": {"skill_name": "trivial_inequalityV3", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = 0 + a + b\" by auto\n  also have \"... = (0 + a) + b\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = 0 + a + b\" by auto\n  also have \"... = (0 + a) + b\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_squares": {"skill_name": "non_negativity_of_squares", "marker": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" \n    by sos\n  also have \"... >= 0\"\n    using mult_nonneg_nonneg by auto\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" \n    by sos\n  also have \"... >= 0\"\n    using mult_nonneg_nonneg by auto\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negative": {"skill_name": "sum_of_squares_non_negative", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] by auto\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] by auto\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV2": {"skill_name": "sum_of_squares_non_negativeV2", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV3": {"skill_name": "sum_of_squares_non_negativeV3", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "log_identity": {"skill_name": "log_identity", "marker": "lemma log_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\"\n  shows \"log a a = 1\"\nproof -\n  show ?thesis by (simp add: assms)\nqed", "description": "-", "full_code": "lemma log_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\"\n  shows \"log a a = 1\"\nproof -\n  show ?thesis by (simp add: assms)\nqed", "origin": "log_power_identity", "update_count": 0}, "trivial_inequalityV4": {"skill_name": "trivial_inequalityV4", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"a^2\" \"b^2\"] by auto\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"a^2\" \"b^2\"] by auto\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimum": {"skill_name": "non_negative_minimum", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c >= 0\"\nproof -\n  have \"a + b + c = (a + b) + c\" by auto\n  also have \"(a + b) >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  then have \"(a + b) + c >= 0 + c\" by auto\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c >= 0\"\nproof -\n  have \"a + b + c = (a + b) + c\" by auto\n  also have \"(a + b) >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  then have \"(a + b) + c >= 0 + c\" by auto\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV5": {"skill_name": "trivial_inequalityV5", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV4": {"skill_name": "sum_of_squares_non_negativeV4", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negative_multi": {"skill_name": "sum_of_squares_non_negative_multi", "marker": "lemma sum_of_squares_non_negative_multi:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"\\<forall>x\\<in>set xs. x^2 >= 0\" \n    by auto\n  then show ?thesis \n    by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_multi:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"\\<forall>x\\<in>set xs. x^2 >= 0\" \n    by auto\n  then show ?thesis \n    by (simp add: sum_nonneg)\nqed", "origin": "sum_of_squares_non_negative", "update_count": 0}, "binomial_expansionV3": {"skill_name": "binomial_expansionV3", "marker": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by sos\n  also have \"... = a^2 + b^2 + a*b + b*a\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by (simp add: ac_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by sos\n  also have \"... = a^2 + b^2 + a*b + b*a\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by (simp add: ac_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "binomial_expansionV4": {"skill_name": "binomial_expansionV4", "marker": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by sos\n  finally show ?thesis by (simp)\nqed", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a * a + a * b + b * a + b * b\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by sos\n  finally show ?thesis by (simp)\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_squares_extended": {"skill_name": "non_negativity_of_squares_extended", "marker": "lemma non_negativity_of_squares_extended:\n  fixes a b :: real\n  shows \"a^2 >= 0 \\<and> b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  ultimately have \"a^2 >= 0\" using mult_nonneg_nonneg by auto\n  moreover have \"b^2 >= 0\" using mult_nonneg_nonneg by auto\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares_extended:\n  fixes a b :: real\n  shows \"a^2 >= 0 \\<and> b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"b^2 = b * b\" by sos\n  ultimately have \"a^2 >= 0\" using mult_nonneg_nonneg by auto\n  moreover have \"b^2 >= 0\" using mult_nonneg_nonneg by auto\n  ultimately show ?thesis by simp\nqed", "origin": "non_negativity_of_squares", "update_count": 0}, "non_negativity_of_squares_extendedV2": {"skill_name": "non_negativity_of_squares_extendedV2", "marker": "lemma non_negativity_of_squares_extended:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  moreover have \"b^2 >= 0\" by auto\n  ultimately show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares_extended:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  moreover have \"b^2 >= 0\" by auto\n  ultimately show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negativity_of_squares", "update_count": 0}, "binomial_expansionV5": {"skill_name": "binomial_expansionV5", "marker": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"((a + b) * (a + b)) = (a + b)^2\" \n    by (simp add: power2_eq_square)\n  also have \"... = a*(a + b) + b*(a + b)\" \n    by sos\n  also have \"... = a^2 + a*b + b*a + b^2\" \n    by sos\n  also have \"... = a^2 + 2*a*b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"((a + b) * (a + b)) = (a + b)^2\" \n    by (simp add: power2_eq_square)\n  also have \"... = a*(a + b) + b*(a + b)\" \n    by sos\n  also have \"... = a^2 + a*b + b*a + b^2\" \n    by sos\n  also have \"... = a^2 + 2*a*b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_square": {"skill_name": "expand_square", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" \n    by sos\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have lhs: \"(a + b)^2 = (a + b) * (a + b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" \n    by sos\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_squaresV2": {"skill_name": "non_negativity_of_squaresV2", "marker": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"a * a >= 0\" using mult_nonneg_nonneg \n    by auto\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  moreover have \"a * a >= 0\" using mult_nonneg_nonneg \n    by auto\n  ultimately show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "logarithm_base_identity": {"skill_name": "logarithm_base_identity", "marker": "lemma logarithm_base_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\"\n  shows \"log a a = 1\"\nproof -\n  have \"log a a = log a (a^1)\" by auto\n  also have \"... = 1\" using assms by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma logarithm_base_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\"\n  shows \"log a a = 1\"\nproof -\n  have \"log a a = log a (a^1)\" by auto\n  also have \"... = 1\" using assms by auto\n  finally show ?thesis by simp\nqed", "origin": "log_identity", "update_count": 0}, "logarithm_base_change": {"skill_name": "logarithm_base_change", "marker": "lemma logarithm_base_change:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log b a = log a a / log a b\"\nproof -\n  have \"log b a = log a a / log a b\" using assms by (metis log_base_change)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma logarithm_base_change:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log b a = log a a / log a b\"\nproof -\n  have \"log b a = log a a / log a b\" using assms by (metis log_base_change)\n  then show ?thesis by simp\nqed", "origin": "log_identity", "update_count": 0}, "non_negative_squares": {"skill_name": "non_negative_squares", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (auto simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (auto simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "logarithm_base_identity_general": {"skill_name": "logarithm_base_identity_general", "marker": "lemma logarithm_base_identity_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log a b = log b b / log b a\"\nproof -\n  have \"log a b = log a (b^1)\" by auto\n  also have \"... = 1 / log b a\" using assms(2) by (smt (verit) assms(3) assms(4) log_base_change log_pow_cancel of_nat_1)\n  finally show ?thesis using assms(4) by (metis assms(3) log_base_change)\nqed", "description": "-", "full_code": "lemma logarithm_base_identity_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log a b = log b b / log b a\"\nproof -\n  have \"log a b = log a (b^1)\" by auto\n  also have \"... = 1 / log b a\" using assms(2) by (smt (verit) assms(3) assms(4) log_base_change log_pow_cancel of_nat_1)\n  finally show ?thesis using assms(4) by (metis assms(3) log_base_change)\nqed", "origin": "logarithm_base_identity", "update_count": 0}, "mod_add_property": {"skill_name": "mod_add_property", "marker": "lemma mod_add_property:\n  fixes a b c d :: nat\n  assumes \"a mod d = b mod d\"\n  shows \"(a + c) mod d = (b + c) mod d\"\nproof -\n  have \"(a + c) mod d = (b + c) mod d\"\n    using assms by (metis mod_add_cong)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma mod_add_property:\n  fixes a b c d :: nat\n  assumes \"a mod d = b mod d\"\n  shows \"(a + c) mod d = (b + c) mod d\"\nproof -\n  have \"(a + c) mod d = (b + c) mod d\"\n    using assms by (metis mod_add_cong)\n  then show ?thesis by simp\nqed", "origin": "mod_mul_power", "update_count": 0}, "mod_add_powerV2": {"skill_name": "mod_add_powerV2", "marker": "lemma mod_add_power:\n  fixes x y n a b c :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"((x + y)^c) mod n = (a + b)^c mod n\"\nproof -\n  have \"(x + y)^c mod n = ((x mod n) + (y mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2,3) by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power:\n  fixes x y n a b c :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"((x + y)^c) mod n = (a + b)^c mod n\"\nproof -\n  have \"(x + y)^c mod n = ((x mod n) + (y mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2,3) by auto\n  finally show ?thesis by auto\nqed", "origin": "mod_mul_power", "update_count": 0}, "trivial_inequalityV6": {"skill_name": "trivial_inequalityV6", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then have \"a^2 + b^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then have \"a^2 + b^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "mod_mult": {"skill_name": "mod_mult", "marker": "lemma mod_mult:\n  fixes x y n :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"(x * y) mod n = (a * b) mod n\"\nproof -\n  have \"(x * y) mod n = ((x mod n) * (y mod n)) mod n\"\n    by (metis mod_mult_eq)\n  also have \"... = (a * b) mod n\"\n    using assms(2-3) by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_mult:\n  fixes x y n :: nat\n  assumes \"n > 0\" \"x mod n = a\" \"y mod n = b\"\n  shows \"(x * y) mod n = (a * b) mod n\"\nproof -\n  have \"(x * y) mod n = ((x mod n) * (y mod n)) mod n\"\n    by (metis mod_mult_eq)\n  also have \"... = (a * b) mod n\"\n    using assms(2-3) by auto\n  finally show ?thesis by auto\nqed", "origin": "mod_add", "update_count": 0}, "non_negativity_of_squares_generalized": {"skill_name": "non_negativity_of_squares_generalized", "marker": "lemma non_negativity_of_squares_generalized:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  show \"?thesis\" by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares_generalized:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  show \"?thesis\" by (simp add: power2_eq_square)\nqed", "origin": "trivial_inequalityV6", "update_count": 0}, "non_negativity_of_sum_of_squares": {"skill_name": "non_negativity_of_sum_of_squares", "marker": "lemma non_negativity_of_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then have \"a^2 + b^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity_of_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then have \"a^2 + b^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "trivial_inequalityV6", "update_count": 0}, "non_negativity_of_squaresV3": {"skill_name": "non_negativity_of_squaresV3", "marker": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\n  using non_negativity_of_sum_of_squares by auto", "description": "-", "full_code": "lemma non_negativity_of_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then have \"a^2 + b^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed\n\nlemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\n  using non_negativity_of_sum_of_squares by auto", "origin": "trivial_inequalityV6", "update_count": 0}, "non_negativity_of_square_sum": {"skill_name": "non_negativity_of_square_sum", "marker": "lemma non_negativity_of_square_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 >= 0\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma non_negativity_of_square_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 >= 0\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis \n    by sos\nqed", "origin": "trivial_inequalityV6", "update_count": 0}, "nonneg_sum_inequality": {"skill_name": "nonneg_sum_inequality", "marker": "lemma nonneg_sum_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\" \"d >= 0\"\n  shows \"a + b + c + d >= 0\"\nproof -\n  have \"a + b + c + d = (a + b) + (c + d)\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonneg_sum_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\" \"d >= 0\"\n  shows \"a + b + c + d >= 0\"\nproof -\n  have \"a + b + c + d = (a + b) + (c + d)\" by auto\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "multiplicative_inverse_inequality": {"skill_name": "multiplicative_inverse_inequality", "marker": "lemma multiplicative_inverse_inequality:\n  fixes a b :: real\n  assumes \"a > 0\" and \"b > 0\"\n  shows \"1 / a < 1 / b \\<longleftrightarrow> a > b\"\nproof -\n  have \"1 / a < 1 / b \\<longleftrightarrow> b < a\" using assms\n    by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma multiplicative_inverse_inequality:\n  fixes a b :: real\n  assumes \"a > 0\" and \"b > 0\"\n  shows \"1 / a < 1 / b \\<longleftrightarrow> a > b\"\nproof -\n  have \"1 / a < 1 / b \\<longleftrightarrow> b < a\" using assms\n    by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "origin": "general_multiplicative_inverse", "update_count": 0}, "multiplicative_inverse_property": {"skill_name": "multiplicative_inverse_property", "marker": "lemma multiplicative_inverse_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 / a * a = 1\" using assms by auto\n  then show ?thesis by (simp add: assms)\nqed", "description": "-", "full_code": "lemma multiplicative_inverse_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 / a * a = 1\" using assms by auto\n  then show ?thesis by (simp add: assms)\nqed", "origin": "general_multiplicative_inverse", "update_count": 0}, "multiplicative_inverse_propertyV2": {"skill_name": "multiplicative_inverse_propertyV2", "marker": "lemma multiplicative_inverse_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"1 / a * a = 1\"\n  using assms by (simp add: field_simps)", "description": "-", "full_code": "lemma multiplicative_inverse_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"1 / a * a = 1\"\n  using assms by (simp add: field_simps)", "origin": "general_multiplicative_inverse", "update_count": 0}, "multiplicative_inverse_properties": {"skill_name": "multiplicative_inverse_properties", "marker": "lemma multiplicative_inverse_properties:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> (1 / a) * a = 1\"\nproof -\n  have left: \"a * (1 / a) = 1\" using assms by auto\n  have right: \"(1 / a) * a = 1\" using assms by auto\n  then show ?thesis using left by auto\nqed", "description": "-", "full_code": "lemma multiplicative_inverse_properties:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> (1 / a) * a = 1\"\nproof -\n  have left: \"a * (1 / a) = 1\" using assms by auto\n  have right: \"(1 / a) * a = 1\" using assms by auto\n  then show ?thesis using left by auto\nqed", "origin": "general_multiplicative_inverse", "update_count": 0}, "sum_of_squares_non_negativeV5": {"skill_name": "sum_of_squares_non_negativeV5", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0 + 0\" using `x^2 >= 0` `y^2 >= 0` by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0 + 0\" using `x^2 >= 0` `y^2 >= 0` by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansion": {"skill_name": "algebraic_expansion", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\" \n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  have \"x^2 + y^2 + (x * y)^2 + 1 = x^2 + y^2 + x^2 * y^2 + 1\"\n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: lhs)\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\" \n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  have \"x^2 + y^2 + (x * y)^2 + 1 = x^2 + y^2 + x^2 * y^2 + 1\"\n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: lhs)\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV2": {"skill_name": "algebraic_expansionV2", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = (x * y - 1) * (x * y - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = (x * y - 1) * (x * y - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_square_sum_generalized": {"skill_name": "non_negativity_of_square_sum_generalized", "marker": "lemma non_negativity_of_square_sum_generalized:\n  fixes x y :: real\n  shows \"(x + y)^2 >= 0\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis \n    by sos  \nqed", "description": "-", "full_code": "lemma non_negativity_of_square_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 >= 0\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis \n    by sos  \nqed\n\nlemma non_negativity_of_square_sum_generalized:\n  fixes x y :: real\n  shows \"(x + y)^2 >= 0\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis \n    by sos  \nqed", "origin": "non_negativity_of_square_sum", "update_count": 0}, "multiplicative_inverse_propertyV3": {"skill_name": "multiplicative_inverse_propertyV3", "marker": "lemma multiplicative_inverse_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b = 1 / a\"\n  shows \"a * b = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms by simp\n  then show ?thesis by (simp add: assms(2))\nqed", "description": "-", "full_code": "lemma multiplicative_inverse_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b = 1 / a\"\n  shows \"a * b = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms by simp\n  then show ?thesis by (simp add: assms(2))\nqed", "origin": "non_zero_multiplicative_inverse", "update_count": 0}, "sum_of_squares_non_negative_two_vars": {"skill_name": "sum_of_squares_non_negative_two_vars", "marker": "lemma sum_of_squares_non_negative_two_vars:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  by (simp add: power2_eq_square)", "description": "-", "full_code": "lemma sum_of_squares_non_negative_two_vars:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  by (simp add: power2_eq_square)", "origin": "sum_of_squares_non_negativeV4", "update_count": 0}, "sum_of_squares_non_negative_general": {"skill_name": "sum_of_squares_non_negative_general", "marker": "lemma sum_of_squares_non_negative_general:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_general:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "origin": "sum_of_squares_non_negativeV4", "update_count": 0}, "mod_add_power_extended": {"skill_name": "mod_add_power_extended", "marker": "lemma mod_add_power_extended:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\" \n    by (simp add: mod_add_left_eq)\n  also have \"... = (((x mod n) + b)^c mod n + d) mod n\"\n    by (smt (verit) mod_add_cong mod_add_left_eq power_mod)\n  also have \"... = ((a + b)^c mod n + d) mod n\"\n    using assms(5) by auto\n  finally show ?thesis by presburger\nqed", "description": "-", "full_code": "lemma mod_add_power_extended:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\" \n    by (simp add: mod_add_left_eq)\n  also have \"... = (((x mod n) + b)^c mod n + d) mod n\"\n    by (smt (verit) mod_add_cong mod_add_left_eq power_mod)\n  also have \"... = ((a + b)^c mod n + d) mod n\"\n    using assms(5) by auto\n  finally show ?thesis by presburger\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add_power_generalized": {"skill_name": "mod_add_power_generalized", "marker": "lemma mod_add_power_generalized:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b) mod n)^c mod n\"\n    by (simp add: mod_add_left_eq power_mod)\n  also have \"... = ((a + b) mod n)^c mod n\"\n    using assms(4) by (auto simp: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (metis power_mod)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma mod_add_power_generalized:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b) mod n)^c mod n\"\n    by (simp add: mod_add_left_eq power_mod)\n  also have \"... = ((a + b) mod n)^c mod n\"\n    using assms(4) by (auto simp: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (metis power_mod)\n  finally show ?thesis by simp\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_sum_of_powers": {"skill_name": "mod_sum_of_powers", "marker": "lemma mod_sum_of_powers:\n  fixes x y n :: nat\n  assumes \"n > 0\"\n  shows \"(x + y)^c mod n = ((x mod n) + (y mod n))^c mod n\"\nproof -\n  have \"(x + y) mod n = (x mod n + y mod n) mod n\"\n    by presburger\n  then show ?thesis\n    by (smt (verit) power_mod)\nqed", "description": "-", "full_code": "lemma mod_sum_of_powers:\n  fixes x y n :: nat\n  assumes \"n > 0\"\n  shows \"(x + y)^c mod n = ((x mod n) + (y mod n))^c mod n\"\nproof -\n  have \"(x + y) mod n = (x mod n + y mod n) mod n\"\n    by presburger\n  then show ?thesis\n    by (smt (verit) power_mod)\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add_power_general": {"skill_name": "mod_add_power_general", "marker": "lemma mod_add_power_general:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b) mod n)^c = ((a + b) mod n)^c\"\nproof -\n  have \"(x + b) mod n = ((x mod n) + b) mod n\"\n    by (simp add: mod_add_left_eq)\n  then have \"((x + b) mod n)^c = ((a + b) mod n)^c\"\n    using assms(4) by (simp add: power_mod)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power_general:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b) mod n)^c = ((a + b) mod n)^c\"\nproof -\n  have \"(x + b) mod n = ((x mod n) + b) mod n\"\n    by (simp add: mod_add_left_eq)\n  then have \"((x + b) mod n)^c = ((a + b) mod n)^c\"\n    using assms(4) by (simp add: power_mod)\n  thus ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "non_negative_product": {"skill_name": "non_negative_product", "marker": "lemma non_negative_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a * b >= 0\"\nproof -\n  have \"a * b = (0 + a) * (0 + b)\" by auto\n  then show ?thesis using assms by (metis mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a * b >= 0\"\nproof -\n  have \"a * b = (0 + a) * (0 + b)\" by auto\n  then show ?thesis using assms by (metis mult_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "non_negative_productV2": {"skill_name": "non_negative_productV2", "marker": "lemma non_negative_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a * b >= 0\"\nproof -\n  have \"a * b = (0 + a) * (0 + b)\" by (simp add: algebra_simps)\n  also have \"... >= 0 * 0\" using assms by (simp add: mult_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_product:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a * b >= 0\"\nproof -\n  have \"a * b = (0 + a) * (0 + b)\" by (simp add: algebra_simps)\n  also have \"... >= 0 * 0\" using assms by (simp add: mult_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "expand_polynomial": {"skill_name": "expand_polynomial", "marker": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have lhs: \"(x + y)^2 = (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: algebra_simps)\n  also have \"... = x * x + x * y + y * x + y * y\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by sos\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have lhs: \"(x + y)^2 = (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: algebra_simps)\n  also have \"... = x * x + x * y + y * x + y * y\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by sos\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_polynomialV2": {"skill_name": "expand_polynomialV2", "marker": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have lhs: \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\" \n    by (simp add: distrib_right)\n  also have \"... = x * x + x * y + y * x + y * y\" \n    by (simp add: distrib_left)\n  also have \"... = x^2 + 2 * x * y + y^2\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have lhs: \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\" \n    by (simp add: distrib_right)\n  also have \"... = x * x + x * y + y * x + y * y\" \n    by (simp add: distrib_left)\n  also have \"... = x^2 + 2 * x * y + y^2\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_square_expression": {"skill_name": "expand_square_expression", "marker": "lemma expand_square_expression:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\n  using binomial_expansion[of x y] by simp", "description": "-", "full_code": "lemma binomial_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"((a + b) * (a + b)) = (a + b)^2\" \n    by (simp add: power2_eq_square)\n  also have \"... = a*(a + b) + b*(a + b)\" \n    by sos\n  also have \"... = a^2 + a*b + b*a + b^2\" \n    by sos\n  also have \"... = a^2 + 2*a*b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by sos\nqed\n\nlemma expand_square_expression:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\n  using binomial_expansion[of x y] by simp", "origin": "binomial_expansionV5", "update_count": 0}, "min_of_non_negatives": {"skill_name": "min_of_non_negatives", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV6": {"skill_name": "sum_of_squares_non_negativeV6", "marker": "lemma sum_of_squares_non_negative:\n  fixes xs :: \"nat list\"\n  shows \"(\\<Sum>x\\<in>set xs. (real_of_nat x)^2) >= 0\"\nproof -\n  have \"real_of_nat x^2 >= 0\" for x :: nat by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes xs :: \"nat list\"\n  shows \"(\\<Sum>x\\<in>set xs. (real_of_nat x)^2) >= 0\"\nproof -\n  have \"real_of_nat x^2 >= 0\" for x :: nat by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "origin": "sum_of_squares_non_negative_general", "update_count": 0}, "sum_of_squares_non_negative_general_v2": {"skill_name": "sum_of_squares_non_negative_general_v2", "marker": "lemma sum_of_squares_non_negative_general_v2:\n  fixes xs :: \"real list\"\n  assumes \"xs \\<noteq> []\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_general_v2:\n  fixes xs :: \"real list\"\n  assumes \"xs \\<noteq> []\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "origin": "sum_of_squares_non_negative_general", "update_count": 0}, "sum_of_squares_non_negative_with_count": {"skill_name": "sum_of_squares_non_negative_with_count", "marker": "lemma sum_of_squares_non_negative_with_count:\n  fixes xs :: \"real list\"\n  assumes \"length xs > 0\" \n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis \n    using assms by (simp add: sum_nonneg) \nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_with_count:\n  fixes xs :: \"real list\"\n  assumes \"length xs > 0\" \n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis \n    using assms by (simp add: sum_nonneg) \nqed", "origin": "sum_of_squares_non_negative_general", "update_count": 0}, "min_of_non_negativesV2": {"skill_name": "min_of_non_negativesV2", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + 0 + b\" by auto\n  also have \"... = (a + 0) + b\" by (simp add: add.assoc)\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + 0 + b\" by auto\n  also have \"... = (a + 0) + b\" by (simp add: add.assoc)\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_squaresV4": {"skill_name": "non_negativity_of_squaresV4", "marker": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" \n    by (simp add: power2_eq_square)  \n  moreover have \"a * a >= 0\" \n    using mult_nonneg_nonneg by auto  \n  ultimately show ?thesis by simp  \nqed", "description": "-", "full_code": "lemma non_negativity_of_squares:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" \n    by (simp add: power2_eq_square)  \n  moreover have \"a * a >= 0\" \n    using mult_nonneg_nonneg by auto  \n  ultimately show ?thesis by simp  \nqed", "origin": "do_request", "update_count": 0}, "mod_property": {"skill_name": "mod_property", "marker": "lemma mod_property:\n  fixes a b c d :: nat\n  assumes \"a mod d = b mod d\"\n  shows \"(a + c) mod d = (b + c) mod d\"\nproof -\n  have \"a mod d = b mod d\" using assms by simp\n  then have \"(a + c) mod d = (b + c) mod d\" using mod_add_cong by blast\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma mod_property:\n  fixes a b c d :: nat\n  assumes \"a mod d = b mod d\"\n  shows \"(a + c) mod d = (b + c) mod d\"\nproof -\n  have \"a mod d = b mod d\" using assms by simp\n  then have \"(a + c) mod d = (b + c) mod d\" using mod_add_cong by blast\n  thus ?thesis by simp\nqed", "origin": "mod_add_property", "update_count": 0}, "minimum_value_of_squares": {"skill_name": "minimum_value_of_squares", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV2": {"skill_name": "minimum_value_of_squaresV2", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 = x^2 + y^2 + (x * y)^2\" by simp\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] \n          \\<open>x^2 >= 0\\<close> \n          \\<open>y^2 >= 0\\<close> \n          \\<open>(x * y)^2 >= 0\\<close> \n    by auto\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (auto simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 = x^2 + y^2 + (x * y)^2\" by simp\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] \n          \\<open>x^2 >= 0\\<close> \n          \\<open>y^2 >= 0\\<close> \n          \\<open>(x * y)^2 >= 0\\<close> \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV3": {"skill_name": "minimum_value_of_squaresV3", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n  proof -\n    have \"x^2 + y^2 >= 0\" by (simp add: add_nonneg_nonneg)\n    then show \"x^2 + y^2 + (x * y)^2 >= 0\" \n      using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] by auto\n  qed\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n  proof -\n    have \"x^2 + y^2 >= 0\" by (simp add: add_nonneg_nonneg)\n    then show \"x^2 + y^2 + (x * y)^2 >= 0\" \n      using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] by auto\n  qed\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV4": {"skill_name": "minimum_value_of_squaresV4", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> by (simp add: add_nonneg_nonneg)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> by (simp add: add_nonneg_nonneg)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV5": {"skill_name": "minimum_value_of_squaresV5", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> \n    by (simp add: add_nonneg_nonneg)\n  have \"x^2 + y^2 + (x * y)^2 = (x^2 + y^2) + (x * y)^2\" \n    by simp\n  show ?thesis using \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>\n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> \n    by (simp add: add_nonneg_nonneg)\n  have \"x^2 + y^2 + (x * y)^2 = (x^2 + y^2) + (x * y)^2\" \n    by simp\n  show ?thesis using \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>\n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "multi_distrib_complex_generalized": {"skill_name": "multi_distrib_complex_generalized", "marker": "lemma multi_distrib_complex_generalized:\n  fixes zs :: \"complex list\" and ws :: \"complex list\"\n  assumes \"length zs = n\" \"length ws = m\"\n  shows \"(\\<Sum>i=0..n. zs!i) * (\\<Sum>j=0..m. ws!j) = (\\<Sum>i=0..n. zs!i * (\\<Sum>j=0..m. ws!j))\"\nproof -\n  have \"(\\<Sum>i=0..n. zs!i) * (\\<Sum>j=0..m. ws!j) = (\\<Sum>i=0..n. zs!i * (\\<Sum>j=0..m. ws!j))\"\n    by (metis sum_distrib_right)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_generalized:\n  fixes zs :: \"complex list\" and ws :: \"complex list\"\n  assumes \"length zs = n\" \"length ws = m\"\n  shows \"(\\<Sum>i=0..n. zs!i) * (\\<Sum>j=0..m. ws!j) = (\\<Sum>i=0..n. zs!i * (\\<Sum>j=0..m. ws!j))\"\nproof -\n  have \"(\\<Sum>i=0..n. zs!i) * (\\<Sum>j=0..m. ws!j) = (\\<Sum>i=0..n. zs!i * (\\<Sum>j=0..m. ws!j))\"\n    by (metis sum_distrib_right)\n  thus ?thesis by auto\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "multi_distrib_complex_general": {"skill_name": "multi_distrib_complex_general", "marker": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = (a * c + a * d + b * c + b * d) + (e * c + e * d + f * c + f * d)\"\n    by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_general:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = (a * c + a * d + b * c + b * d) + (e * c + e * d + f * c + f * d)\"\n    by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "minimum_value_of_squaresV6": {"skill_name": "minimum_value_of_squaresV6", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + (x * y)^2\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + (x * y)^2\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV7": {"skill_name": "minimum_value_of_squaresV7", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] \n          \\<open>(x * y)^2 >= 0\\<close> \n    by auto\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0\" \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] \n          \\<open>(x * y)^2 >= 0\\<close> \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "logarithm_base_change_extended": {"skill_name": "logarithm_base_change_extended", "marker": "lemma logarithm_base_change_extended:\n  fixes a b c :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\"\n  shows \"log b a = log a a / log a b\" \n     and \"log c a = log a a / log a c\"\n     and \"log c b = log b b / log b c\"\nproof -\n  have log_base_change_ab: \"log b a = log a a / log a b\" using assms by (metis log_base_change)\n  have log_base_change_ac: \"log c a = log a a / log a c\" using assms by (metis log_base_change)\n  have log_base_change_bc: \"log c b = log b b / log b c\" using assms by (metis log_base_change)\n  show \"log b a = log a a / log a b\" by (simp add: log_base_change_ab)\n  show \"log c a = log a a / log a c\" by (simp add: log_base_change_ac)\n  show \"log c b = log b b / log b c\" by (simp add: log_base_change_bc)\nqed", "description": "-", "full_code": "lemma logarithm_base_change_extended:\n  fixes a b c :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\"\n  shows \"log b a = log a a / log a b\" \n     and \"log c a = log a a / log a c\"\n     and \"log c b = log b b / log b c\"\nproof -\n  have log_base_change_ab: \"log b a = log a a / log a b\" using assms by (metis log_base_change)\n  have log_base_change_ac: \"log c a = log a a / log a c\" using assms by (metis log_base_change)\n  have log_base_change_bc: \"log c b = log b b / log b c\" using assms by (metis log_base_change)\n  show \"log b a = log a a / log a b\" by (simp add: log_base_change_ab)\n  show \"log c a = log a a / log a c\" by (simp add: log_base_change_ac)\n  show \"log c b = log b b / log b c\" by (simp add: log_base_change_bc)\nqed", "origin": "logarithm_base_change", "update_count": 0}, "min_value_of_squares": {"skill_name": "min_value_of_squares", "marker": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  by (simp add: power2_eq_square)", "description": "-", "full_code": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  by (simp add: power2_eq_square)", "origin": "do_request", "update_count": 0}, "min_value_of_squaresV2": {"skill_name": "min_value_of_squaresV2", "marker": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"x^2\" \"y^2\"] \n    by auto\nqed", "description": "-", "full_code": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"x^2\" \"y^2\"] \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "min_sum_of_squares": {"skill_name": "min_sum_of_squares", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" using assms(1) by assumption\n  have \"b^2 \\<ge> 0\" using assms(2) by assumption\n  then have \"a^2 + b^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" using assms(1) by assumption\n  have \"b^2 \\<ge> 0\" using assms(2) by assumption\n  then have \"a^2 + b^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_sum_of_squaresV2": {"skill_name": "min_sum_of_squaresV2", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" and \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 + b^2 \\<ge> 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" and \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 + b^2 \\<ge> 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_value_of_squaresV3": {"skill_name": "min_value_of_squaresV3", "marker": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_nonneg": {"skill_name": "sum_of_squares_nonneg", "marker": "lemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  using nonnegativity_of_squares by simp", "description": "-", "full_code": "lemma nonnegativity_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"a^2\" \"b^2\"] by auto\nqed\n\nlemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  using nonnegativity_of_squares by simp", "origin": "trivial_inequalityV4", "update_count": 0}, "nonnegativity_of_sum_of_squares": {"skill_name": "nonnegativity_of_sum_of_squares", "marker": "lemma nonnegativity_of_sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] by auto\nqed", "description": "-", "full_code": "lemma nonnegativity_of_sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then show ?thesis \n    using add_nonneg_nonneg[of \"x^2\" \"y^2\"] by auto\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "cancel_div": {"skill_name": "cancel_div", "marker": "lemma cancel_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: mult.commute)\n  thus ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: mult.commute)\n  thus ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV2": {"skill_name": "cancel_divV2", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by auto\n  then have \"x * (a + b / x) = x * c\" \n    using assms(1) by (simp add: mult_left_mono)\n  then have \"x * a + x * (b / x) = x * c\" \n    by (simp add: distrib_left)\n  then have \"x * a + b = x * c\" \n    using assms(1) by (simp add: field_simps)\n  thus ?thesis \n    by (simp add: mult.commute)\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by auto\n  then have \"x * (a + b / x) = x * c\" \n    using assms(1) by (simp add: mult_left_mono)\n  then have \"x * a + x * (b / x) = x * c\" \n    by (simp add: distrib_left)\n  then have \"x * a + b = x * c\" \n    using assms(1) by (simp add: field_simps)\n  thus ?thesis \n    by (simp add: mult.commute)\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV3": {"skill_name": "cancel_divV3", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by auto\n  then have \"b / x = c - a\" by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" by (metis assms(1) divide_divide_eq_left divide_eq_0_iff frac_eq_eq less_numeral_extra(3) mult_zero_left nonzero_divide_eq_eq nonzero_mult_div_cancel_left nonzero_mult_divide_mult_cancel_right times_divide_eq_left)\n  thus ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by auto\n  then have \"b / x = c - a\" by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" by (metis assms(1) divide_divide_eq_left divide_eq_0_iff frac_eq_eq less_numeral_extra(3) mult_zero_left nonzero_divide_eq_eq nonzero_mult_div_cancel_left nonzero_mult_divide_mult_cancel_right times_divide_eq_left)\n  thus ?thesis by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV4": {"skill_name": "cancel_divV4", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"b / x = c - a\" using assms(2) by simp\n  then have \"b = (c - a) * x\" by (metis assms(1) divide_divide_eq_left divide_eq_0_iff frac_eq_eq less_numeral_extra(3) mult_zero_left nonzero_divide_eq_eq nonzero_mult_div_cancel_left nonzero_mult_divide_mult_cancel_right times_divide_eq_left)\n  then show ?thesis \n    by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"b / x = c - a\" using assms(2) by simp\n  then have \"b = (c - a) * x\" by (metis assms(1) divide_divide_eq_left divide_eq_0_iff frac_eq_eq less_numeral_extra(3) mult_zero_left nonzero_divide_eq_eq nonzero_mult_div_cancel_left nonzero_mult_divide_mult_cancel_right times_divide_eq_left)\n  then show ?thesis \n    by (simp add: field_simps)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_polynomial_generalized": {"skill_name": "minimum_value_of_polynomial_generalized", "marker": "lemma minimum_value_of_polynomial_generalized:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 + b^2 + (a * b)^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using assms(1) by (simp add: power2_eq_square)\n  have \"b^2 >= 0\" using assms(2) by (simp add: power2_eq_square)\n  have \"(a * b)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"a^2 + b^2\" \"(a * b)^2\"]\n  proof -\n    have \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\n    then show \"a^2 + b^2 + (a * b)^2 >= 0\" \n      using add_nonneg_nonneg[of \"a^2 + b^2\" \"(a * b)^2\"] by auto\n  qed\nqed", "description": "-", "full_code": "lemma minimum_value_of_polynomial:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n  proof -\n    have \"x^2 + y^2 >= 0\" by (simp add: add_nonneg_nonneg)\n    then show \"x^2 + y^2 + (x * y)^2 >= 0\" \n      using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"] by auto\n  qed\nqed\n\nlemma minimum_value_of_polynomial_generalized:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 + b^2 + (a * b)^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using assms(1) by (simp add: power2_eq_square)\n  have \"b^2 >= 0\" using assms(2) by (simp add: power2_eq_square)\n  have \"(a * b)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis using add_nonneg_nonneg[of \"a^2 + b^2\" \"(a * b)^2\"]\n  proof -\n    have \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\n    then show \"a^2 + b^2 + (a * b)^2 >= 0\" \n      using add_nonneg_nonneg[of \"a^2 + b^2\" \"(a * b)^2\"] by auto\n  qed\nqed", "origin": "minimum_value_of_squaresV3", "update_count": 0}, "minimum_value_of_squares_generalized": {"skill_name": "minimum_value_of_squares_generalized", "marker": "lemma minimum_value_of_squares_generalized:\n  fixes x y :: real\n  assumes \"a = x^2\" \"b = y^2\" \"c = (x * y)^2\"\n  shows \"a + b + c >= 0\"\nproof -\n  have \"a >= 0\" using assms by simp\n  have \"b >= 0\" using assms by simp\n  have \"c >= 0\" using assms by simp\n  then show ?thesis using add_nonneg_nonneg[of \"a + b\" \"c\"]\n  proof -\n    have \"a + b >= 0\" by (metis \\<open>0 \\<le> a\\<close> \\<open>0 \\<le> b\\<close> add_nonneg_nonneg)\n    then show \"a + b + c >= 0\" \n      using add_nonneg_nonneg[of \"a + b\" \"c\"] by (metis \\<open>0 \\<le> a\\<close> \\<open>0 \\<le> b\\<close> \\<open>0 \\<le> c\\<close> add_nonneg_nonneg group_cancel.add1)\n  qed\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_generalized:\n  fixes x y :: real\n  assumes \"a = x^2\" \"b = y^2\" \"c = (x * y)^2\"\n  shows \"a + b + c >= 0\"\nproof -\n  have \"a >= 0\" using assms by simp\n  have \"b >= 0\" using assms by simp\n  have \"c >= 0\" using assms by simp\n  then show ?thesis using add_nonneg_nonneg[of \"a + b\" \"c\"]\n  proof -\n    have \"a + b >= 0\" by (metis \\<open>0 \\<le> a\\<close> \\<open>0 \\<le> b\\<close> add_nonneg_nonneg)\n    then show \"a + b + c >= 0\" \n      using add_nonneg_nonneg[of \"a + b\" \"c\"] by (metis \\<open>0 \\<le> a\\<close> \\<open>0 \\<le> b\\<close> \\<open>0 \\<le> c\\<close> add_nonneg_nonneg group_cancel.add1)\n  qed\nqed", "origin": "minimum_value_of_squaresV3", "update_count": 0}, "non_negativity_of_squares_for_any_real": {"skill_name": "non_negativity_of_squares_for_any_real", "marker": "lemma non_negativity_of_squares_for_any_real:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\"\n    using non_negativity_of_squares_generalized by auto\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negativity_of_squares_generalized:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" \n    by sos\n  also have \"... >= 0\"\n    using mult_nonneg_nonneg by auto\n  finally show ?thesis \n    by simp\nqed\n\nlemma non_negativity_of_squares_for_any_real:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\"\n    using non_negativity_of_squares_generalized by auto\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negativity_of_squares", "update_count": 0}, "rational_sum": {"skill_name": "rational_sum", "marker": "lemma rational_sum:\n  fixes p :: rat\n  assumes \"p = 1 / 4\"\n  shows \"let (m, n) = quotient_of p in m + n = 5\"\nproof -\n  have \"quotient_of (1/4) = (1, 4)\"\n    by eval\n  then show ?thesis\n    using `p = 1 / 4` by fastforce\nqed", "description": "-", "full_code": "lemma rational_sum:\n  fixes p :: rat\n  assumes \"p = 1 / 4\"\n  shows \"let (m, n) = quotient_of p in m + n = 5\"\nproof -\n  have \"quotient_of (1/4) = (1, 4)\"\n    by eval\n  then show ?thesis\n    using `p = 1 / 4` by fastforce\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV5": {"skill_name": "cancel_divV5", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b / x = c - a\" by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    by (metis assms(1) divide_divide_eq_left \n              divide_eq_0_iff frac_eq_eq \n              less_numeral_extra(3) \n              mult_zero_left \n              nonzero_divide_eq_eq \n              nonzero_mult_div_cancel_left \n              nonzero_mult_divide_mult_cancel_right \n              times_divide_eq_left)\n  have \"a * x + b = a * x + (c - a) * x\"\n    by (simp add: `b = (c - a) * x`)\n  also have \"... = (a + (c - a)) * x\"\n    by (simp add: algebra_simps)\n  also have \"... = c * x\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b / x = c - a\" by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    by (metis assms(1) divide_divide_eq_left \n              divide_eq_0_iff frac_eq_eq \n              less_numeral_extra(3) \n              mult_zero_left \n              nonzero_divide_eq_eq \n              nonzero_mult_div_cancel_left \n              nonzero_mult_divide_mult_cancel_right \n              times_divide_eq_left)\n  have \"a * x + b = a * x + (c - a) * x\"\n    by (simp add: `b = (c - a) * x`)\n  also have \"... = (a + (c - a)) * x\"\n    by (simp add: algebra_simps)\n  also have \"... = c * x\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV6": {"skill_name": "cancel_divV6", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  from assms(2) have \"b / x = c - a\" \n    by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    using assms(1) by (auto simp: field_simps)\n  then have \"a * x + b = a * x + (c - a) * x\" \n    by simp\n  also have \"... = a * x + c * x - a * x\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  from assms(2) have \"b / x = c - a\" \n    by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    using assms(1) by (auto simp: field_simps)\n  then have \"a * x + b = a * x + (c - a) * x\" \n    by simp\n  also have \"... = a * x + c * x - a * x\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expression": {"skill_name": "minimum_value_expression", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  have \"((x * y) - 1)^2 + (x + y)^2 = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by (simp add: power2_eq_square)\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  have \"((x * y) - 1)^2 + (x + y)^2 = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by (simp add: power2_eq_square)\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "cancel_div_alternative": {"skill_name": "cancel_div_alternative", "marker": "lemma cancel_div_alternative:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b = (c - a) * x\" using assms(1) by auto\n  hence \"b * x = (c - a) * x^2\" by sos\n  have \"a * x + b = a * x + (c - a) * x\" \n    by (simp add: `b = (c - a) * x`)\n  also have \"... = (a + (c - a)) * x\"\n    by (simp add: algebra_simps)\n  also have \"... = c * x\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma cancel_div_alternative:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b = (c - a) * x\" using assms(1) by auto\n  hence \"b * x = (c - a) * x^2\" by sos\n  have \"a * x + b = a * x + (c - a) * x\" \n    by (simp add: `b = (c - a) * x`)\n  also have \"... = (a + (c - a)) * x\"\n    by (simp add: algebra_simps)\n  also have \"... = c * x\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "cancel_divV5", "update_count": 0}, "non_negative_sum": {"skill_name": "non_negative_sum", "marker": "lemma non_negative_sum:\n  fixes x y z :: real\n  assumes \"x >= 0\" \"y >= 0\" \"z >= 0\"\n  shows \"x + y + z >= 0\"\nproof -\n  have \"x + y + z = (x + y) + z\" by auto\n  also have \"(x + y) >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  then have \"(x + y) + z >= 0 + z\" by auto\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\nqed", "description": "-", "full_code": "lemma non_negative_sum:\n  fixes x y z :: real\n  assumes \"x >= 0\" \"y >= 0\" \"z >= 0\"\n  shows \"x + y + z >= 0\"\nproof -\n  have \"x + y + z = (x + y) + z\" by auto\n  also have \"(x + y) >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  then have \"(x + y) + z >= 0 + z\" by auto\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\nqed", "origin": "non_negative_minimum", "update_count": 0}, "non_negative_sumV2": {"skill_name": "non_negative_sumV2", "marker": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by auto\n  then show ?thesis by (metis assms(1) assms(2) add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by auto\n  then show ?thesis by (metis assms(1) assms(2) add_nonneg_nonneg)\nqed", "origin": "non_negative_minimum", "update_count": 0}, "non_negative_sumV3": {"skill_name": "non_negative_sumV3", "marker": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by auto\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by auto\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_minimum", "update_count": 0}, "min_of_non_negativesV3": {"skill_name": "min_of_non_negativesV3", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  have \"a + b >= 0 + 0\" \n    using `a >= 0` `b >= 0` by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  have \"a + b >= 0 + 0\" \n    using `a >= 0` `b >= 0` by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squaresV8": {"skill_name": "minimum_value_of_squaresV8", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis \n  proof -\n    have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> \n      by (simp add: add_nonneg_nonneg)\n    then show \"x^2 + y^2 + (x * y)^2 >= 0\" \n      using \\<open>(x * y)^2 >= 0\\<close> by (simp add: add_nonneg_nonneg)\n  qed\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis \n  proof -\n    have \"x^2 + y^2 >= 0\" using \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close> \n      by (simp add: add_nonneg_nonneg)\n    then show \"x^2 + y^2 + (x * y)^2 >= 0\" \n      using \\<open>(x * y)^2 >= 0\\<close> by (simp add: add_nonneg_nonneg)\n  qed\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_of_sum_of_squares_general": {"skill_name": "non_negativity_of_sum_of_squares_general", "marker": "lemma non_negativity_of_sum_of_squares_general:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity_of_sum_of_squares_general:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "non_negativity_of_squaresV3", "update_count": 0}, "minimum_value_of_squares_with_coefficients": {"skill_name": "minimum_value_of_squares_with_coefficients", "marker": "lemma minimum_value_of_squares_with_coefficients:\n  fixes a b x y :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"a * x^2 + b * y^2 + (a * b * (x * y))^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(a * b * (x * y))^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * x^2 + b * y^2 >= 0\" \n    by (metis add.commute add_increasing add_le_same_cancel1 add_nonneg_nonneg assms(1) assms(2) le_add_same_cancel1 le_numeral_extra(3) less_add_same_cancel2 mult_nonneg_nonneg pos2 power2_eq_square realpow_pos_nth_unique zero_le_power2 zero_le_square)\n  then have \"a * x^2 + b * y^2 + (a * b * (x * y))^2 >= 0 + (a * b * (x * y))^2\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_with_coefficients:\n  fixes a b x y :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"a * x^2 + b * y^2 + (a * b * (x * y))^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(a * b * (x * y))^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * x^2 + b * y^2 >= 0\" \n    by (metis add.commute add_increasing add_le_same_cancel1 add_nonneg_nonneg assms(1) assms(2) le_add_same_cancel1 le_numeral_extra(3) less_add_same_cancel2 mult_nonneg_nonneg pos2 power2_eq_square realpow_pos_nth_unique zero_le_power2 zero_le_square)\n  then have \"a * x^2 + b * y^2 + (a * b * (x * y))^2 >= 0 + (a * b * (x * y))^2\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squaresV6", "update_count": 0}, "minimum_value_of_polynomial": {"skill_name": "minimum_value_of_polynomial", "marker": "lemma minimum_value_of_polynomial:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 + (x + y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 + (x + y)^2 >= 0\" \n    by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_polynomial:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 + (x + y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 + (x + y)^2 >= 0\" \n    by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squaresV6", "update_count": 0}, "minimum_value_of_squares_extended": {"skill_name": "minimum_value_of_squares_extended", "marker": "lemma minimum_value_of_squares_extended:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"z^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_extended:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"z^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squaresV6", "update_count": 0}, "expand_expression": {"skill_name": "expand_expression", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = ((x * y) - 1) * ((x * y) - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = ((x * y) - 1) * ((x * y) - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV2": {"skill_name": "expand_expressionV2", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = ((x * y) - 1) * ((x * y) - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x + y) * (x + y)\"\n    by sos\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1 - 2 * (x * y) + 2 * (x * y)\"\n    by (simp add: algebra_simps)\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = ((x * y) - 1) * ((x * y) - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x + y) * (x + y)\"\n    by sos\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1 - 2 * (x * y) + 2 * (x * y)\"\n    by (simp add: algebra_simps)\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "nonnegativity_of_squares": {"skill_name": "nonnegativity_of_squares", "marker": "lemma nonnegativity_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2\" \"y^2\"]\n    by (simp add: \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close>)\nqed", "description": "-", "full_code": "lemma nonnegativity_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2\" \"y^2\"]\n    by (simp add: \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close>)\nqed", "origin": "minimum_value_of_squaresV4", "update_count": 0}, "sum_of_squares_nonnegV2": {"skill_name": "sum_of_squares_nonnegV2", "marker": "lemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 + y^2 >= 0\" using nonnegativity_of_squares by simp\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "description": "-", "full_code": "lemma nonnegativity_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2\" \"y^2\"]\n    by (simp add: \\<open>x^2 >= 0\\<close> \\<open>y^2 >= 0\\<close>)\nqed\n\nlemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 + y^2 >= 0\" using nonnegativity_of_squares by simp\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "origin": "minimum_value_of_squaresV4", "update_count": 0}, "sum_of_squares_and_product": {"skill_name": "sum_of_squares_and_product", "marker": "lemma sum_of_squares_and_product:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 + y^2 >= 0\" by (simp add: nonnegative_sum_of_squares)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_and_product:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 + y^2 >= 0\" by (simp add: nonnegative_sum_of_squares)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"x^2 + y^2\" \"(x * y)^2\"]\n    by (simp add: \\<open>x^2 + y^2 >= 0\\<close> \\<open>(x * y)^2 >= 0\\<close>)\nqed", "origin": "minimum_value_of_squaresV4", "update_count": 0}, "non_negative_product_of_squares": {"skill_name": "non_negative_product_of_squares", "marker": "lemma non_negative_product_of_squares:\n  fixes x y :: real\n  shows \"(x * y)^2 >= 0\"\nproof -\n  have \"x * y = 0 \\<or> x * y > 0 \\<or> x * y < 0\" by sos\n  then have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_product_of_squares:\n  fixes x y :: real\n  shows \"(x * y)^2 >= 0\"\nproof -\n  have \"x * y = 0 \\<or> x * y > 0 \\<or> x * y < 0\" by sos\n  then have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis by simp\nqed", "origin": "minimum_value_of_squaresV4", "update_count": 0}, "non_negative_sum_of_squares": {"skill_name": "non_negative_sum_of_squares", "marker": "lemma non_negative_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by (simp add: power2_eq_square)\n  have \"b^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"a^2\" \"b^2\"]\n    by (simp add: \\<open>a^2 >= 0\\<close> \\<open>b^2 >= 0\\<close>)\nqed", "description": "-", "full_code": "lemma non_negative_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by (simp add: power2_eq_square)\n  have \"b^2 >= 0\" by (simp add: power2_eq_square)\n  show ?thesis using add_nonneg_nonneg[of \"a^2\" \"b^2\"]\n    by (simp add: \\<open>a^2 >= 0\\<close> \\<open>b^2 >= 0\\<close>)\nqed", "origin": "minimum_value_of_squaresV4", "update_count": 0}, "expand_polynomialV3": {"skill_name": "expand_polynomialV3", "marker": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\" \n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\" \n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  also have \"... = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "expand_polynomialV4": {"skill_name": "expand_polynomialV4", "marker": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\"\n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\" \n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: lhs)\nqed", "description": "-", "full_code": "lemma expand_polynomial:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"(x * y - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\"\n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\" \n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: lhs)\nqed", "origin": "do_request", "update_count": 0}, "mod_add_powerV3": {"skill_name": "mod_add_powerV3", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + (b mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + (b mod n))^c mod n\"\n    using assms(4) by auto\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (smt (verit) assms(4) mod_add_right_eq power_mod)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + (b mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + (b mod n))^c mod n\"\n    using assms(4) by auto\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (smt (verit) assms(4) mod_add_right_eq power_mod)\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "mod_add_powerV4": {"skill_name": "mod_add_powerV4", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + (b mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + (b mod n))^c mod n\"\n    using assms(4) by (simp add: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    by (smt (verit) assms(4) mod_add_right_eq power_mod)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + (b mod n))^c mod n\"\n    by (smt (verit) mod_add_left_eq mod_add_right_eq power_mod)\n  also have \"... = (a + (b mod n))^c mod n\"\n    using assms(4) by (simp add: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    by (smt (verit) assms(4) mod_add_right_eq power_mod)\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "min_value_of_squares_with_weight": {"skill_name": "min_value_of_squares_with_weight", "marker": "lemma min_value_of_squares_with_weight:\n  fixes x y :: real\n  assumes \"w \\<ge> 0\"\n  shows \"w * (x^2 + y^2) \\<ge> 0\"\nproof -\n  have \"x^2 + y^2 \\<ge> 0\" by auto\n  thus ?thesis using assms by simp\nqed", "description": "-", "full_code": "lemma min_value_of_squares_with_weight:\n  fixes x y :: real\n  assumes \"w \\<ge> 0\"\n  shows \"w * (x^2 + y^2) \\<ge> 0\"\nproof -\n  have \"x^2 + y^2 \\<ge> 0\" by auto\n  thus ?thesis using assms by simp\nqed", "origin": "min_value_of_squaresV3", "update_count": 0}, "log_power_identityV2": {"skill_name": "log_power_identityV2", "marker": "lemma log_power_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\"\n    using assms by auto\n  also have \"... = n * 1\"\n    using assms by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma log_power_identity:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\"\n    using assms by auto\n  also have \"... = n * 1\"\n    using assms by auto\n  finally show ?thesis by simp\nqed", "origin": "log_identity", "update_count": 0}, "min_of_non_negatives_multi": {"skill_name": "min_of_non_negatives_multi", "marker": "lemma min_of_non_negatives_multi:\n  fixes A :: \"real set\"\n  assumes \"finite A\" and \"\\<forall>x\\<in>A. x \\<ge> 0\"\n  shows \"(\\<Sum>x\\<in>A. x) \\<ge> 0\"\nproof -\n  have \"(\\<Sum>x\\<in>A. x) = (\\<Sum>x\\<in>A. x + 0)\" by (simp add: add.commute)\n  also have \"... = (\\<Sum>x\\<in>A. (x + 0))\" by auto\n  also have \"... \\<ge> (\\<Sum>x\\<in>A. 0)\" using assms by (simp add: sum_nonneg)\n  finally show ?thesis by (metis assms(2) sum_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives_multi:\n  fixes A :: \"real set\"\n  assumes \"finite A\" and \"\\<forall>x\\<in>A. x \\<ge> 0\"\n  shows \"(\\<Sum>x\\<in>A. x) \\<ge> 0\"\nproof -\n  have \"(\\<Sum>x\\<in>A. x) = (\\<Sum>x\\<in>A. x + 0)\" by (simp add: add.commute)\n  also have \"... = (\\<Sum>x\\<in>A. (x + 0))\" by auto\n  also have \"... \\<ge> (\\<Sum>x\\<in>A. 0)\" using assms by (simp add: sum_nonneg)\n  finally show ?thesis by (metis assms(2) sum_nonneg)\nqed", "origin": "min_of_non_negativesV2", "update_count": 0}, "min_of_non_negatives_multiV2": {"skill_name": "min_of_non_negatives_multiV2", "marker": "lemma min_of_non_negatives_multi:\n  fixes a :: \"real set\" and n :: nat\n  assumes \"finite a\" and \"\\<forall>x\\<in>a. x >= 0\"\n  shows \"sum id a >= 0\"\nproof -\n  have \"sum id a = sum (\\<lambda>x. x) a\" by simp\n  also have \"... >= 0\" using assms by (metis sum_nonneg)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma min_of_non_negatives_multi:\n  fixes a :: \"real set\" and n :: nat\n  assumes \"finite a\" and \"\\<forall>x\\<in>a. x >= 0\"\n  shows \"sum id a >= 0\"\nproof -\n  have \"sum id a = sum (\\<lambda>x. x) a\" by simp\n  also have \"... >= 0\" using assms by (metis sum_nonneg)\n  finally show ?thesis .\nqed", "origin": "min_of_non_negativesV2", "update_count": 0}, "mod_multV2": {"skill_name": "mod_multV2", "marker": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  then have \"(a * b) mod n = ((a mod n) + (a div n) * n) * b mod n\" \n    by auto\n  also have \"... = ((a mod n) * b + (a div n) * n * b) mod n\" by (metis add_mult_distrib)\n  also have \"... = ((a mod n) * b + (a div n) * (b mod n) * n) mod n\" \n    by (metis calculation mod_mult_left_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n) + (a div n) * (b div n) * n * n) mod n\" \n    by (metis calculation mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\" \n    by (simp add: mod_add_right_eq)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  then have \"(a * b) mod n = ((a mod n) + (a div n) * n) * b mod n\" \n    by auto\n  also have \"... = ((a mod n) * b + (a div n) * n * b) mod n\" by (metis add_mult_distrib)\n  also have \"... = ((a mod n) * b + (a div n) * (b mod n) * n) mod n\" \n    by (metis calculation mod_mult_left_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n) + (a div n) * (b div n) * n * n) mod n\" \n    by (metis calculation mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\" \n    by (simp add: mod_add_right_eq)\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "mod_multV3": {"skill_name": "mod_multV3", "marker": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  then have \"(a * b) mod n = ((a mod n) + (a div n) * n) * b mod n\" \n    by auto\n  also have \"... = ((a mod n) * b + (a div n) * n * b) mod n\" by (metis add_mult_distrib)\n  also have \"... = ((a mod n) * (b mod n) + (a div n) * (b div n) * n * n) mod n\" \n    using `(b = (b mod n) + (b div n) * n)` by (metis calculation mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\" \n    by (simp add: mod_add_right_eq)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  then have \"(a * b) mod n = ((a mod n) + (a div n) * n) * b mod n\" \n    by auto\n  also have \"... = ((a mod n) * b + (a div n) * n * b) mod n\" by (metis add_mult_distrib)\n  also have \"... = ((a mod n) * (b mod n) + (a div n) * (b div n) * n * n) mod n\" \n    using `(b = (b mod n) + (b div n) * n)` by (metis calculation mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\" \n    by (simp add: mod_add_right_eq)\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squares_multi": {"skill_name": "minimum_value_of_squares_multi", "marker": "lemma minimum_value_of_squares_multi:\n  fixes x :: \"real list\"\n  assumes \"length x = n\" and \"n > 0\"\n  shows \"(\\<Sum>i\\<in>{0..n-1}. (x ! i)^2) + (\\<Sum>i\\<in>{0..n-1}. (x ! i))^2 >= 0\"\nproof -\n  have \"(\\<Sum>i\\<in>{0..n-1}. (x ! i)^2) >= 0\" \n    by (simp add: sum_nonneg)\n  moreover have \"(\\<Sum>i\\<in>{0..n-1}. (x ! i))^2 >= 0\" \n    by (simp add: power2_eq_square)\n  ultimately show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_multi:\n  fixes x :: \"real list\"\n  assumes \"length x = n\" and \"n > 0\"\n  shows \"(\\<Sum>i\\<in>{0..n-1}. (x ! i)^2) + (\\<Sum>i\\<in>{0..n-1}. (x ! i))^2 >= 0\"\nproof -\n  have \"(\\<Sum>i\\<in>{0..n-1}. (x ! i)^2) >= 0\" \n    by (simp add: sum_nonneg)\n  moreover have \"(\\<Sum>i\\<in>{0..n-1}. (x ! i))^2 >= 0\" \n    by (simp add: power2_eq_square)\n  ultimately show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squaresV8", "update_count": 0}, "mod_add_powerV5": {"skill_name": "mod_add_powerV5", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b) mod n)^c mod n\"\n    by (smt (verit, best) mod_add_left_eq power_mod)\n  also have \"... = ((a + b) mod n)^c mod n\"\n    using assms(4) by (simp add: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (metis power_mod)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b) mod n)^c mod n\"\n    by (smt (verit, best) mod_add_left_eq power_mod)\n  also have \"... = ((a + b) mod n)^c mod n\"\n    using assms(4) by (simp add: mod_add_left_eq)\n  also have \"... = (a + b)^c mod n\"\n    using assms(2) by (metis power_mod)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV3": {"skill_name": "expand_expressionV3", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"((x * y) - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\"\n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = \n              ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n        (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  thus ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have lhs1: \"((x * y) - 1)^2 = (x * y)^2 - 2 * (x * y) + 1\"\n    by sos\n  have lhs2: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have lhs: \"((x * y) - 1)^2 + (x + y)^2 = \n              ((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2)\"\n    by (simp add: lhs1 lhs2)\n  have \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n        (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  thus ?thesis \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV2": {"skill_name": "minimum_value_expressionV2", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2\" \n  proof -\n    have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n    have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x * y - 1)^2\" and \"0 \\<le> (x + y)^2\" by auto\n    then show ?thesis \n      using add_nonneg_nonneg[of \"(x * y - 1)^2\" \"(x + y)^2\"]\n      by sos\n  qed\n  then show ?thesis \n    by (metis add_nonneg_nonneg zero_le_power2)\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2\" \n  proof -\n    have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n    have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x * y - 1)^2\" and \"0 \\<le> (x + y)^2\" by auto\n    then show ?thesis \n      using add_nonneg_nonneg[of \"(x * y - 1)^2\" \"(x + y)^2\"]\n      by sos\n  qed\n  then show ?thesis \n    by (metis add_nonneg_nonneg zero_le_power2)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV3": {"skill_name": "minimum_value_expressionV3", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> (x * y - 1)^2 + (x + y)^2\" by (simp add: add_nonneg_nonneg)\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2 + 1\" \n    using add_nonneg_nonneg[of \"1\" \"(x * y - 1)^2 + (x + y)^2\"] \n    by simp\n  thus ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> (x * y - 1)^2 + (x + y)^2\" by (simp add: add_nonneg_nonneg)\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2 + 1\" \n    using add_nonneg_nonneg[of \"1\" \"(x * y - 1)^2 + (x + y)^2\"] \n    by simp\n  thus ?thesis \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV4": {"skill_name": "minimum_value_expressionV4", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"((x * y) - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  show ?thesis\n  proof (cases \"x * y = 1 \\<and> x + y = 0\")\n    case True\n    then have \"?expr = 0\" \n      by (simp add: power2_eq_square)\n    thus ?thesis \n      by sos\n  next\n    case False\n    then have \"((x * y) - 1)^2 + (x + y)^2 > 0\"\n      by sos\n    have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\"\n      using False\n      by sos\n    thus ?thesis\n      by simp\n  qed\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"((x * y) - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  show ?thesis\n  proof (cases \"x * y = 1 \\<and> x + y = 0\")\n    case True\n    then have \"?expr = 0\" \n      by (simp add: power2_eq_square)\n    thus ?thesis \n      by sos\n  next\n    case False\n    then have \"((x * y) - 1)^2 + (x + y)^2 > 0\"\n      by sos\n    have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\"\n      using False\n      by sos\n    thus ?thesis\n      by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV5": {"skill_name": "minimum_value_expressionV5", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"((x * y) - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\"\n    by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" for x y :: real using that\n    by sos\n  have \"((x * y) - 1)^2 + (x + y)^2 = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\" \n  proof -\n    have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\" \n      by sos\n    thus ?thesis by auto\n  qed\n  thus ?thesis\n    by (metis add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"((x * y) - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\"\n    by (simp add: add_nonneg_nonneg)\n  let ?expr = \"((x * y) - 1)^2 + (x + y)^2\"\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" for x y :: real using that\n    by sos\n  have \"((x * y) - 1)^2 + (x + y)^2 = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by (simp add: power2_eq_square)\n  have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\" \n  proof -\n    have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 1\" \n      by sos\n    thus ?thesis by auto\n  qed\n  thus ?thesis\n    by (metis add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV6": {"skill_name": "minimum_value_expressionV6", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  let ?expr = \"(x * y - 1)^2 + (x + y)^2\"\n  have \"?expr \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then have \"1 \\<le> ?expr\" \n    by sos\n  thus ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"(x * y - 1)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x + y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  let ?expr = \"(x * y - 1)^2 + (x + y)^2\"\n  have \"?expr \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then have \"1 \\<le> ?expr\" \n    by sos\n  thus ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "combine_squares": {"skill_name": "combine_squares", "marker": "lemma combine_squares:\n  fixes x y :: real\n  shows \"1 <= (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 <= (x * y - 1)^2 + (x + y)^2\"\n  proof -\n    let ?a = \"x * y - 1\"\n    let ?b = \"x + y\"\n    have \"0 <= ?a^2\" by (simp add: power2_eq_square)\n    have \"0 <= ?b^2\" by (simp add: power2_eq_square)\n    have \"1 <= 0 + ?a^2 + ?b^2\"\n      using add_nonneg_nonneg[of \"0\" \"?a^2\"] \n            \\<open>0 <= ?a^2\\<close> \n      by sos\n    thus ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma combine_squares:\n  fixes x y :: real\n  shows \"1 <= (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 <= (x * y - 1)^2 + (x + y)^2\"\n  proof -\n    let ?a = \"x * y - 1\"\n    let ?b = \"x + y\"\n    have \"0 <= ?a^2\" by (simp add: power2_eq_square)\n    have \"0 <= ?b^2\" by (simp add: power2_eq_square)\n    have \"1 <= 0 + ?a^2 + ?b^2\"\n      using add_nonneg_nonneg[of \"0\" \"?a^2\"] \n            \\<open>0 <= ?a^2\\<close> \n      by sos\n    thus ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_quadratic": {"skill_name": "minimum_value_of_quadratic", "marker": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"a * (x - b)^2 >= 0\" \n    by (metis assms mult_eq_0_iff mult_less_cancel_right mult_nonneg_nonneg not_square_less_zero power2_eq_square verit_comp_simplify1(3) zero_le_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"a * (x - b)^2 >= 0\" \n    by (metis assms mult_eq_0_iff mult_less_cancel_right mult_nonneg_nonneg not_square_less_zero power2_eq_square verit_comp_simplify1(3) zero_le_square)\n  then show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_quadraticV2": {"skill_name": "minimum_value_of_quadraticV2", "marker": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"(x - b)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * (x - b)^2 >= 0\" using assms(1) by (simp add: mult_nonneg_nonneg)\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"(x - b)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * (x - b)^2 >= 0\" using assms(1) by (simp add: mult_nonneg_nonneg)\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_quadraticV3": {"skill_name": "minimum_value_of_quadraticV3", "marker": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"a * (x - b)^2 >= 0\" \n    by (metis assms mult_eq_0_iff mult_less_cancel_right mult_nonneg_nonneg not_square_less_zero power2_eq_square verit_comp_simplify1(3) zero_le_square)\n  then have \"a * (x - b)^2 + c >= 0 + c\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma minimum_value_of_quadratic:\n  fixes a b c :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"a * (x - b)^2 >= 0\" \n    by (metis assms mult_eq_0_iff mult_less_cancel_right mult_nonneg_nonneg not_square_less_zero power2_eq_square verit_comp_simplify1(3) zero_le_square)\n  then have \"a * (x - b)^2 + c >= 0 + c\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_quadraticV4": {"skill_name": "minimum_value_of_quadraticV4", "marker": "lemma minimum_value_of_quadratic:\n  fixes a b c x :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"(x - b)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * (x - b)^2 >= 0\" using assms by auto\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_quadratic:\n  fixes a b c x :: real\n  assumes \"a > 0\"\n  shows \"a * (x - b)^2 + c >= c\"\nproof -\n  have \"(x - b)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"a * (x - b)^2 >= 0\" using assms by auto\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "mod_multV4": {"skill_name": "mod_multV4", "marker": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  have \"(a * b) mod n = ((a mod n) + (a div n) * n) * ((b mod n) + (b div n) * n) mod n\"\n    by auto\n  also have \"... = ((a mod n) * (b mod n) + (a mod n) * (b div n) * n + (b mod n) * (a div n) * n + (a div n) * (b div n) * n * n) mod n\"\n    by (metis calculation comm_semiring_class.distrib group_cancel.add1 left_add_mult_distrib mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\"\n  proof -\n    have \"((a mod n) * (b div n) * n) mod n = 0\" by (simp add: mod_mult_self1)\n    have \"((b mod n) * (a div n) * n) mod n = 0\" by (simp add: mod_mult_self1)\n    have \"((a div n) * (b div n) * n * n) mod n = 0\" by (simp add: mod_mult_self1)\n    thus ?thesis by auto\n  qed\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_mult:\n  fixes a b n :: nat\n  assumes \"n > 0\"\n  shows \"(a * b) mod n = ((a mod n) * (b mod n)) mod n\"\nproof -\n  have \"a = (a mod n) + (a div n) * n\" by auto\n  have \"b = (b mod n) + (b div n) * n\" by auto\n  have \"(a * b) mod n = ((a mod n) + (a div n) * n) * ((b mod n) + (b div n) * n) mod n\"\n    by auto\n  also have \"... = ((a mod n) * (b mod n) + (a mod n) * (b div n) * n + (b mod n) * (a div n) * n + (a div n) * (b div n) * n * n) mod n\"\n    by (metis calculation comm_semiring_class.distrib group_cancel.add1 left_add_mult_distrib mod_mult_eq mod_mult_self1)\n  also have \"... = ((a mod n) * (b mod n)) mod n\"\n  proof -\n    have \"((a mod n) * (b div n) * n) mod n = 0\" by (simp add: mod_mult_self1)\n    have \"((b mod n) * (a div n) * n) mod n = 0\" by (simp add: mod_mult_self1)\n    have \"((a div n) * (b div n) * n * n) mod n = 0\" by (simp add: mod_mult_self1)\n    thus ?thesis by auto\n  qed\n  finally show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "antilogarithm_identity": {"skill_name": "antilogarithm_identity", "marker": "lemma antilogarithm_identity:\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c\" by (simp add: assms)\n  then have \"b = a ^ c\" using log_def assms(1) assms(2) assms(3) \n    by (smt (verit) powr_log_cancel powr_realpow)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma antilogarithm_identity:\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c\" by (simp add: assms)\n  then have \"b = a ^ c\" using log_def assms(1) assms(2) assms(3) \n    by (smt (verit) powr_log_cancel powr_realpow)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV2": {"skill_name": "expand_squareV2", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" \n    by (simp add: algebra_simps)\n  also have \"... = a^2 + a*b + b*a + b^2\" \n    by sos\n  also have \"... = a^2 + 2*a*b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" \n    by (simp add: algebra_simps)\n  also have \"... = a^2 + a*b + b*a + b^2\" \n    by sos\n  also have \"... = a^2 + 2*a*b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV3": {"skill_name": "algebraic_expansionV3", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = (x * y - 1) * (x * y - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = (x^2 * y^2 + x^2 + y^2 + 1)\"\nproof -\n  have lhs: \"(x * y - 1)^2 + (x + y)^2 = (x * y - 1) * (x * y - 1) + (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2)\"\n    by sos\n  also have \"... = x^2 * y^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_polynomial_with_coefficients": {"skill_name": "expand_polynomial_with_coefficients", "marker": "lemma expand_polynomial_with_coefficients:\n  fixes x y c :: real\n  shows \"(c * (x + y))^2 = c^2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have lhs: \"(c * (x + y))^2 = (c * (x + y)) * (c * (x + y))\" \n    by sos\n  also have \"... = c * (x + y) * c * (x + y)\" \n    by simp\n  also have \"... = (c * c) * (x + y) * (x + y)\" \n    by (simp add: mult.commute)\n  also have \"... = c^2 * ((x + y) * (x + y))\" \n    by sos\n  also have \"... = c^2 * (x^2 + 2 * x * y + y^2)\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma expand_polynomial_with_coefficients:\n  fixes x y c :: real\n  shows \"(c * (x + y))^2 = c^2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have lhs: \"(c * (x + y))^2 = (c * (x + y)) * (c * (x + y))\" \n    by sos\n  also have \"... = c * (x + y) * c * (x + y)\" \n    by simp\n  also have \"... = (c * c) * (x + y) * (x + y)\" \n    by (simp add: mult.commute)\n  also have \"... = c^2 * ((x + y) * (x + y))\" \n    by sos\n  also have \"... = c^2 * (x^2 + 2 * x * y + y^2)\" \n    by sos\n  finally show ?thesis \n    by simp\nqed", "origin": "expand_polynomialV2", "update_count": 0}, "cancel_div_with_parameters": {"skill_name": "cancel_div_with_parameters", "marker": "theorem cancel_div_with_parameters:\n  fixes x a b c d :: real\n  assumes \"x > 0\" \"a + b / x = c\" \"d = c\"\n  shows \"a * x + b = d * x\"\n  using assms(3) cancel_div_generalized[of x a b c] by (metis assms(1) assms(2))", "description": "-", "full_code": "lemma cancel_div_generalized:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  from assms(2) have \"b / x = c - a\" \n    by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    using assms(1) by (auto simp: field_simps)\n  then have \"a * x + b = a * x + (c - a) * x\" \n    by simp\n  also have \"... = a * x + c * x - a * x\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed\n\ntheorem cancel_div_with_parameters:\n  fixes x a b c d :: real\n  assumes \"x > 0\" \"a + b / x = c\" \"d = c\"\n  shows \"a * x + b = d * x\"\n  using assms(3) cancel_div_generalized[of x a b c] by (metis assms(1) assms(2))", "origin": "cancel_divV6", "update_count": 0}, "algebraic_identity": {"skill_name": "algebraic_identity", "marker": "theorem algebraic_identity:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\n  using cancel_div_generalized[of x a b c] assms by simp", "description": "-", "full_code": "lemma cancel_div_generalized:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  from assms(2) have \"b / x = c - a\" \n    by (simp add: algebra_simps)\n  then have \"b = (c - a) * x\" \n    using assms(1) by (auto simp: field_simps)\n  then have \"a * x + b = a * x + (c - a) * x\" \n    by simp\n  also have \"... = a * x + c * x - a * x\" \n    by (simp add: algebra_simps)\n  finally show ?thesis \n    by simp\nqed\n\ntheorem algebraic_identity:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\n  using cancel_div_generalized[of x a b c] assms by simp", "origin": "cancel_divV6", "update_count": 0}, "sum_of_squares_non_negative_general_v3": {"skill_name": "sum_of_squares_non_negative_general_v3", "marker": "lemma sum_of_squares_non_negative_general_v3:\n  fixes xs :: \"real list\"\n  assumes \"xs \\<noteq> []\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by simp\n  thus ?thesis using assms by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_general_v3:\n  fixes xs :: \"real list\"\n  assumes \"xs \\<noteq> []\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by simp\n  thus ?thesis using assms by (simp add: sum_nonneg)\nqed", "origin": "sum_of_squares_non_negative_general_v2", "update_count": 0}, "minimum_value_expressionV7": {"skill_name": "minimum_value_expressionV7", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  let ?expr = \"(x * y - 1)^2 + (x + y)^2\"\n  have \"?expr >= 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then have \"1 \\<le> ?expr\" \n    by sos\n  thus ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  let ?expr = \"(x * y - 1)^2 + (x + y)^2\"\n  have \"?expr >= 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"?expr = 0\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  have \"?expr = 1\" if \"x * y = 1\" and \"x + y = 0\" \n    for x y :: real using that\n    by sos\n  then have \"1 \\<le> ?expr\" \n    by sos\n  thus ?thesis \n    by auto\nqed", "origin": "minimum_value_expressionV6", "update_count": 0}, "non_negative_sum_of_squaresV2": {"skill_name": "non_negative_sum_of_squaresV2", "marker": "lemma non_negative_sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  then show \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  then show \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_expressionV6", "update_count": 0}, "minimum_value_of_squaresV9": {"skill_name": "minimum_value_of_squaresV9", "marker": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "minimum_value_expressionV6", "update_count": 0}, "log_base_to_power_equals_exponent": {"skill_name": "log_base_to_power_equals_exponent", "marker": "lemma log_base_to_power_equals_exponent:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have log_a_a: \"log a a = 1\"\n    using assms by auto\n  have \"log a (a^n) = n * log a a\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have \"log a (a^n) = n * 1\"\n    using log_a_a by simp\n  thus ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma log_base_to_power_equals_exponent:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have log_a_a: \"log a a = 1\"\n    using assms by auto\n  have \"log a (a^n) = n * log a a\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have \"log a (a^n) = n * 1\"\n    using log_a_a by simp\n  thus ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "log_base_to_power_equals_exponentV2": {"skill_name": "log_base_to_power_equals_exponentV2", "marker": "lemma log_base_to_power_equals_exponent:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have log_a_a: \"log a a = 1\"\n    using assms by (simp add: log_def)\n  have log_power_identity: \"log a (a^n) = n * log a a\"\n    by (simp add: log_nat_power[of a a n] assms)\n  have \"log a (a^n) = n * log a a\"\n    by (simp add: log_power_identity)\n  then show ?thesis using log_a_a by simp\nqed", "description": "-", "full_code": "lemma log_base_to_power_equals_exponent:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have log_a_a: \"log a a = 1\"\n    using assms by (simp add: log_def)\n  have log_power_identity: \"log a (a^n) = n * log a a\"\n    by (simp add: log_nat_power[of a a n] assms)\n  have \"log a (a^n) = n * log a a\"\n    by (simp add: log_power_identity)\n  then show ?thesis using log_a_a by simp\nqed", "origin": "do_request", "update_count": 0}, "logarithm_base_identity_generalV2": {"skill_name": "logarithm_base_identity_generalV2", "marker": "lemma logarithm_base_identity_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log a b = log a (b^1)\"\nproof -\n  have \"log a b = log a (b^1)\" by auto\n  then show ?thesis using assms by auto\nqed", "description": "-", "full_code": "lemma logarithm_base_identity_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\"\n  shows \"log a b = log a (b^1)\"\nproof -\n  have \"log a b = log a (b^1)\" by auto\n  then show ?thesis using assms by auto\nqed", "origin": "logarithm_base_identity", "update_count": 0}, "min_sum_of_squaresV3": {"skill_name": "min_sum_of_squaresV3", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> a^2\" using assms(1) by simp\n  have \"0 \\<le> b^2\" using assms(2) by simp\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> a^2\" using assms(1) by simp\n  have \"0 \\<le> b^2\" using assms(2) by simp\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "nonneg_sum": {"skill_name": "nonneg_sum", "marker": "lemma nonneg_sum:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"a + b \\<ge> 0\"\nproof -\n  have \"a + b = a + b\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by auto\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma nonneg_sum:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"a + b \\<ge> 0\"\nproof -\n  have \"a + b = a + b\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by auto\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "min_sum_of_squaresV4": {"skill_name": "min_sum_of_squaresV4", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 + b^2 = a^2 + b^2\"\n    by simp\n  also have \"... \\<ge> 0 + 0\"\n    using assms by auto\n  finally show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 + b^2 = a^2 + b^2\"\n    by simp\n  also have \"... \\<ge> 0 + 0\"\n    using assms by auto\n  finally show ?thesis \n    by auto\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "min_sum_of_squaresV5": {"skill_name": "min_sum_of_squaresV5", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  from assms have \"0 \\<le> a^2\" and \"0 \\<le> b^2\" by simp_all\n  thus ?thesis using nonneg_sum by auto\nqed", "description": "-", "full_code": "lemma nonneg_sum:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"a + b \\<ge> 0\"\nproof -\n  have \"a + b = a + b\"\n    by simp\n  also have \"... \\<ge> 0 + 0\"\n    using assms by auto\n  finally show ?thesis \n    by (metis add_nonneg_nonneg assms(1) assms(2))\nqed\n\nlemma min_sum_of_squares:\n  fixes a b :: real\n  assumes \"a^2 \\<ge> 0\" \"b^2 \\<ge> 0\"\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  from assms have \"0 \\<le> a^2\" and \"0 \\<le> b^2\" by simp_all\n  thus ?thesis using nonneg_sum by auto\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "logarithm_conversion": {"skill_name": "logarithm_conversion", "marker": "lemma logarithm_conversion:\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c\" by (rule assms(4))\n  then show ?thesis by (metis assms(1) assms(2) assms(3) powr_log_cancel powr_realpow)\nqed", "description": "-", "full_code": "lemma logarithm_conversion:\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c\" by (rule assms(4))\n  then show ?thesis by (metis assms(1) assms(2) assms(3) powr_log_cancel powr_realpow)\nqed", "origin": "cal_log_value", "update_count": 0}, "logarithm_base_identity_multi": {"skill_name": "logarithm_base_identity_multi", "marker": "lemma logarithm_base_identity_multi:\n  fixes a :: real and b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\"\n  shows \"log a (b * c) = log a b + log a c\"\nproof -\n  have \"log a (b * c) = log a b + log a c\"\n    using assms by (metis log_mult)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma logarithm_base_identity_multi:\n  fixes a :: real and b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\"\n  shows \"log a (b * c) = log a b + log a c\"\nproof -\n  have \"log a (b * c) = log a b + log a c\"\n    using assms by (metis log_mult)\n  then show ?thesis by auto\nqed", "origin": "logarithm_base_identity_generalV2", "update_count": 0}, "logarithm_base_identity_general_n": {"skill_name": "logarithm_base_identity_general_n", "marker": "lemma logarithm_base_identity_general_n:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"n > 0\"\n  shows \"log a b = log a (b^n) / n\"\nproof -\n  have \"log a b = log a (b^n) / n\"\n  proof -\n    have \"log a (b^n) = n * log a b\" by (metis assms(3) log_nat_power)\n    thus ?thesis using assms by (simp add: divide_simps)\n  qed\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma logarithm_base_identity_general_n:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"n > 0\"\n  shows \"log a b = log a (b^n) / n\"\nproof -\n  have \"log a b = log a (b^n) / n\"\n  proof -\n    have \"log a (b^n) = n * log a b\" by (metis assms(3) log_nat_power)\n    thus ?thesis using assms by (simp add: divide_simps)\n  qed\n  thus ?thesis by auto\nqed", "origin": "logarithm_base_identity_generalV2", "update_count": 0}, "combine_like_terms": {"skill_name": "combine_like_terms", "marker": "lemma combine_like_terms:\n  fixes a b c d :: real\n  shows \"a + b + c + d = (a + c) + (b + d)\"\nproof -\n  have \"a + b + c + d = (a + c) + (b + d)\" by (simp add: add.assoc)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma combine_like_terms:\n  fixes a b c d :: real\n  shows \"a + b + c + d = (a + c) + (b + d)\"\nproof -\n  have \"a + b + c + d = (a + c) + (b + d)\" by (simp add: add.assoc)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_of_squares_generalizedV2": {"skill_name": "minimum_value_of_squares_generalizedV2", "marker": "lemma minimum_value_of_squares_generalized:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x * y * z)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y * z)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x * y * z)^2 \\<ge> 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_generalized:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x * y * z)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y * z)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x * y * z)^2 \\<ge> 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squares_extended", "update_count": 0}, "minimum_value_of_squares_2d": {"skill_name": "minimum_value_of_squares_2d", "marker": "lemma minimum_value_of_squares_2d:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_2d:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squares_extended", "update_count": 0}, "minimum_value_of_squares_combined": {"skill_name": "minimum_value_of_squares_combined", "marker": "lemma minimum_value_of_squares_combined:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x + y + z)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"z^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x + y + z)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x + y + z)^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma minimum_value_of_squares_combined:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x + y + z)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"z^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(y * z)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(z * x)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x + y + z)^2 >= 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + z^2 + (x * y)^2 + (y * z)^2 + (z * x)^2 + (x + y + z)^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "minimum_value_of_squares_extended", "update_count": 0}, "logarithm_base_identity_multi_extended": {"skill_name": "logarithm_base_identity_multi_extended", "marker": "lemma logarithm_base_identity_multi_extended:\n  fixes a b c d :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\" \"d > 0\" \"d \\<noteq> 1\"\n  shows \"log a (b * c * d) = log a b + log a c + log a d\"\nproof -\n  have \"log a (b * c * d) = log a ((b * c) * d)\"\n    by simp\n  also have \"... = log a (b * c) + log a d\"\n    using assms by (metis log_mult mult.assoc mult_pos_pos)\n  also have \"... = log a b + log a c + log a d\"\n    using assms by (metis log_mult)\n  finally show ?thesis by (metis \\<open>log a (b * c * d) = log a (b * c) + log a d\\<close> ab_semigroup_mult_class.mult_ac(1) assms(1) assms(2) assms(3) assms(5) log_mult)\nqed", "description": "-", "full_code": "lemma logarithm_base_identity_multi_extended:\n  fixes a b c d :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\" \"b \\<noteq> 1\" \"c > 0\" \"c \\<noteq> 1\" \"d > 0\" \"d \\<noteq> 1\"\n  shows \"log a (b * c * d) = log a b + log a c + log a d\"\nproof -\n  have \"log a (b * c * d) = log a ((b * c) * d)\"\n    by simp\n  also have \"... = log a (b * c) + log a d\"\n    using assms by (metis log_mult mult.assoc mult_pos_pos)\n  also have \"... = log a b + log a c + log a d\"\n    using assms by (metis log_mult)\n  finally show ?thesis by (metis \\<open>log a (b * c * d) = log a (b * c) + log a d\\<close> ab_semigroup_mult_class.mult_ac(1) assms(1) assms(2) assms(3) assms(5) log_mult)\nqed", "origin": "logarithm_base_identity_multi", "update_count": 0}, "combine_like_termsV2": {"skill_name": "combine_like_termsV2", "marker": "lemma combine_like_terms:\n  fixes a b c d :: real\n  shows \"a + b + c + d = (a + c) + (b + d)\"\nproof -\n  have \"a + b + c + d = (a + c) + (b + d)\"\n  proof -\n    have \"a + b + c + d = a + (b + c + d)\" by auto\n    also have \"... = a + ((b + d) + c)\" by auto\n    also have \"... = (a + c) + (b + d)\" by auto\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma combine_like_terms:\n  fixes a b c d :: real\n  shows \"a + b + c + d = (a + c) + (b + d)\"\nproof -\n  have \"a + b + c + d = (a + c) + (b + d)\"\n  proof -\n    have \"a + b + c + d = a + (b + c + d)\" by auto\n    also have \"... = a + ((b + d) + c)\" by auto\n    also have \"... = (a + c) + (b + d)\" by auto\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}}