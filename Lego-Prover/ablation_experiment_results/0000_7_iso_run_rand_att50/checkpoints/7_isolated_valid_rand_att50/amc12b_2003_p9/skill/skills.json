{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "solve_linear_equation_general": {"skill_name": "solve_linear_equation_general", "marker": "lemma solve_linear_equation_general:\n  fixes x a b c :: real\n  assumes \"x > 0\"\n  assumes \"a + b / x = c\"\n  shows \"b = x * (c - a)\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b / x = c - a\" by simp\n  then have \"b = x * (c - a)\" using assms(1) by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma solve_linear_equation_general:\n  fixes x a b c :: real\n  assumes \"x > 0\"\n  assumes \"a + b / x = c\"\n  shows \"b = x * (c - a)\"\nproof -\n  have \"a + b / x = c\" using assms(2) by simp\n  then have \"b / x = c - a\" by simp\n  then have \"b = x * (c - a)\" using assms(1) by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "origin": "cancle_div", "update_count": 0}, "mod_add_power_variable": {"skill_name": "mod_add_power_variable", "marker": "lemma mod_add_power_variable:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\" \"d > 0\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\"\n    by (metis (no_types, lifting) mod_add_left_eq)\n  also have \"... = (((a + b)^c) mod n + d) mod n\"\n    using mod_add_power_general[of x n a b c] by (smt (verit) add.commute assms(4) mod_add_cong mod_add_right_eq power_mod)\n  finally show ?thesis by presburger\nqed", "description": "-", "full_code": "lemma mod_add_power_general:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed\n\nlemma mod_add_power_variable:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\" \"d > 0\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\"\n    by (metis (no_types, lifting) mod_add_left_eq)\n  also have \"... = (((a + b)^c) mod n + d) mod n\"\n    using mod_add_power_general[of x n a b c] by (smt (verit) add.commute assms(4) mod_add_cong mod_add_right_eq power_mod)\n  finally show ?thesis by presburger\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add_power_with_var": {"skill_name": "mod_add_power_with_var", "marker": "lemma mod_add_power_with_var:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\"\n    by presburger\n  also have \"... = ((a + b)^c + d) mod n\"\n    using mod_add_power_general[of x n a b c] by (smt (verit) assms(1) assms(2) assms(3) assms(5) mod_add_left_eq mod_add_power_general)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power_general:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed\n\nlemma mod_add_power_with_var:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x + b)^c mod n) + d) mod n\"\n    by presburger\n  also have \"... = ((a + b)^c + d) mod n\"\n    using mod_add_power_general[of x n a b c] by (smt (verit) assms(1) assms(2) assms(3) assms(5) mod_add_left_eq mod_add_power_general)\n  finally show ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "reciprocal_property": {"skill_name": "reciprocal_property", "marker": "lemma reciprocal_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using assms by (simp)", "description": "-", "full_code": "lemma reciprocal_property:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using assms by (simp)", "origin": "a_times_vera", "update_count": 0}, "nonzero_times_reciprocal_generalized": {"skill_name": "nonzero_times_reciprocal_generalized", "marker": "lemma nonzero_times_reciprocal_generalized:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using nonzero_times_reciprocal assms by simp", "description": "-", "full_code": "lemma nonzero_times_reciprocal:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma nonzero_times_reciprocal_generalized:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using nonzero_times_reciprocal assms by simp", "origin": "a_times_vera", "update_count": 0}, "reciprocal_property_with_b": {"skill_name": "reciprocal_property_with_b", "marker": "lemma reciprocal_property_with_b:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) * (1 / (a * b)) = 1\"\n  using assms by (simp add: field_simps)", "description": "-", "full_code": "lemma reciprocal_property_with_b:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) * (1 / (a * b)) = 1\"\n  using assms by (simp add: field_simps)", "origin": "reciprocal_property", "update_count": 0}, "reciprocal_nonzero": {"skill_name": "reciprocal_nonzero", "marker": "lemma reciprocal_nonzero:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"1 / a = (1 * a) / (a * a)\"\nproof -\n  have \"1 / a = (1 * a) / (a * a)\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma reciprocal_nonzero:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"1 / a = (1 * a) / (a * a)\"\nproof -\n  have \"1 / a = (1 * a) / (a * a)\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "origin": "reciprocal_property", "update_count": 0}, "linear_function_difference": {"skill_name": "linear_function_difference", "marker": "lemma linear_function_difference:\n  fixes m c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = m * x + c\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 10 * m\"\nproof -\n  have f_6: \"f 6 = m * 6 + c\" using assms(1) by simp\n  have f_2: \"f 2 = m * 2 + c\" using assms(1) by simp\n  have \"f 6 - f 2 = (m * 6 + c) - (m * 2 + c)\"\n    using f_6 f_2 by simp\n  then have \"f 6 - f 2 = m * 6 - m * 2 + c - c\" by simp\n  then have \"f 6 - f 2 = m * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * m\" using assms(2) by simp\n  then have \"4 * m = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"m = 12 / 4\" by (simp add: field_simps)\n  then have \"m = 3\" by simp\n  show ?thesis\n  proof -\n    have f_12: \"f 12 = m * 12 + c\" using assms(1) by simp\n    have \"f 12 - f 2 = (m * 12 + c) - (m * 2 + c)\"\n      using f_12 f_2 by simp\n    then have \"f 12 - f 2 = m * 12 - m * 2 + c - c\"\n      by simp\n    then have \"f 12 - f 2 = m * (12 - 2)\" by (simp add: algebra_simps)\n    then show ?thesis by (simp add: algebra_simps)\n  qed\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes m c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = m * x + c\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 10 * m\"\nproof -\n  have f_6: \"f 6 = m * 6 + c\" using assms(1) by simp\n  have f_2: \"f 2 = m * 2 + c\" using assms(1) by simp\n  have \"f 6 - f 2 = (m * 6 + c) - (m * 2 + c)\"\n    using f_6 f_2 by simp\n  then have \"f 6 - f 2 = m * 6 - m * 2 + c - c\" by simp\n  then have \"f 6 - f 2 = m * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * m\" using assms(2) by simp\n  then have \"4 * m = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"m = 12 / 4\" by (simp add: field_simps)\n  then have \"m = 3\" by simp\n  show ?thesis\n  proof -\n    have f_12: \"f 12 = m * 12 + c\" using assms(1) by simp\n    have \"f 12 - f 2 = (m * 12 + c) - (m * 2 + c)\"\n      using f_12 f_2 by simp\n    then have \"f 12 - f 2 = m * 12 - m * 2 + c - c\"\n      by simp\n    then have \"f 12 - f 2 = m * (12 - 2)\" by (simp add: algebra_simps)\n    then show ?thesis by (simp add: algebra_simps)\n  qed\nqed", "origin": "do_request", "update_count": 0}, "linear_function_differenceV2": {"skill_name": "linear_function_differenceV2", "marker": "lemma linear_function_difference:\n  fixes m c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = m * x + c\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 10 * m\"\nproof -\n  have f6: \"f 6 = m * 6 + c\" using assms(1) by simp\n  have f2: \"f 2 = m * 2 + c\" using assms(1) by simp\n  from assms(2) have \"f 6 - f 2 = 12\" by simp\n  then have \"m * 6 + c - (m * 2 + c) = 12\" using f6 f2 by simp\n  hence \"m * 6 - m * 2 = 12\" by simp\n  thus \"f 12 - f 2 = 10 * m\" \n  proof -\n    have f12: \"f 12 = m * 12 + c\" using assms(1) by simp\n    have \"f 12 - f 2 = (m * 12 + c) - (m * 2 + c)\"\n      using f12 f2 by simp\n    thus ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes m c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = m * x + c\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 10 * m\"\nproof -\n  have f6: \"f 6 = m * 6 + c\" using assms(1) by simp\n  have f2: \"f 2 = m * 2 + c\" using assms(1) by simp\n  from assms(2) have \"f 6 - f 2 = 12\" by simp\n  then have \"m * 6 + c - (m * 2 + c) = 12\" using f6 f2 by simp\n  hence \"m * 6 - m * 2 = 12\" by simp\n  thus \"f 12 - f 2 = 10 * m\" \n  proof -\n    have f12: \"f 12 = m * 12 + c\" using assms(1) by simp\n    have \"f 12 - f 2 = (m * 12 + c) - (m * 2 + c)\"\n      using f12 f2 by simp\n    thus ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "nonzero_times_reciprocal_extended": {"skill_name": "nonzero_times_reciprocal_extended", "marker": "lemma nonzero_times_reciprocal_extended:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms(1) by (simp add: assms(1))\n  moreover have \"b * (1 / b) = 1\" using assms(2) by (simp add: assms(2))\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonzero_times_reciprocal_extended:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms(1) by (simp add: assms(1))\n  moreover have \"b * (1 / b) = 1\" using assms(2) by (simp add: assms(2))\n  ultimately show ?thesis by simp\nqed", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "nonzero_sum_reciprocal": {"skill_name": "nonzero_sum_reciprocal", "marker": "lemma nonzero_sum_reciprocal:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"1 / a + 1 / b = (a + b) / (a * b)\"\nproof -\n  have \"1 / a + 1 / b = b/(a*b) + a/(a*b)\" by (metis assms(1) assms(2) nonzero_divide_mult_cancel_left nonzero_divide_mult_cancel_right)\n  also have \"... = (a + b) / (a * b)\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonzero_sum_reciprocal:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"1 / a + 1 / b = (a + b) / (a * b)\"\nproof -\n  have \"1 / a + 1 / b = b/(a*b) + a/(a*b)\" by (metis assms(1) assms(2) nonzero_divide_mult_cancel_left nonzero_divide_mult_cancel_right)\n  also have \"... = (a + b) / (a * b)\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "reciprocal_and_product_generalized": {"skill_name": "reciprocal_and_product_generalized", "marker": "lemma reciprocal_and_product_generalized:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\n  using reciprocal_and_product assms by simp", "description": "-", "full_code": "lemma reciprocal_and_product:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\n  by (metis assms(1) assms(2) div_by_1 divide_cancel_right divide_divide_eq_right divide_eq_0_iff divide_eq_eq_1 leD le_numeral_extra(3) mult.right_neutral mult_cancel_right2 right_inverse_eq times_divide_eq_right zero_neq_one)\n\nlemma reciprocal_and_product_generalized:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\n  using reciprocal_and_product assms by simp", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "reciprocal_and_product": {"skill_name": "reciprocal_and_product", "marker": "lemma reciprocal_and_product:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\n  by (metis assms(1) assms(2) div_by_1 divide_cancel_right divide_divide_eq_right divide_eq_0_iff divide_eq_eq_1 leD le_numeral_extra(3) mult.right_neutral mult_cancel_right2 right_inverse_eq times_divide_eq_right zero_neq_one)", "description": "-", "full_code": "lemma reciprocal_and_product:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\n  by (metis assms(1) assms(2) div_by_1 divide_cancel_right divide_divide_eq_right divide_eq_0_iff divide_eq_eq_1 leD le_numeral_extra(3) mult.right_neutral mult_cancel_right2 right_inverse_eq times_divide_eq_right zero_neq_one)", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "product_of_reciprocals": {"skill_name": "product_of_reciprocals", "marker": "lemma product_of_reciprocals:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(1 / a) * (1 / b) = 1 / (a * b)\"\nproof -\n  have \"(1 / a) * (1 / b) = 1 / (a * b)\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma product_of_reciprocals:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(1 / a) * (1 / b) = 1 / (a * b)\"\nproof -\n  have \"(1 / a) * (1 / b) = 1 / (a * b)\" by (simp add: assms)\n  thus ?thesis by simp\nqed", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "nonzero_times_reciprocal_extendedV2": {"skill_name": "nonzero_times_reciprocal_extendedV2", "marker": "lemma nonzero_times_reciprocal_extended:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms(1) by (simp)\n  have \"b * (1 / b) = 1\" using assms(2) by (simp)\n  thus ?thesis by (metis \\<open>a * (1 / a) = 1\\<close>)\nqed", "description": "-", "full_code": "lemma nonzero_times_reciprocal_extended:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1 \\<and> b * (1 / b) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms(1) by (simp)\n  have \"b * (1 / b) = 1\" using assms(2) by (simp)\n  thus ?thesis by (metis \\<open>a * (1 / a) = 1\\<close>)\nqed", "origin": "nonzero_times_reciprocal_generalized", "update_count": 0}, "product_of_reciprocals_general": {"skill_name": "product_of_reciprocals_general", "marker": "lemma product_of_reciprocals_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"c > 0\"\n  shows \"(1 / a) * (1 / b) * (1 / c) = 1 / (a * b * c)\"\nproof -\n  have \"(1 / a) * (1 / b) * (1 / c) = (1 / (a * b)) * (1 / c)\"\n    by (simp add: assms)\n  also have \"... = 1 / (a * b * c)\"\n    by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma product_of_reciprocals_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"c > 0\"\n  shows \"(1 / a) * (1 / b) * (1 / c) = 1 / (a * b * c)\"\nproof -\n  have \"(1 / a) * (1 / b) * (1 / c) = (1 / (a * b)) * (1 / c)\"\n    by (simp add: assms)\n  also have \"... = 1 / (a * b * c)\"\n    by auto\n  finally show ?thesis by simp\nqed", "origin": "product_of_reciprocals", "update_count": 0}, "reciprocal_sum_inequality": {"skill_name": "reciprocal_sum_inequality", "marker": "lemma reciprocal_sum_inequality:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(1/a) + (1/b) = (b + a) / (a * b)\"\nproof -\n  have \"(1/a) + (1/b) = (b + a) / (a * b)\"\n    using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma reciprocal_sum_inequality:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(1/a) + (1/b) = (b + a) / (a * b)\"\nproof -\n  have \"(1/a) + (1/b) = (b + a) / (a * b)\"\n    using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "product_of_reciprocals", "update_count": 0}, "logarithm_power_rule": {"skill_name": "logarithm_power_rule", "marker": "lemma logarithm_power_rule:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\"\n    using log_nat_power[of a a n] by (simp add: assms)\n  thus ?thesis using assms(1) assms(2) by simp\nqed", "description": "-", "full_code": "lemma logarithm_power_rule:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have \"log a (a^n) = n * log a a\"\n    using log_nat_power[of a a n] by (simp add: assms)\n  thus ?thesis using assms(1) assms(2) by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "linear_function_differenceV3": {"skill_name": "linear_function_differenceV3", "marker": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "data/full_data/debug/valid_rand/amc12b_2003_p9.json_v2", "update_count": -1}, "linear_function_difference_multi": {"skill_name": "linear_function_difference_multi", "marker": "lemma linear_function_difference_multi:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\n  and \"\\<forall> z' y'. f z' - f y' = a * (z' - y')\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  have \"\\<forall> z' y'. f z' - f y' = (a * z' + b) - (a * y' + b)\"\n    using assms(1) by simp\n  then show \"\\<forall> z' y'. f z' - f y' = a * (z' - y')\" by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_multi:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\n  and \"\\<forall> z' y'. f z' - f y' = a * (z' - y')\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  have \"\\<forall> z' y'. f z' - f y' = (a * z' + b) - (a * y' + b)\"\n    using assms(1) by simp\n  then show \"\\<forall> z' y'. f z' - f y' = a * (z' - y')\" by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "algebraic_manipulation": {"skill_name": "algebraic_manipulation", "marker": "lemma algebraic_manipulation:\n  fixes a b c d :: real\n  shows \"(a + b) - (c + d) = (a - c) + (b - d)\"\nproof -\n  have \"(a + b) - (c + d) = a + b - c - d\" by simp\n  also have \"... = (a - c) + (b - d)\" by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma algebraic_manipulation:\n  fixes a b c d :: real\n  shows \"(a + b) - (c + d) = (a - c) + (b - d)\"\nproof -\n  have \"(a + b) - (c + d) = a + b - c - d\" by simp\n  also have \"... = (a - c) + (b - d)\" by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "amc12b_2003_p9": {"skill_name": "amc12b_2003_p9", "marker": "theorem amc12b_2003_p9:\n  fixes a b ::real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \" f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "", "full_code": "theorem amc12b_2003_p9:\n  fixes a b ::real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \" f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "data/full_data/debug/valid_rand/amc12b_2003_p9.json_v3", "update_count": -1}, "linear_function_relation": {"skill_name": "linear_function_relation", "marker": "lemma linear_function_relation:\n  fixes a b x y :: real\n  assumes \"f x = a * x + b\" \n    and \"f y = a * y + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_relation:\n  fixes a b x y :: real\n  assumes \"f x = a * x + b\" \n    and \"f y = a * y + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_differenceV4": {"skill_name": "linear_function_differenceV4", "marker": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis \n  proof -\n    have \"f z - f y = a * z - a * y\" by (smt (verit) \\<open>f z - f y = a * z + b - (a * y + b)\\<close>)\n    thus ?thesis by (simp add: field_simps)\n  qed\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis \n  proof -\n    have \"f z - f y = a * z - a * y\" by (smt (verit) \\<open>f z - f y = a * z + b - (a * y + b)\\<close>)\n    thus ?thesis by (simp add: field_simps)\n  qed\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_slope": {"skill_name": "linear_function_slope", "marker": "lemma linear_function_slope:\n  fixes a b :: real\n  assumes \"\\<forall>x. f x = a * x + b\" \"x \\<noteq> y\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x = a * x + b\" and \"f y = a * y + b\" using assms by auto\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_slope:\n  fixes a b :: real\n  assumes \"\\<forall>x. f x = a * x + b\" \"x \\<noteq> y\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x = a * x + b\" and \"f y = a * y + b\" using assms by auto\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_differenceV5": {"skill_name": "linear_function_differenceV5", "marker": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes h0: \"\\<forall>x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" \n    using h0 by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes h0: \"\\<forall>x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" \n    using h0 by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9V2": {"skill_name": "amc12b_2003_p9V2", "marker": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed\n\ntheorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_v2": {"skill_name": "amc12b_2003_p9_v2", "marker": "theorem amc12b_2003_p9_v2:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have f6_f2: \"f 6 - f 2 = a * (6 - 2)\" using assms(1) by (simp)\n  then have \"f 6 - f 2 = 4 * a\" by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have f12_f2: \"f 12 - f 2 = a * (12 - 2)\" using assms(1) by (simp)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_v2:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have f6_f2: \"f 6 - f 2 = a * (6 - 2)\" using assms(1) by (simp)\n  then have \"f 6 - f 2 = 4 * a\" by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have f12_f2: \"f 12 - f 2 = a * (12 - 2)\" using assms(1) by (simp)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_evolved": {"skill_name": "amc12b_2003_p9_evolved", "marker": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\" by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\" by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_differenceV6": {"skill_name": "linear_function_differenceV6", "marker": "theorem linear_function_difference:\n  fixes a :: \"real\" and b :: \"real\" and f :: \"real list \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * (x ! 0) + b * (x ! 1)\"\n    and \"f [6, 2] - f [2, 2] = 12\"\n  shows \"f [12, 2] - f [2, 2] = 30\"\nproof -\n  have \"f [6, 2] - f [2, 2] = (a * 6 + b * 2) - (a * 2 + b * 2)\"\n    using assms(1) by simp\n  then have \"f [6, 2] - f [2, 2] = (a * 6 + b * 2) - (a * 2 + b * 2)\"\n    by simp\n  then have \"f [6, 2] - f [2, 2] = a * 6 - a * 2\"\n    by (simp add: algebra_simps)\n  then have \"f [6, 2] - f [2, 2] = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f [6, 2] - f [2, 2] = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f [12, 2] - f [2, 2] = (a * 12 + b * 2) - (a * 2 + b * 2)\"\n    using assms(1) by simp\n  then have \"f [12, 2] - f [2, 2] = a * 12 - a * 2\"\n    by simp\n  then have \"f [12, 2] - f [2, 2] = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f [12, 2] - f [2, 2] = a * 10\" by simp\n  then have \"f [12, 2] - f [2, 2] = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem linear_function_difference:\n  fixes a :: \"real\" and b :: \"real\" and f :: \"real list \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * (x ! 0) + b * (x ! 1)\"\n    and \"f [6, 2] - f [2, 2] = 12\"\n  shows \"f [12, 2] - f [2, 2] = 30\"\nproof -\n  have \"f [6, 2] - f [2, 2] = (a * 6 + b * 2) - (a * 2 + b * 2)\"\n    using assms(1) by simp\n  then have \"f [6, 2] - f [2, 2] = (a * 6 + b * 2) - (a * 2 + b * 2)\"\n    by simp\n  then have \"f [6, 2] - f [2, 2] = a * 6 - a * 2\"\n    by (simp add: algebra_simps)\n  then have \"f [6, 2] - f [2, 2] = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f [6, 2] - f [2, 2] = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f [12, 2] - f [2, 2] = (a * 12 + b * 2) - (a * 2 + b * 2)\"\n    using assms(1) by simp\n  then have \"f [12, 2] - f [2, 2] = a * 12 - a * 2\"\n    by simp\n  then have \"f [12, 2] - f [2, 2] = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f [12, 2] - f [2, 2] = a * 10\" by simp\n  then have \"f [12, 2] - f [2, 2] = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_evolvedV2": {"skill_name": "amc12b_2003_p9_evolvedV2", "marker": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_generalized": {"skill_name": "linear_function_generalized", "marker": "lemma linear_function_generalized:\n  fixes m n b x1 x2 y1 y2 :: real\n  assumes \"\\<forall>x y. f x y = m * x + n * y + b\"\n  shows \"f x1 y1 - f x2 y2 = m * (x1 - x2) + n * (y1 - y2)\"\nproof -\n  have \"f x1 y1 - f x2 y2 = (m * x1 + n * y1 + b) - (m * x2 + n * y2 + b)\"\n    using assms by simp\n  thus ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma linear_function_generalized:\n  fixes m n b x1 x2 y1 y2 :: real\n  assumes \"\\<forall>x y. f x y = m * x + n * y + b\"\n  shows \"f x1 y1 - f x2 y2 = m * (x1 - x2) + n * (y1 - y2)\"\nproof -\n  have \"f x1 y1 - f x2 y2 = (m * x1 + n * y1 + b) - (m * x2 + n * y2 + b)\"\n    using assms by simp\n  thus ?thesis by (simp add: algebra_simps)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_generalized": {"skill_name": "amc12b_2003_p9_generalized", "marker": "theorem amc12b_2003_p9_generalized:\n  fixes a b c :: real\n  defines \"f \\<equiv> (\\<lambda>x. a * x + b)\"\n  assumes \"f 6 - f 2 = c\"\n  shows \"f 12 - f 2 = (c / 4) * 10\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using `f \\<equiv> (\\<lambda>x. a * x + b)` by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"4 * a = c\" using assms by simp\n  then have \"a = c / 4\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using `f \\<equiv> (\\<lambda>x. a * x + b)` by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\" by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = c / 4` by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = 3` by simp\nqed\n\ntheorem amc12b_2003_p9_generalized:\n  fixes a b c :: real\n  defines \"f \\<equiv> (\\<lambda>x. a * x + b)\"\n  assumes \"f 6 - f 2 = c\"\n  shows \"f 12 - f 2 = (c / 4) * 10\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using `f \\<equiv> (\\<lambda>x. a * x + b)` by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: algebra_simps)\n  then have \"4 * a = c\" using assms by simp\n  then have \"a = c / 4\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using `f \\<equiv> (\\<lambda>x. a * x + b)` by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\" by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then show ?thesis using `a = c / 4` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_generalized": {"skill_name": "amc12b_generalized", "marker": "theorem amc12b_generalized:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 - f x2 = d\"  \n  shows \"f x3 - f x2 = (x3 - x2) * a\"  \nproof -\n  have \"f x1 - f x2 = (a * x1 + b) - (a * x2 + b)\"\n    using assms(1) by simp\n  then have \"f x1 - f x2 = a * x1 - a * x2\"\n    by simp\n  then have \"f x1 - f x2 = a * (x1 - x2)\"\n    by (simp add: algebra_simps)\n  then have \"a * (x1 - x2) = d\" using assms(2) by simp\n  then have \"f x3 - f x2 = (a * x3 + b) - (a * x2 + b)\"\n    using assms(1) by simp\n  then have \"f x3 - f x2 = a * x3 - a * x2\"\n    by simp\n  then have \"f x3 - f x2 = a * (x3 - x2)\" by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem amc12b_generalized:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 - f x2 = d\"  \n  shows \"f x3 - f x2 = (x3 - x2) * a\"  \nproof -\n  have \"f x1 - f x2 = (a * x1 + b) - (a * x2 + b)\"\n    using assms(1) by simp\n  then have \"f x1 - f x2 = a * x1 - a * x2\"\n    by simp\n  then have \"f x1 - f x2 = a * (x1 - x2)\"\n    by (simp add: algebra_simps)\n  then have \"a * (x1 - x2) = d\" using assms(2) by simp\n  then have \"f x3 - f x2 = (a * x3 + b) - (a * x2 + b)\"\n    using assms(1) by simp\n  then have \"f x3 - f x2 = a * x3 - a * x2\"\n    by simp\n  then have \"f x3 - f x2 = a * (x3 - x2)\" by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_combination_difference": {"skill_name": "linear_combination_difference", "marker": "lemma linear_combination_difference:\n  fixes a1 a2 b1 b2 :: real and f1 f2 :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f1 x = a1 * x + b1\" \n    and \"\\<forall>x. f2 x = a2 * x + b2\" \n  shows \"f1 x - f2 y = a1 * x - a2 * y + (b1 - b2)\"\nproof -\n  have \"f1 x = a1 * x + b1\" \n    and \"f2 y = a2 * y + b2\" \n    using assms by auto\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_combination_difference:\n  fixes a1 a2 b1 b2 :: real and f1 f2 :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f1 x = a1 * x + b1\" \n    and \"\\<forall>x. f2 x = a2 * x + b2\" \n  shows \"f1 x - f2 y = a1 * x - a2 * y + (b1 - b2)\"\nproof -\n  have \"f1 x = a1 * x + b1\" \n    and \"f2 y = a2 * y + b2\" \n    using assms by auto\n  then show ?thesis by simp\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_difference_with_param": {"skill_name": "linear_function_difference_with_param", "marker": "lemma linear_function_difference_with_param:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f c - f d = a * (c - d)\"\n  shows \"f e - f d = a * (e - d)\"\nproof -\n  have \"f e - f d = (a * e + b) - (a * d + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_with_param:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f c - f d = a * (c - d)\"\n  shows \"f e - f d = a * (e - d)\"\nproof -\n  have \"f e - f d = (a * e + b) - (a * d + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_differenceV7": {"skill_name": "linear_function_differenceV7", "marker": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then have \"f x - f y = a * x - a * y\" by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then have \"f x - f y = a * x - a * y\" by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9V3": {"skill_name": "amc12b_2003_p9V3", "marker": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_property assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_property assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "lemma linear_function_property:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then have \"f x - f y = a * x - a * y\" by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed\n\ntheorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_property assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_property assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9V4": {"skill_name": "amc12b_2003_p9V4", "marker": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed\n\ntheorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall>x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_properties": {"skill_name": "linear_function_properties", "marker": "lemma linear_function_properties:\n  fixes a b x y z :: real\n  assumes \"a \\<noteq> 0\"  \n    and \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y) \\<and> f z - f y = a * (z - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms(2) by simp\n  then have \"f x - f y = a * (x - y)\" by (auto simp: field_simps)\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(2) by simp\n  then have \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  thus ?thesis by (metis \\<open>f x - f y = a * (x - y)\\<close>)\nqed", "description": "-", "full_code": "lemma linear_function_properties:\n  fixes a b x y z :: real\n  assumes \"a \\<noteq> 0\"  \n    and \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y) \\<and> f z - f y = a * (z - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms(2) by simp\n  then have \"f x - f y = a * (x - y)\" by (auto simp: field_simps)\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(2) by simp\n  then have \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  thus ?thesis by (metis \\<open>f x - f y = a * (x - y)\\<close>)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_zero_at": {"skill_name": "linear_function_zero_at", "marker": "lemma linear_function_zero_at:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x0 = 0\"\n    and \"f x1 = 0\"\n    and \"x0 \\<noteq> x1\"\n  shows \"f (x0 + x1 - x) = 0\"\nproof -\n  let ?x = \"x0 + x1 - x\"\n  have \"f ?x = a * ?x + b\" using assms(1) by simp\n  also have \"... = a * (x0 + x1 - x) + b\" by (simp add: field_simps)\n  finally show ?thesis using assms(2) assms(3) by (smt (verit) \\<open>f (x0 + x1 - x) = a * (x0 + x1 - x) + b\\<close> add_right_imp_eq assms(1) assms(4) eq_add_iff2 mult_left_cancel)\nqed", "description": "-", "full_code": "lemma linear_function_zero_at:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x0 = 0\"\n    and \"f x1 = 0\"\n    and \"x0 \\<noteq> x1\"\n  shows \"f (x0 + x1 - x) = 0\"\nproof -\n  let ?x = \"x0 + x1 - x\"\n  have \"f ?x = a * ?x + b\" using assms(1) by simp\n  also have \"... = a * (x0 + x1 - x) + b\" by (simp add: field_simps)\n  finally show ?thesis using assms(2) assms(3) by (smt (verit) \\<open>f (x0 + x1 - x) = a * (x0 + x1 - x) + b\\<close> add_right_imp_eq assms(1) assms(4) eq_add_iff2 mult_left_cancel)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_value": {"skill_name": "linear_function_value", "marker": "lemma linear_function_value:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x = a * x + b\"\n  shows \"f (y + z) = f y + f z - b\"\nproof -\n  have \"f (y + z) = a * (y + z) + b\" using assms(1) by simp\n  also have \"... = (a * y + b) + (a * z + b) - b\" using assms(2) by (auto simp: field_simps)\n  finally show ?thesis by (metis \\<open>a * (y + z) + b = a * y + b + (a * z + b) - b\\<close> \\<open>f (y + z) = a * (y + z) + b\\<close> assms(1) mult_delta_right)\nqed", "description": "-", "full_code": "lemma linear_function_value:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x = a * x + b\"\n  shows \"f (y + z) = f y + f z - b\"\nproof -\n  have \"f (y + z) = a * (y + z) + b\" using assms(1) by simp\n  also have \"... = (a * y + b) + (a * z + b) - b\" using assms(2) by (auto simp: field_simps)\n  finally show ?thesis by (metis \\<open>a * (y + z) + b = a * y + b + (a * z + b) - b\\<close> \\<open>f (y + z) = a * (y + z) + b\\<close> assms(1) mult_delta_right)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_value_at_difference": {"skill_name": "linear_function_value_at_difference", "marker": "lemma linear_function_value_at_difference:\n  fixes a b z y :: real\n  assumes h0: \"\\<And>x. f x = a * x + b\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using h0 by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_value_at_difference:\n  fixes a b z y :: real\n  assumes h0: \"\\<And>x. f x = a * x + b\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using h0 by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_value_difference": {"skill_name": "linear_function_value_difference", "marker": "lemma linear_function_value_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\" by (simp add: field_simps)\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: field_simps)\n  from assms(2) have \"a * (6 - 2) = 12\" by (metis \\<open>f 6 - f 2 = a * (6 - 2)\\<close> dbl_simps(3))\n  then have \"a * 4 = 12\" by simp\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\" using assms(1) by simp\n  then show ?thesis by (smt (verit) \\<open>a = 3\\<close>)\nqed", "description": "-", "full_code": "lemma linear_function_value_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\" using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\" by (simp add: field_simps)\n  then have \"f 6 - f 2 = a * (6 - 2)\" by (simp add: field_simps)\n  from assms(2) have \"a * (6 - 2) = 12\" by (metis \\<open>f 6 - f 2 = a * (6 - 2)\\<close> dbl_simps(3))\n  then have \"a * 4 = 12\" by simp\n  then have \"a = 3\" by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\" using assms(1) by simp\n  then show ?thesis by (smt (verit) \\<open>a = 3\\<close>)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "amc12b_2003_p9_evolvedV3": {"skill_name": "amc12b_2003_p9_evolvedV3", "marker": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then have \"f 12 - f 2 = 10 * 3\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = 10 * a\" by simp\n  then have \"f 12 - f 2 = 10 * 3\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_propertiesV2": {"skill_name": "linear_function_propertiesV2", "marker": "lemma linear_function_properties:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f (x + y) = f x + f y - b + (a * (x + y - x - y))\"\nproof -\n  have \"f (x + y) = a * (x + y) + b\" using assms by simp\n  also have \"... = (a * x + b) + (a * y + b) - b\" by (simp add: algebra_simps)\n  finally show ?thesis by (metis \\<open>a * (x + y) + b = a * x + b + (a * y + b) - b\\<close> \\<open>f (x + y) = a * (x + y) + b\\<close> add.comm_neutral add_diff_cancel_left' assms diff_self mult_delta_right mult_zero_right)\nqed", "description": "-", "full_code": "lemma linear_function_properties:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f (x + y) = f x + f y - b + (a * (x + y - x - y))\"\nproof -\n  have \"f (x + y) = a * (x + y) + b\" using assms by simp\n  also have \"... = (a * x + b) + (a * y + b) - b\" by (simp add: algebra_simps)\n  finally show ?thesis by (metis \\<open>a * (x + y) + b = a * x + b + (a * y + b) - b\\<close> \\<open>f (x + y) = a * (x + y) + b\\<close> add.comm_neutral add_diff_cancel_left' assms diff_self mult_delta_right mult_zero_right)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_propertiesV3": {"skill_name": "linear_function_propertiesV3", "marker": "lemma linear_function_properties:\n  fixes a b x y :: real\n  assumes \"f x = a * x + b\" and \"f y = a * y + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_properties:\n  fixes a b x y :: real\n  assumes \"f x = a * x + b\" and \"f y = a * y + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_differenceV8": {"skill_name": "linear_function_differenceV8", "marker": "theorem linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  fix x y :: real\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then have \"f x - f y = a * x - a * y\"\n    by simp\n  then have \"f x - f y = a * (x - y)\"\n    by (simp add: algebra_simps)\n  then show ?thesis by (smt (verit) assms right_diff_distrib')\nqed", "description": "-", "full_code": "theorem linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  fix x y :: real\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then have \"f x - f y = a * x - a * y\"\n    by simp\n  then have \"f x - f y = a * (x - y)\"\n    by (simp add: algebra_simps)\n  then show ?thesis by (smt (verit) assms right_diff_distrib')\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_difference_extended": {"skill_name": "linear_function_difference_extended", "marker": "lemma linear_function_difference_extended:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f w = a * (z - w)\"\n  and \"f z + d - (f y + d) = a * (z - y)\"\nproof -\n  have \"f z - f w = (a * z + b) - (a * w + b)\"\n    using assms(1) by simp\n  then show \"f z - f w = a * (z - w)\" by (simp add: field_simps)\n  have \"f z + d - (f y + d) = (a * z + b + d) - (a * y + b + d)\"\n    using assms(1) by simp\n  then show \"f z + d - (f y + d) = a * (z - y)\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_extended:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f w = a * (z - w)\"\n  and \"f z + d - (f y + d) = a * (z - y)\"\nproof -\n  have \"f z - f w = (a * z + b) - (a * w + b)\"\n    using assms(1) by simp\n  then show \"f z - f w = a * (z - w)\" by (simp add: field_simps)\n  have \"f z + d - (f y + d) = (a * z + b + d) - (a * y + b + d)\"\n    using assms(1) by simp\n  then show \"f z + d - (f y + d) = a * (z - y)\" by (simp add: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_difference_extendedV2": {"skill_name": "linear_function_difference_extendedV2", "marker": "lemma linear_function_difference_extended:\n  fixes a b c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n    and \"f z - f y = a * (z - y)\"\n  shows \"f (x + c) - f (y + c) = a * ((x + c) - (y + c))\"\nproof -\n  have \"f (x + c) - f (y + c) = (a * (x + c) + b) - (a * (y + c) + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_extended:\n  fixes a b c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n    and \"f z - f y = a * (z - y)\"\n  shows \"f (x + c) - f (y + c) = a * ((x + c) - (y + c))\"\nproof -\n  have \"f (x + c) - f (y + c) = (a * (x + c) + b) - (a * (y + c) + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_property": {"skill_name": "linear_function_property", "marker": "lemma linear_function_property:\n  fixes a b c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"a \\<noteq> 0\" \"\\<forall> x. f x = a * x + b\"\n  shows \"f (x + c) - f x = a * c\"\nproof -\n  have \"f (x + c) = a * (x + c) + b\" using assms(2) by simp\n  also have \"... = a * x + a * c + b\" by (simp add: algebra_simps)\n  also have \"... = f x + a * c\" using assms(2) by simp\n  finally show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_property:\n  fixes a b c :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"a \\<noteq> 0\" \"\\<forall> x. f x = a * x + b\"\n  shows \"f (x + c) - f x = a * c\"\nproof -\n  have \"f (x + c) = a * (x + c) + b\" using assms(2) by simp\n  also have \"... = a * x + a * c + b\" by (simp add: algebra_simps)\n  also have \"... = f x + a * c\" using assms(2) by simp\n  finally show ?thesis by (simp add: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_difference_multiV2": {"skill_name": "linear_function_difference_multiV2", "marker": "lemma linear_function_difference_multi:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\" \n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\n  and \"f (x + d) - f y = a * ((x + d) - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  have \"f (x + d) - f y = (a * (x + d) + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f (x + d) - f y = a * ((x + d) - y)\" \n    by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_multi:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\" \n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\n  and \"f (x + d) - f y = a * ((x + d) - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f z - f y = a * (z - y)\" by (auto simp: field_simps)\n  have \"f (x + d) - f y = (a * (x + d) + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show \"f (x + d) - f y = a * ((x + d) - y)\" \n    by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_difference_generalized": {"skill_name": "linear_function_difference_generalized", "marker": "lemma linear_function_difference_generalized:\n  fixes a b c x1 x2 x3 :: real\n  assumes \"\\<forall> x. f x = a * x + b\" \n  shows \"f x1 - f x2 = a * (x1 - x2) \\<Longrightarrow> f x3 - f x2 = a * (x3 - x2)\"\nproof -\n  assume \"f x1 - f x2 = a * (x1 - x2)\"\n  have \"f x3 - f x2 = (a * x3 + b) - (a * x2 + b)\"\n    using assms by simp\n  thus ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_generalized:\n  fixes a b c x1 x2 x3 :: real\n  assumes \"\\<forall> x. f x = a * x + b\" \n  shows \"f x1 - f x2 = a * (x1 - x2) \\<Longrightarrow> f x3 - f x2 = a * (x3 - x2)\"\nproof -\n  assume \"f x1 - f x2 = a * (x1 - x2)\"\n  have \"f x3 - f x2 = (a * x3 + b) - (a * x2 + b)\"\n    using assms by simp\n  thus ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_propertiesV4": {"skill_name": "linear_function_propertiesV4", "marker": "lemma linear_function_properties:\n  fixes a b c x1 x2 y1 y2 :: real\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x1 - f x2 = a * (x1 - x2)\"\n    and \"f y1 - f y2 = a * (y1 - y2)\"\n    and \"f x1 - f y1 = a * (x1 - y1)\"\n    and \"f x2 - f y2 = a * (x2 - y2)\"\nproof -\n  have \"f x1 - f x2 = (a * x1 + b) - (a * x2 + b)\" using assms by simp\n  thus \"f x1 - f x2 = a * (x1 - x2)\" by (auto simp: field_simps)\n  have \"f y1 - f y2 = (a * y1 + b) - (a * y2 + b)\" using assms by simp\n  thus \"f y1 - f y2 = a * (y1 - y2)\" by (auto simp: field_simps)\n  have \"f x1 - f y1 = (a * x1 + b) - (a * y1 + b)\" using assms by simp\n  thus \"f x1 - f y1 = a * (x1 - y1)\" by (auto simp: field_simps)\n  have \"f x2 - f y2 = (a * x2 + b) - (a * y2 + b)\" using assms by simp\n  thus \"f x2 - f y2 = a * (x2 - y2)\" by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_properties:\n  fixes a b c x1 x2 y1 y2 :: real\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x1 - f x2 = a * (x1 - x2)\"\n    and \"f y1 - f y2 = a * (y1 - y2)\"\n    and \"f x1 - f y1 = a * (x1 - y1)\"\n    and \"f x2 - f y2 = a * (x2 - y2)\"\nproof -\n  have \"f x1 - f x2 = (a * x1 + b) - (a * x2 + b)\" using assms by simp\n  thus \"f x1 - f x2 = a * (x1 - x2)\" by (auto simp: field_simps)\n  have \"f y1 - f y2 = (a * y1 + b) - (a * y2 + b)\" using assms by simp\n  thus \"f y1 - f y2 = a * (y1 - y2)\" by (auto simp: field_simps)\n  have \"f x1 - f y1 = (a * x1 + b) - (a * y1 + b)\" using assms by simp\n  thus \"f x1 - f y1 = a * (x1 - y1)\" by (auto simp: field_simps)\n  have \"f x2 - f y2 = (a * x2 + b) - (a * y2 + b)\" using assms by simp\n  thus \"f x2 - f y2 = a * (x2 - y2)\" by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_interpolation": {"skill_name": "linear_function_interpolation", "marker": "lemma linear_function_interpolation:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 = y1\"\n    and \"f x2 = y2\"\n  shows \"f ((x1 + x2) / 2) = (y1 + y2) / 2\"\nproof -\n  have \"f ((x1 + x2) / 2) = a * ((x1 + x2) / 2) + b\"\n    using assms(1) by simp\n  also have \"... = (a * x1 + b + a * x2 + b) / 2\"\n    by (simp add: algebra_simps)\n  also have \"... = (f x1 + f x2) / 2\" using assms(2,3) by (smt (verit) assms(1) divide_cancel_right group_cancel.add1)\n  finally show ?thesis by (metis \\<open>(a * x1 + b + a * x2 + b) / 2 = (f x1 + f x2) / 2\\<close> \\<open>a * ((x1 + x2) / 2) + b = (a * x1 + b + a * x2 + b) / 2\\<close> \\<open>f ((x1 + x2) / 2) = a * ((x1 + x2) / 2) + b\\<close> assms(2) assms(3) dbl_simps(3))\nqed", "description": "-", "full_code": "lemma linear_function_interpolation:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 = y1\"\n    and \"f x2 = y2\"\n  shows \"f ((x1 + x2) / 2) = (y1 + y2) / 2\"\nproof -\n  have \"f ((x1 + x2) / 2) = a * ((x1 + x2) / 2) + b\"\n    using assms(1) by simp\n  also have \"... = (a * x1 + b + a * x2 + b) / 2\"\n    by (simp add: algebra_simps)\n  also have \"... = (f x1 + f x2) / 2\" using assms(2,3) by (smt (verit) assms(1) divide_cancel_right group_cancel.add1)\n  finally show ?thesis by (metis \\<open>(a * x1 + b + a * x2 + b) / 2 = (f x1 + f x2) / 2\\<close> \\<open>a * ((x1 + x2) / 2) + b = (a * x1 + b + a * x2 + b) / 2\\<close> \\<open>f ((x1 + x2) / 2) = a * ((x1 + x2) / 2) + b\\<close> assms(2) assms(3) dbl_simps(3))\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_values": {"skill_name": "linear_function_values", "marker": "lemma linear_function_values:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x = a * x + b\"\nproof -\n  show \"f x = a * x + b\" using assms by simp\nqed", "description": "-", "full_code": "lemma linear_function_values:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x = a * x + b\"\nproof -\n  show \"f x = a * x + b\" using assms by simp\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_evaluation": {"skill_name": "linear_function_evaluation", "marker": "lemma linear_function_evaluation:\n  fixes a b z :: real and f :: \"real \\<Rightarrow> real\"\n  assumes h0: \"\\<And>x. f x = a * x + b\"\n  shows \"f z = a * z + b\"\nproof -\n  show ?thesis using assms by simp\nqed", "description": "-", "full_code": "lemma linear_function_evaluation:\n  fixes a b z :: real and f :: \"real \\<Rightarrow> real\"\n  assumes h0: \"\\<And>x. f x = a * x + b\"\n  shows \"f z = a * z + b\"\nproof -\n  show ?thesis using assms by simp\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_evaluationV2": {"skill_name": "linear_function_evaluationV2", "marker": "lemma linear_function_evaluation:\n  fixes a b x y z :: real\n  assumes \"f x = a * x + b\" \n    and \"f y = a * y + b\"\n    and \"f z = a * z + b\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(3, 2) by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_evaluation:\n  fixes a b x y z :: real\n  assumes \"f x = a * x + b\" \n    and \"f y = a * y + b\"\n    and \"f z = a * z + b\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(3, 2) by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "amc12b_2003_p9_extended": {"skill_name": "amc12b_2003_p9_extended", "marker": "theorem amc12b_2003_p9_extended:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n    and \"f 4 - f 2 = 6\"  \n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 4 - f 2 = (a * 4 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 4 - f 2 = a * 4 - a * 2\"\n    by simp\n  then have \"f 4 - f 2 = a * (4 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 4 - f 2 = 2 * a\" by simp\n  then have \"f 4 - f 2 = 2 * 3\" using `a = 3` by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_extended:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n    and \"f 4 - f 2 = 6\"  \n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f 4 - f 2 = (a * 4 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 4 - f 2 = a * 4 - a * 2\"\n    by simp\n  then have \"f 4 - f 2 = a * (4 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 4 - f 2 = 2 * a\" by simp\n  then have \"f 4 - f 2 = 2 * 3\" using `a = 3` by simp\n  have \"f 12 - f 2 = (a * 12 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 12 - f 2 = a * 12 - a * 2\"\n    by simp\n  then have \"f 12 - f 2 = a * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then have \"f 12 - f 2 = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_generalizedV2": {"skill_name": "amc12b_2003_p9_generalizedV2", "marker": "theorem amc12b_2003_p9_generalized:\n  fixes a b x y z :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_generalized:\n  fixes a b x y z :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_difference_general": {"skill_name": "linear_function_difference_general", "marker": "lemma linear_function_difference_general:\n  fixes a b z x y :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> t. f t = a * t + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_general:\n  fixes a b z x y :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> t. f t = a * t + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "amc12b_2003_p9_multi": {"skill_name": "amc12b_2003_p9_multi", "marker": "theorem amc12b_2003_p9_multi:\n  fixes a :: \"real \\<Rightarrow> real\" and b :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. a x = a' * x + b'\"\n    and \"a 6 - a 2 = 12\"\n  shows \"a 12 - a 2 = 30\"\nproof -\n  let ?a' = \"a'\"\n  let ?b' = \"b'\"\n  have \"a 6 - a 2 = (?a' * 6 + ?b') - (?a' * 2 + ?b')\"\n    using assms(1) by simp\n  then have \"a 6 - a 2 = ?a' * 6 - ?a' * 2\"\n    by simp\n  then have \"a 6 - a 2 = ?a' * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"a 6 - a 2 = 4 * ?a'\" using assms(2) by simp\n  then have \"4 * ?a' = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"?a' = 12 / 4\" by (simp add: field_simps)\n  then have \"?a' = 3\" by simp\n  have \"a 12 - a 2 = (?a' * 12 + ?b') - (?a' * 2 + ?b')\"\n    using assms(1) by simp\n  then have \"a 12 - a 2 = ?a' * 12 - ?a' * 2\"\n    by simp\n  then have \"a 12 - a 2 = ?a' * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"a 12 - a 2 = ?a' * 10\" by simp\n  then have \"a 12 - a 2 = 3 * 10\" using `?a' = 3` by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_multi:\n  fixes a :: \"real \\<Rightarrow> real\" and b :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. a x = a' * x + b'\"\n    and \"a 6 - a 2 = 12\"\n  shows \"a 12 - a 2 = 30\"\nproof -\n  let ?a' = \"a'\"\n  let ?b' = \"b'\"\n  have \"a 6 - a 2 = (?a' * 6 + ?b') - (?a' * 2 + ?b')\"\n    using assms(1) by simp\n  then have \"a 6 - a 2 = ?a' * 6 - ?a' * 2\"\n    by simp\n  then have \"a 6 - a 2 = ?a' * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"a 6 - a 2 = 4 * ?a'\" using assms(2) by simp\n  then have \"4 * ?a' = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"?a' = 12 / 4\" by (simp add: field_simps)\n  then have \"?a' = 3\" by simp\n  have \"a 12 - a 2 = (?a' * 12 + ?b') - (?a' * 2 + ?b')\"\n    using assms(1) by simp\n  then have \"a 12 - a 2 = ?a' * 12 - ?a' * 2\"\n    by simp\n  then have \"a 12 - a 2 = ?a' * (12 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"a 12 - a 2 = ?a' * 10\" by simp\n  then have \"a 12 - a 2 = 3 * 10\" using `?a' = 3` by simp\n  then show ?thesis by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9_multi_dim": {"skill_name": "amc12b_2003_p9_multi_dim", "marker": "theorem amc12b_2003_p9_multi_dim:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f (k + 12) - f (k + 2) = 10 * a\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f (k + 12) - f (k + 2) = (a * (k + 12) + b) - (a * (k + 2) + b)\"\n    using assms(1) by simp\n  then have \"f (k + 12) - f (k + 2) = a * (k + 12) - a * (k + 2)\"\n    by simp\n  then have \"f (k + 12) - f (k + 2) = a * ((k + 12) - (k + 2))\"\n    by (simp add: algebra_simps)\n  then have \"f (k + 12) - f (k + 2) = a * 10\" by simp\n  then have \"f (k + 12) - f (k + 2) = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by (metis \\<open>f (k + 12) - f (k + 2) = a * 10\\<close> mult.commute)\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_multi_dim:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f (k + 12) - f (k + 2) = 10 * a\"\nproof -\n  have \"f 6 - f 2 = (a * 6 + b) - (a * 2 + b)\"\n    using assms(1) by simp\n  then have \"f 6 - f 2 = a * 6 - a * 2\"\n    by simp\n  then have \"f 6 - f 2 = a * (6 - 2)\"\n    by (simp add: algebra_simps)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 12 / 4\" by (simp add: field_simps)\n  then have \"a = 3\" by simp\n  have \"f (k + 12) - f (k + 2) = (a * (k + 12) + b) - (a * (k + 2) + b)\"\n    using assms(1) by simp\n  then have \"f (k + 12) - f (k + 2) = a * (k + 12) - a * (k + 2)\"\n    by simp\n  then have \"f (k + 12) - f (k + 2) = a * ((k + 12) - (k + 2))\"\n    by (simp add: algebra_simps)\n  then have \"f (k + 12) - f (k + 2) = a * 10\" by simp\n  then have \"f (k + 12) - f (k + 2) = 3 * 10\" using `a = 3` by simp\n  then show ?thesis by (metis \\<open>f (k + 12) - f (k + 2) = a * 10\\<close> mult.commute)\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "amc12b_2003_p9V5": {"skill_name": "amc12b_2003_p9V5", "marker": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "lemma linear_function_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  fix x y :: real\n  have \"f x - f y = (a * x + b) - (a * y + b)\" using assms by simp\n  then show ?thesis by (smt (verit) assms right_diff_distrib')\nqed\n\ntheorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_function_difference assms by simp\n  then have \"4 * a = 12\" using assms(2) by simp\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_function_difference assms by simp\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_difference_generalizedV2": {"skill_name": "linear_function_difference_generalizedV2", "marker": "lemma linear_function_difference_generalized:\n  fixes a b k :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"k > 0\"\n  shows \"f (x + k) - f x = a * k\"\nproof -\n  have \"f (x + k) - f x = (a * (x + k) + b) - (a * x + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_generalized:\n  fixes a b k :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"k > 0\"\n  shows \"f (x + k) - f x = a * k\"\nproof -\n  have \"f (x + k) - f x = (a * (x + k) + b) - (a * x + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_difference_invariant": {"skill_name": "linear_function_difference_invariant", "marker": "lemma linear_function_difference_invariant:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"c < d\"\n  shows \"f d - f c = a * (d - c)\"\nproof -\n  have \"f d - f c = (a * d + b) - (a * c + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_difference_invariant:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"c < d\"\n  shows \"f d - f c = a * (d - c)\"\nproof -\n  have \"f d - f c = (a * d + b) - (a * c + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_multiple_points": {"skill_name": "linear_function_multiple_points", "marker": "lemma linear_function_multiple_points:\n  fixes a b x1 x2 y1 y2 :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 - f y1 = a * (x1 - y1)\"\n    and \"f x2 - f y2 = a * (x2 - y2)\"\n  shows \"f x1 - f y2 = a * (x1 - y2)\"\nproof -\n  have \"f x1 - f y2 = (a * x1 + b) - (a * y2 + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_multiple_points:\n  fixes a b x1 x2 y1 y2 :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x1 - f y1 = a * (x1 - y1)\"\n    and \"f x2 - f y2 = a * (x2 - y2)\"\n  shows \"f x1 - f y2 = a * (x1 - y2)\"\nproof -\n  have \"f x1 - f y2 = (a * x1 + b) - (a * y2 + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "amc12b_2003_p9_evolvedV4": {"skill_name": "amc12b_2003_p9_evolvedV4", "marker": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using assms(1) by (simp)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using assms(1) by (simp)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "theorem amc12b_2003_p9_evolved:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using assms(1) by (simp)\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"4 * a = 12\" by (metis assms(2) dbl_simps(3))\n  then have \"a = 3\" by (simp add: field_simps)\n  have \"f 12 - f 2 = a * (12 - 2)\" using assms(1) by (simp)\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}, "linear_function_propertiesV5": {"skill_name": "linear_function_propertiesV5", "marker": "lemma linear_function_properties:\n  fixes a b :: real and f g :: \"real \\<Rightarrow> real\"\n  assumes h1: \"\\<forall>x. f x = a * x + b\"\n      and h2: \"\\<forall>x. g x = a * x + c\"\n  shows \"f x - g y = a * (x - y) + (b - c)\"\nproof -\n  have \"f x - g y = (a * x + b) - (a * y + c)\" \n    using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma linear_function_properties:\n  fixes a b :: real and f g :: \"real \\<Rightarrow> real\"\n  assumes h1: \"\\<forall>x. f x = a * x + b\"\n      and h2: \"\\<forall>x. g x = a * x + c\"\n  shows \"f x - g y = a * (x - y) + (b - c)\"\nproof -\n  have \"f x - g y = (a * x + b) - (a * y + c)\" \n    using assms by simp\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "linear_function_multiple": {"skill_name": "linear_function_multiple", "marker": "lemma linear_function_multiple:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"\\<forall> z. f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (metis assms(1) diff_self eq_iff_diff_eq_0 linear_function_difference_extended mult_cancel_right1)\nqed", "description": "-", "full_code": "lemma linear_function_difference_extended:\n  fixes a b c d :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f c - f d = a * (c - d)\"\n  shows \"f z - f d = a * (z - d)\"\nproof -\n  have \"f z - f d = (a * z + b) - (a * d + b)\"\n    using assms(1) by simp\n  then show ?thesis by (auto simp: field_simps)\nqed\n\nlemma linear_function_multiple:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f x - f y = a * (x - y)\"\n  shows \"\\<forall> z. f z - f y = a * (z - y)\"\nproof -\n  have \"f z - f y = (a * z + b) - (a * y + b)\"\n    using assms(1) by simp\n  then show ?thesis by (metis assms(1) diff_self eq_iff_diff_eq_0 linear_function_difference_extended mult_cancel_right1)\nqed", "origin": "linear_function_differenceV3", "update_count": 0}, "amc12b_2003_p9V6": {"skill_name": "amc12b_2003_p9V6", "marker": "theorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_difference assms by auto\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"a = 3\" by (smt (verit) assms(2))\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_difference assms by auto\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "description": "-", "full_code": "lemma linear_difference:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n  shows \"f x - f y = a * (x - y)\"\nproof -\n  have \"f x - f y = (a * x + b) - (a * y + b)\"\n    using assms by simp\n  then show ?thesis\n    by (simp add: algebra_simps)\nqed\n\ntheorem amc12b_2003_p9:\n  fixes a b :: real and f :: \"real \\<Rightarrow> real\"\n  assumes \"\\<forall> x. f x = a * x + b\"\n    and \"f 6 - f 2 = 12\"\n  shows \"f 12 - f 2 = 30\"\nproof -\n  have \"f 6 - f 2 = a * (6 - 2)\" using linear_difference assms by auto\n  then have \"f 6 - f 2 = 4 * a\" using assms(2) by simp\n  then have \"a = 3\" by (smt (verit) assms(2))\n  have \"f 12 - f 2 = a * (12 - 2)\" using linear_difference assms by auto\n  then have \"f 12 - f 2 = a * 10\" by simp\n  then show ?thesis using `a = 3` by simp\nqed", "origin": "amc12b_2003_p9", "update_count": 0}}