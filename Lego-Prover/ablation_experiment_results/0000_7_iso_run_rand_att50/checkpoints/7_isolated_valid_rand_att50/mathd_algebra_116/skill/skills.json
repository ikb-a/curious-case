{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "multiplicative_inverse": {"skill_name": "multiplicative_inverse", "marker": "lemma multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 = (1 / a) * a\" using assms by (simp add: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 = (1 / a) * a\" using assms by (simp add: field_simps)\n  then show ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "multiplicative_inverseV2": {"skill_name": "multiplicative_inverseV2", "marker": "lemma multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using assms by (simp)", "description": "-", "full_code": "lemma multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  using assms by (simp)", "origin": "a_times_vera", "update_count": 0}, "polynomial_identity": {"skill_name": "polynomial_identity", "marker": "lemma polynomial_identity:\n  fixes a b c :: complex\n  shows \"(a + b) * (a + c) = a^2 + (b + c) * a + b * c\"\nproof -\n  have \"(a + b) * (a + c) = a * (a + c) + b * (a + c)\" by (auto simp: field_simps)\n  also have \"... = a^2 + c * a + b * a + b * c\" by (smt (verit) distrib_left group_cancel.add1 mult.commute power2_eq_square)\n  finally show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma polynomial_identity:\n  fixes a b c :: complex\n  shows \"(a + b) * (a + c) = a^2 + (b + c) * a + b * c\"\nproof -\n  have \"(a + b) * (a + c) = a * (a + c) + b * (a + c)\" by (auto simp: field_simps)\n  also have \"... = a^2 + c * a + b * a + b * c\" by (smt (verit) distrib_left group_cancel.add1 mult.commute power2_eq_square)\n  finally show ?thesis by (auto simp: field_simps)\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "polynomial_identityV2": {"skill_name": "polynomial_identityV2", "marker": "lemma polynomial_identity:\n  fixes a b :: complex\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma polynomial_identity:\n  fixes a b :: complex\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "scalar_product_dimension": {"skill_name": "scalar_product_dimension", "marker": "lemma scalar_product_dimension:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"\\<forall>n. a * (1 / a) = 1\" \n  using nonzero_times_inverse assms by auto", "description": "-", "full_code": "lemma nonzero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma scalar_product_dimension:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"\\<forall>n. a * (1 / a) = 1\" \n  using nonzero_times_inverse assms by auto", "origin": "a_times_vera", "update_count": 0}, "sqrt_properties": {"skill_name": "sqrt_properties", "marker": "lemma sqrt_properties:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x)^2 + sqrt(y)^2 = x + y\" using assms by (simp add: power2_eq_square)\n  moreover have \"2 * sqrt(x) * sqrt(y) >= 0\" using assms by (simp add: mult_nonneg_nonneg)\n  ultimately have \"(sqrt(x) + sqrt(y))^2 = x + y + 2 * sqrt(x) * sqrt(y)\" by (smt (verit) power2_sum)\n  hence \"(sqrt(x) + sqrt(y))^2 >= x + y\" by (simp add: assms)\n  then show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x)^2 + sqrt(y)^2 = x + y\" using assms by (simp add: power2_eq_square)\n  moreover have \"2 * sqrt(x) * sqrt(y) >= 0\" using assms by (simp add: mult_nonneg_nonneg)\n  ultimately have \"(sqrt(x) + sqrt(y))^2 = x + y + 2 * sqrt(x) * sqrt(y)\" by (smt (verit) power2_sum)\n  hence \"(sqrt(x) + sqrt(y))^2 >= x + y\" by (simp add: assms)\n  then show ?thesis by (metis assms(1) assms(2) sqrt_add_le_add_sqrt)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV2": {"skill_name": "sqrt_propertiesV2", "marker": "lemma sqrt_properties:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x) + sqrt(y) = sqrt(x) + sqrt(y) * 1\" by simp\n  also have \"... = sqrt(x) + sqrt(y) * (sqrt(x + y) / sqrt(x + y))\" \n    using assms by auto\n  also have \"... = (sqrt(x) * sqrt(x + y) + sqrt(y) * sqrt(x + y)) / sqrt(x + y)\" \n    by (metis \\<open>sqrt x + sqrt y * 1 = sqrt x + sqrt y * (sqrt (x + y) / sqrt (x + y))\\<close> \\<open>sqrt x + sqrt y = sqrt x + sqrt y * 1\\<close> add_0_iff add_le_same_cancel1 add_le_same_cancel2 add_nonpos_eq_0_iff assms(1) assms(2) calculation divide_eq_0_iff mult.commute mult_eq_0_iff nonzero_mult_div_cancel_left real_sqrt_eq_zero_cancel_iff ring_class.ring_distribs(2))\n  finally have \"sqrt(x) + sqrt(y) >= sqrt(x + y) * (sqrt(x) + sqrt(y)) / sqrt(x + y)\" \n    using assms by auto\n  have \"sqrt(x) + sqrt(y) >= sqrt(x + y)\" \n    using assms\n  proof -\n    have \"sqrt(x)^2 + sqrt(y)^2 = x + y\" by (metis abs_of_nonneg assms(1) assms(2) one_add_one power2_eq_square real_sqrt_mult_self)\n    then show ?thesis using assms by (metis sqrt_add_le_add_sqrt)\n  qed\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x) + sqrt(y) = sqrt(x) + sqrt(y) * 1\" by simp\n  also have \"... = sqrt(x) + sqrt(y) * (sqrt(x + y) / sqrt(x + y))\" \n    using assms by auto\n  also have \"... = (sqrt(x) * sqrt(x + y) + sqrt(y) * sqrt(x + y)) / sqrt(x + y)\" \n    by (metis \\<open>sqrt x + sqrt y * 1 = sqrt x + sqrt y * (sqrt (x + y) / sqrt (x + y))\\<close> \\<open>sqrt x + sqrt y = sqrt x + sqrt y * 1\\<close> add_0_iff add_le_same_cancel1 add_le_same_cancel2 add_nonpos_eq_0_iff assms(1) assms(2) calculation divide_eq_0_iff mult.commute mult_eq_0_iff nonzero_mult_div_cancel_left real_sqrt_eq_zero_cancel_iff ring_class.ring_distribs(2))\n  finally have \"sqrt(x) + sqrt(y) >= sqrt(x + y) * (sqrt(x) + sqrt(y)) / sqrt(x + y)\" \n    using assms by auto\n  have \"sqrt(x) + sqrt(y) >= sqrt(x + y)\" \n    using assms\n  proof -\n    have \"sqrt(x)^2 + sqrt(y)^2 = x + y\" by (metis abs_of_nonneg assms(1) assms(2) one_add_one power2_eq_square real_sqrt_mult_self)\n    then show ?thesis using assms by (metis sqrt_add_le_add_sqrt)\n  qed\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "square_root_properties": {"skill_name": "square_root_properties", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt((sqrt(a) + sqrt(b))^2)\" by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt(a + b + 2 * sqrt(a) * sqrt(b))\" \n    using assms by (smt (verit) power2_sum real_sqrt_eq_iff real_sqrt_pow2)\n  also have \"... = sqrt(a + b + 2 * sqrt(a*b))\" \n    by (metis calculation is_num_normalize(1) mult.commute mult.left_commute real_sqrt_mult)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt((sqrt(a) + sqrt(b))^2)\" by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt(a + b + 2 * sqrt(a) * sqrt(b))\" \n    using assms by (smt (verit) power2_sum real_sqrt_eq_iff real_sqrt_pow2)\n  also have \"... = sqrt(a + b + 2 * sqrt(a*b))\" \n    by (metis calculation is_num_normalize(1) mult.commute mult.left_commute real_sqrt_mult)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "algebraic_identity": {"skill_name": "algebraic_identity", "marker": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by simp\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "algebraic_identityV2": {"skill_name": "algebraic_identityV2", "marker": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "triangle_inequality": {"skill_name": "triangle_inequality", "marker": "lemma triangle_inequality:\n  fixes a b c :: real\n  shows \"abs(a + b) <= abs(a) + abs(b)\"\nproof -\n  have \"abs(a + b) = sqrt((a + b)^2)\" by (simp add: power2_eq_square)\n  also have \"... <= sqrt(abs(a)^2 + abs(b)^2 + 2 * abs(a) * abs(b))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(a) + abs(b)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma triangle_inequality:\n  fixes a b c :: real\n  shows \"abs(a + b) <= abs(a) + abs(b)\"\nproof -\n  have \"abs(a + b) = sqrt((a + b)^2)\" by (simp add: power2_eq_square)\n  also have \"... <= sqrt(abs(a)^2 + abs(b)^2 + 2 * abs(a) * abs(b))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(a) + abs(b)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "origin": "sqrt_properties", "update_count": 0}, "triangle_inequalityV2": {"skill_name": "triangle_inequalityV2", "marker": "lemma triangle_inequality:\n  fixes x y :: real\n  shows \"abs(x) + abs(y) >= abs(x + y)\"\nproof -\n  have \"abs(x) = max x (-x)\" and \"abs(y) = max y (-y)\" by auto\n  then have \"abs(x) + abs(y) = max x (-x) + max y (-y)\"\n    by simp\n  also have \"... >= max (x + y) (-(x + y))\" \n    using max_def by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma triangle_inequality:\n  fixes x y :: real\n  shows \"abs(x) + abs(y) >= abs(x + y)\"\nproof -\n  have \"abs(x) = max x (-x)\" and \"abs(y) = max y (-y)\" by auto\n  then have \"abs(x) + abs(y) = max x (-x) + max y (-y)\"\n    by simp\n  also have \"... >= max (x + y) (-(x + y))\" \n    using max_def by auto\n  finally show ?thesis by auto\nqed", "origin": "sqrt_properties", "update_count": 0}, "polynomial_identity_expanded": {"skill_name": "polynomial_identity_expanded", "marker": "lemma polynomial_identity_expanded:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = ((a + b) + (e + f)) * (c + d)\" by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\" by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma polynomial_identity_expanded:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) + (e + f) * (c + d) = (a + e) * (c + d) + (b + f) * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) + (e + f) * (c + d) = ((a + b) + (e + f)) * (c + d)\" by (auto simp: field_simps)\n  also have \"... = (a + e) * (c + d) + (b + f) * (c + d)\" by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "polynomial_identity", "update_count": 0}, "polynomial_identity_general": {"skill_name": "polynomial_identity_general", "marker": "lemma polynomial_identity_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  also have \"... = a * c + a * d + b * c + b * d\" by (simp add: distrib_left)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma polynomial_identity_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  also have \"... = a * c + a * d + b * c + b * d\" by (simp add: distrib_left)\n  finally show ?thesis .\nqed", "origin": "polynomial_identity", "update_count": 0}, "polynomial_identity_generalV2": {"skill_name": "polynomial_identity_generalV2", "marker": "lemma polynomial_identity_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a*c + a*d + b*c + b*d\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  also have \"... = a*c + a*d + b*c + b*d\" by (smt (verit) distrib_left group_cancel.add1 mult.commute)\n  finally show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma polynomial_identity_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a*c + a*d + b*c + b*d\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  also have \"... = a*c + a*d + b*c + b*d\" by (smt (verit) distrib_left group_cancel.add1 mult.commute)\n  finally show ?thesis by (auto simp: field_simps)\nqed", "origin": "polynomial_identity", "update_count": 0}, "distributive_property": {"skill_name": "distributive_property", "marker": "lemma distributive_property:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"a * (c + d) + b * (c + d) = a * c + a * d + b * c + b * d\"\n    by (simp add: distrib_left distrib_right)\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma distributive_property:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"a * (c + d) + b * (c + d) = a * c + a * d + b * c + b * d\"\n    by (simp add: distrib_left distrib_right)\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "complex_sum_product": {"skill_name": "complex_sum_product", "marker": "lemma complex_sum_product:\n  fixes x y z :: complex\n  shows \"(x + y) * z = x * z + y * z\"\n  by (auto simp: field_simps)", "description": "-", "full_code": "lemma complex_sum_product:\n  fixes x y z :: complex\n  shows \"(x + y) * z = x * z + y * z\"\n  by (auto simp: field_simps)", "origin": "multi_distrib_complex", "update_count": 0}, "simplify_square_root_expression": {"skill_name": "simplify_square_root_expression", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" by (smt (verit) diff_add_eq power2_diff)\n  also have \"... = a^2 - 2*a*sqrt b + b\" by (smt (verit) add_less_imp_less_left assms(2) less_eq_real_def real_less_lsqrt real_less_rsqrt real_sqrt_ge_zero)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" by (smt (verit) diff_add_eq power2_diff)\n  also have \"... = a^2 - 2*a*sqrt b + b\" by (smt (verit) add_less_imp_less_left assms(2) less_eq_real_def real_less_lsqrt real_less_rsqrt real_sqrt_ge_zero)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV2": {"skill_name": "simplify_square_root_expressionV2", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = (a + (-sqrt b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-sqrt b) + (-sqrt b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*sqrt b + (sqrt b)^2\" by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2*a*sqrt b + b\" using `b > 0` by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = (a + (-sqrt b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-sqrt b) + (-sqrt b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*sqrt b + (sqrt b)^2\" by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2*a*sqrt b + b\" using `b > 0` by simp\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_non_negative": {"skill_name": "sqrt_non_negative", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt x\" by simp\n  also have \"... = sqrt (x * 1)\" by (simp add: mult_1_left)\n  also have \"... = sqrt (x * (if x = 0 then 0 else 1))\" by (simp add: assms)\n  also have \"... \\<ge> 0\" using assms by auto\n  finally show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt x\" by simp\n  also have \"... = sqrt (x * 1)\" by (simp add: mult_1_left)\n  also have \"... = sqrt (x * (if x = 0 then 0 else 1))\" by (simp add: assms)\n  also have \"... \\<ge> 0\" using assms by auto\n  finally show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_non_negativeV2": {"skill_name": "sqrt_non_negativeV2", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt x * 1\" by simp\n  also have \"... = sqrt x * (sqrt x / sqrt x)\" \n    using assms by auto\n  also have \"... = (sqrt x)^2 / sqrt x\" \n    by (metis power2_eq_square times_divide_eq_right)\n  finally have \"sqrt x \\<ge> 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt x * 1\" by simp\n  also have \"... = sqrt x * (sqrt x / sqrt x)\" \n    using assms by auto\n  also have \"... = (sqrt x)^2 / sqrt x\" \n    by (metis power2_eq_square times_divide_eq_right)\n  finally have \"sqrt x \\<ge> 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_non_negativeV3": {"skill_name": "sqrt_non_negativeV3", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt(0 + x)\" by (simp add: assms)\n  then have \"sqrt x = sqrt x\" by simp\n  moreover have \"0 \\<le> x\" using assms by simp\n  ultimately show \"sqrt x \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt(0 + x)\" by (simp add: assms)\n  then have \"sqrt x = sqrt x\" by simp\n  moreover have \"0 \\<le> x\" using assms by simp\n  ultimately show \"sqrt x \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_non_negativeV4": {"skill_name": "sqrt_non_negativeV4", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by auto\n  also have \"... \\<ge> 0\" \n    by (simp add: real_sqrt_ge_zero)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by auto\n  also have \"... \\<ge> 0\" \n    by (simp add: real_sqrt_ge_zero)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "triangle_inequality_generalized": {"skill_name": "triangle_inequality_generalized", "marker": "lemma triangle_inequality_generalized:\n  fixes x y :: real\n  shows \"abs(x + y) <= abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) = sqrt((x + y)^2)\" by (simp add: power2_eq_square)\n  also have \"... <= sqrt(abs(x)^2 + abs(y)^2 + 2 * abs(x) * abs(y))\" \n    using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(x) + abs(y)\" \n    using real_sqrt_ge_zero by (metis abs_add_abs power2_sum real_sqrt_abs)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma triangle_inequality_generalized:\n  fixes x y :: real\n  shows \"abs(x + y) <= abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) = sqrt((x + y)^2)\" by (simp add: power2_eq_square)\n  also have \"... <= sqrt(abs(x)^2 + abs(y)^2 + 2 * abs(x) * abs(y))\" \n    using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(x) + abs(y)\" \n    using real_sqrt_ge_zero by (metis abs_add_abs power2_sum real_sqrt_abs)\n  finally show ?thesis by simp\nqed", "origin": "triangle_inequality", "update_count": 0}, "triangle_inequality_general": {"skill_name": "triangle_inequality_general", "marker": "lemma triangle_inequality_general:\n  fixes x y :: real\n  shows \"abs(x + y) \\<le> abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) = sqrt((x + y)^2)\" by (simp add: power2_eq_square)\n  also have \"... \\<le> sqrt(abs(x)^2 + abs(y)^2 + 2 * abs(x) * abs(y))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(x) + abs(y)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma triangle_inequality_general:\n  fixes x y :: real\n  shows \"abs(x + y) \\<le> abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) = sqrt((x + y)^2)\" by (simp add: power2_eq_square)\n  also have \"... \\<le> sqrt(abs(x)^2 + abs(y)^2 + 2 * abs(x) * abs(y))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(x) + abs(y)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "origin": "triangle_inequality", "update_count": 0}, "triangle_inequality_generalV2": {"skill_name": "triangle_inequality_generalV2", "marker": "lemma triangle_inequality_general:\n  fixes a b :: real\n  shows \"abs(a + b) \\<le> abs(a) + abs(b)\"\nproof -\n  have \"abs(a + b) = sqrt((a + b)^2)\" by (simp add: power2_eq_square)\n  also have \"... \\<le> sqrt(abs(a)^2 + abs(b)^2 + 2 * abs(a) * abs(b))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(a) + abs(b)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma triangle_inequality_general:\n  fixes a b :: real\n  shows \"abs(a + b) \\<le> abs(a) + abs(b)\"\nproof -\n  have \"abs(a + b) = sqrt((a + b)^2)\" by (simp add: power2_eq_square)\n  also have \"... \\<le> sqrt(abs(a)^2 + abs(b)^2 + 2 * abs(a) * abs(b))\" using abs_triangle_ineq by (metis abs_add_abs power2_sum real_sqrt_abs)\n  also have \"... = abs(a) + abs(b)\" by (metis abs_of_nonneg add.commute add_nonneg_nonneg power2_sum real_sqrt_abs real_sqrt_ge_zero real_sqrt_mult real_sqrt_mult_self zero_le_square)\n  finally show ?thesis by simp\nqed", "origin": "triangle_inequality", "update_count": 0}, "polynomial_identity_generalized": {"skill_name": "polynomial_identity_generalized", "marker": "lemma polynomial_identity_generalized:\n  fixes a b c d :: complex\n  shows \"(a + b + c + d)^2 = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\nproof -\n  have \"(a + b + c + d)^2 = (a + b)^2 + (c + d)^2 + 2*(a + b)*(c + d)\" \n    by (metis group_cancel.add1 numeral_2_eq_2 power2_sum)\n  also have \"... = (a^2 + 2*a*b + b^2) + (c^2 + 2*c*d + d^2) + 2*(a + b)*(c + d)\"\n    by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute add.right_cancel add_right_cancel is_num_normalize(1) power2_eq_square power2_sum)\n  also have \"... = a^2 + b^2 + c^2 + d^2 + 2*(a*b + c*d + (a + b)*(c + d))\"\n    by auto\n  also have \"... = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma polynomial_identity_generalized:\n  fixes a b c d :: complex\n  shows \"(a + b + c + d)^2 = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\nproof -\n  have \"(a + b + c + d)^2 = (a + b)^2 + (c + d)^2 + 2*(a + b)*(c + d)\" \n    by (metis group_cancel.add1 numeral_2_eq_2 power2_sum)\n  also have \"... = (a^2 + 2*a*b + b^2) + (c^2 + 2*c*d + d^2) + 2*(a + b)*(c + d)\"\n    by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute add.right_cancel add_right_cancel is_num_normalize(1) power2_eq_square power2_sum)\n  also have \"... = a^2 + b^2 + c^2 + d^2 + 2*(a*b + c*d + (a + b)*(c + d))\"\n    by auto\n  also have \"... = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "polynomial_identityV2", "update_count": 0}, "polynomial_identity_extended": {"skill_name": "polynomial_identity_extended", "marker": "lemma polynomial_identity_extended:\n  fixes a b c :: complex\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\"\n    by (auto simp: field_simps)\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute is_num_normalize(1) power2_sum)\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute distrib_left is_num_normalize(1) power2_sum ring_class.ring_distribs(1))\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma polynomial_identity_extended:\n  fixes a b c :: complex\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\"\n    by (auto simp: field_simps)\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute is_num_normalize(1) power2_sum)\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by (smt (z3) ab_semigroup_add_class.add_ac(1) add.assoc add.commute add.left_commute distrib_left is_num_normalize(1) power2_sum ring_class.ring_distribs(1))\n  finally show ?thesis by simp\nqed", "origin": "polynomial_identityV2", "update_count": 0}, "polynomial_identity_factorized": {"skill_name": "polynomial_identity_factorized", "marker": "lemma polynomial_identity_factorized:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma polynomial_identity_factorized:\n  fixes a b c d e f :: complex\n  shows \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\"\nproof -\n  have \"(a + b) * (c + d) = a * (c + d) + b * (c + d)\" by (auto simp: field_simps)\n  thus ?thesis by simp\nqed", "origin": "polynomial_identity_expanded", "update_count": 0}, "simplify_rational": {"skill_name": "simplify_rational", "marker": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\" \n    using assms by (simp add: field_simps)\n  also have \"... = (a * d + c * b) / (b * d)\" \n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\" \n    using assms by (simp add: field_simps)\n  also have \"... = (a * d + c * b) / (b * d)\" \n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "simplify_rationalV2": {"skill_name": "simplify_rationalV2", "marker": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  then have \"a / b + c / d = (a * d + c * b) / (b * d)\"\n    by (smt (verit) add_frac_eq assms(1) assms(2))\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  then have \"a / b + c / d = (a * d + c * b) / (b * d)\"\n    by (smt (verit) add_frac_eq assms(1) assms(2))\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "simplify_rationalV3": {"skill_name": "simplify_rationalV3", "marker": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = a / b + (c * b) / (b * d)\" \n    by (metis add.commute add_cancel_left_left assms(1) divide_cancel_left divide_divide_eq_left' equation_minus_iff group_cancel.neg1 mult.commute neg_equal_0_iff_equal neg_equal_iff_equal nonzero_divide_eq_eq times_divide_eq_left times_divide_eq_right times_divide_times_eq zero_neq_one)\n  then have \"a / b + (c * b) / (b * d) = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (metis assms(2) div_self mult.commute mult_cancel_right2 times_divide_times_eq)\n  then have \"a / b + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (smt (verit) \\<open>a / b + c / d = a / b + c * b / (b * d)\\<close> add_frac_eq assms(1) assms(2))\n  thus ?thesis\n    by (metis \\<open>a / b + c / d = a / b + c * b / (b * d)\\<close> add.commute add_cancel_left_left add_frac_eq assms(1) assms(2) divide_eq_0_iff double_zero_sym frac_eq_eq mult.commute mult.left_commute mult_eq_0_iff nonzero_mult_divide_mult_cancel_right2 times_divide_eq_left)\nqed", "description": "-", "full_code": "lemma simplify_rational:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = a / b + (c * b) / (b * d)\" \n    by (metis add.commute add_cancel_left_left assms(1) divide_cancel_left divide_divide_eq_left' equation_minus_iff group_cancel.neg1 mult.commute neg_equal_0_iff_equal neg_equal_iff_equal nonzero_divide_eq_eq times_divide_eq_left times_divide_eq_right times_divide_times_eq zero_neq_one)\n  then have \"a / b + (c * b) / (b * d) = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (metis assms(2) div_self mult.commute mult_cancel_right2 times_divide_times_eq)\n  then have \"a / b + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (smt (verit) \\<open>a / b + c / d = a / b + c * b / (b * d)\\<close> add_frac_eq assms(1) assms(2))\n  thus ?thesis\n    by (metis \\<open>a / b + c / d = a / b + c * b / (b * d)\\<close> add.commute add_cancel_left_left add_frac_eq assms(1) assms(2) divide_eq_0_iff double_zero_sym frac_eq_eq mult.commute mult.left_commute mult_eq_0_iff nonzero_mult_divide_mult_cancel_right2 times_divide_eq_left)\nqed", "origin": "do_request", "update_count": 0}, "substitute_quadratic": {"skill_name": "substitute_quadratic", "marker": "lemma substitute_quadratic:\n  fixes a b c x k :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  have \"a * x^2 + b * x + c = 0\" using assms by simp\n  then have \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma substitute_quadratic:\n  fixes a b c x k :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  have \"a * x^2 + b * x + c = 0\" using assms by simp\n  then have \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "expand_square": {"skill_name": "expand_square", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "substitute_quadraticV2": {"skill_name": "substitute_quadraticV2", "marker": "lemma substitute_quadratic:\n  fixes a b c x :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  from assms have \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma substitute_quadratic:\n  fixes a b c x :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  from assms have \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "binomial_square_expansion": {"skill_name": "binomial_square_expansion", "marker": "lemma binomial_square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x*x + x*y + y*x + y*y\" by (simp add: algebra_simps)\n  also have \"... = x^2 + 2*x*y + y^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma binomial_square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x*x + x*y + y*x + y*y\" by (simp add: algebra_simps)\n  also have \"... = x^2 + 2*x*y + y^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "expand_square", "update_count": 0}, "difference_of_squares": {"skill_name": "difference_of_squares", "marker": "lemma difference_of_squares:\n  fixes a b :: real\n  shows \"(a - b) * (a + b) = a^2 - b^2\"\nproof -\n  have \"(a - b) * (a + b) = a^2 + a * b - b * a - b^2\" \n    by sos\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma difference_of_squares:\n  fixes a b :: real\n  shows \"(a - b) * (a + b) = a^2 - b^2\"\nproof -\n  have \"(a - b) * (a + b) = a^2 + a * b - b * a - b^2\" \n    by sos\n  then show ?thesis by simp\nqed", "origin": "expand_square", "update_count": 0}, "algebraic_identityV3": {"skill_name": "algebraic_identityV3", "marker": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" \n    by sos\n  also have \"... = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" \n    by sos\n  also have \"... = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "logarithm_properties": {"skill_name": "logarithm_properties", "marker": "lemma logarithm_properties:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"a \\<noteq> 1\" \"b \\<noteq> 1\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\" using log_nat_power[of b a n] by (simp add: assms(1) assms(2))\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma logarithm_properties:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\" \"a \\<noteq> 1\" \"b \\<noteq> 1\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\" using log_nat_power[of b a n] by (simp add: assms(1) assms(2))\n  then show ?thesis by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "square_of_fraction": {"skill_name": "square_of_fraction", "marker": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / (b^2)\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / (b^2)\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expression": {"skill_name": "square_expression", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos", "description": "", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v6", "update_count": -1}, "non_negative_sqrt_inequality": {"skill_name": "non_negative_sqrt_inequality", "marker": "lemma non_negative_sqrt_inequality:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" and \"y \\<ge> 0\"\n  shows \"sqrt (x + y) \\<ge> 0\"\nproof -\n  have \"sqrt (x + y) = sqrt(0 + (x + y))\" by (simp)\n  moreover have \"0 \\<le> (x + y)\" using assms by simp\n  ultimately show \"sqrt (x + y) \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\nqed", "description": "-", "full_code": "lemma non_negative_sqrt_inequality:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" and \"y \\<ge> 0\"\n  shows \"sqrt (x + y) \\<ge> 0\"\nproof -\n  have \"sqrt (x + y) = sqrt(0 + (x + y))\" by (simp)\n  moreover have \"0 \\<le> (x + y)\" using assms by simp\n  ultimately show \"sqrt (x + y) \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\nqed", "origin": "sqrt_non_negativeV3", "update_count": 0}, "sqrt_sum_non_negative": {"skill_name": "sqrt_sum_non_negative", "marker": "lemma sqrt_sum_non_negative:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x + y) \\<ge> 0\"\nproof -\n  have \"x + y \\<ge> 0\" using assms by simp\n  then show \"sqrt(x + y) \\<ge> 0\" using sqrt_non_negative by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  from assms have \"0 \\<le> x\" by simp\n  then show \"sqrt x \\<ge> 0\" using real_sqrt_ge_zero by simp\nqed\n\nlemma sqrt_sum_non_negative:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x + y) \\<ge> 0\"\nproof -\n  have \"x + y \\<ge> 0\" using assms by simp\n  then show \"sqrt(x + y) \\<ge> 0\" using sqrt_non_negative by simp\nqed", "origin": "sqrt_non_negativeV3", "update_count": 0}, "sqrt_non_negativeV5": {"skill_name": "sqrt_non_negativeV5", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  from assms have \"0 \\<le> x\" by simp\n  then show \"sqrt x \\<ge> 0\" using real_sqrt_ge_zero by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  from assms have \"0 \\<le> x\" by simp\n  then show \"sqrt x \\<ge> 0\" using real_sqrt_ge_zero by simp\nqed", "origin": "sqrt_non_negativeV3", "update_count": 0}, "sqrt_non_negative_general": {"skill_name": "sqrt_non_negative_general", "marker": "lemma sqrt_non_negative_general:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x = sqrt(0 + x)\"\nproof -\n  have \"sqrt x = sqrt(0 + x)\" by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative_general:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x = sqrt(0 + x)\"\nproof -\n  have \"sqrt x = sqrt(0 + x)\" by simp\n  then show ?thesis by simp\nqed", "origin": "sqrt_non_negativeV3", "update_count": 0}, "square_of_fractionV2": {"skill_name": "square_of_fractionV2", "marker": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = (a * (1 / b))^2\" by (simp)\n  also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n  also have \"... = a^2 / b^2\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = (a * (1 / b))^2\" by (simp)\n  also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n  also have \"... = a^2 / b^2\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expressionV2": {"skill_name": "square_expressionV2", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + -b)^2\" by simp\n  then show ?thesis by (simp add: power2_eq_square algebra_simps)\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + -b)^2\" by simp\n  then show ?thesis by (simp add: power2_eq_square algebra_simps)\nqed", "origin": "square_expression", "update_count": 0}, "expand_squareV2": {"skill_name": "expand_squareV2", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\nproof -\n  have \"(x + y)^2 = x^2 + 2*x*y + y^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2*x*y + y^2\"\nproof -\n  have \"(x + y)^2 = x^2 + 2*x*y + y^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "expand_squareV3": {"skill_name": "expand_squareV3", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expressionV3": {"skill_name": "square_expressionV3", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (simp add: power2_eq_square algebra_simps)", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (simp add: power2_eq_square algebra_simps)", "origin": "square_expression", "update_count": 0}, "sum_of_squares": {"skill_name": "sum_of_squares", "marker": "lemma sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 = (a + b)^2 - 2*a*b\"\n  by sos", "description": "-", "full_code": "lemma sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 = (a + b)^2 - 2*a*b\"\n  by sos", "origin": "square_expression", "update_count": 0}, "square_expression_extended": {"skill_name": "square_expression_extended", "marker": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b)^2 + c^2 = a^2 - 2*a*b + b^2 + c^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b)^2 + c^2 = a^2 - 2*a*b + b^2 + c^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_extendedV2": {"skill_name": "square_expression_extendedV2", "marker": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*c*(a - b) + c^2\"\n    by sos\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*c*(a - b) + c^2\"\n    by sos\n  finally show ?thesis .\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_factorization": {"skill_name": "square_expression_factorization", "marker": "lemma square_expression_factorization:\n  fixes a b :: real\n  shows \"a^2 - 2*a*b + b^2 = (a - b)^2\"\nproof -\n  have \"a^2 - 2*a*b + b^2 = (a - b)^2\" by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_factorization:\n  fixes a b :: real\n  shows \"a^2 - 2*a*b + b^2 = (a - b)^2\"\nproof -\n  have \"a^2 - 2*a*b + b^2 = (a - b)^2\" by sos\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_extendedV3": {"skill_name": "square_expression_extendedV3", "marker": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c))^2 = (a - b - c)^2\" by sos\n  also have \"... = a^2 - 2*a*(b + c) + (b + c)^2\"\n    by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c))^2 = (a - b - c)^2\" by sos\n  also have \"... = a^2 - 2*a*(b + c) + (b + c)^2\"\n    by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_difference": {"skill_name": "square_difference", "marker": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_sum": {"skill_name": "square_sum", "marker": "lemma square_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  then show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "sqrt_divide": {"skill_name": "sqrt_divide", "marker": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) * sqrt(1 / b)\" \n    by (metis mult.right_neutral real_sqrt_mult times_divide_eq_right)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    by (smt (verit) mult_cancel_left real_sqrt_divide real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) * sqrt(1 / b)\" \n    by (metis mult.right_neutral real_sqrt_mult times_divide_eq_right)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    by (smt (verit) mult_cancel_left real_sqrt_divide real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_divideV2": {"skill_name": "sqrt_divideV2", "marker": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" by (simp)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) / sqrt(b)\" using assms by (simp add: real_sqrt_divide)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" by (simp)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) / sqrt(b)\" using assms by (simp add: real_sqrt_divide)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "combine_fractions": {"skill_name": "combine_fractions", "marker": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / c) + (b / d) = (a * d + b * c) / (c * d)\"\nproof -\n  have \"a / c + b / d = (a * d) / (c * d) + (b * c) / (c * d)\"\n    using assms by (simp add: field_simps)\n  also have \"... = (a * d + b * c) / (c * d)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / c) + (b / d) = (a * d + b * c) / (c * d)\"\nproof -\n  have \"a / c + b / d = (a * d) / (c * d) + (b * c) / (c * d)\"\n    using assms by (simp add: field_simps)\n  also have \"... = (a * d + b * c) / (c * d)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "combined_square_expression": {"skill_name": "combined_square_expression", "marker": "lemma combined_square_expression:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (b - c)^2 + (c - a)^2 = 2*a^2 + 2*b^2 + 2*c^2 - 2*a*b - 2*b*c - 2*c*a\"\nproof -\n  have \" (a - b)^2 + (b - c)^2 + (c - a)^2 = (a^2 - 2*a*b + b^2) + (b^2 - 2*b*c + c^2) + (c^2 - 2*c*a + a^2)\"\n    by (simp add: extended_square_expression)\n  thus ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma extended_square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos\n\nlemma combined_square_expression:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (b - c)^2 + (c - a)^2 = 2*a^2 + 2*b^2 + 2*c^2 - 2*a*b - 2*b*c - 2*c*a\"\nproof -\n  have \" (a - b)^2 + (b - c)^2 + (c - a)^2 = (a^2 - 2*a*b + b^2) + (b^2 - 2*b*c + c^2) + (c^2 - 2*c*a + a^2)\"\n    by (simp add: extended_square_expression)\n  thus ?thesis by (simp add: algebra_simps)\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_with_coefficients_and_c": {"skill_name": "expanded_square_with_coefficients_and_c", "marker": "lemma expanded_square_with_coefficients_and_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\" by sos\n  thus ?thesis by (simp add: expanded_square_with_coefficients)\nqed", "description": "-", "full_code": "lemma expanded_square_with_coefficients:\n  fixes a b c :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos\n\nlemma expanded_square_with_coefficients_and_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\" by sos\n  thus ?thesis by (simp add: expanded_square_with_coefficients)\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_with_coefficients": {"skill_name": "expanded_square_with_coefficients", "marker": "lemma expanded_square_with_coefficients:\n  fixes a b c :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos", "description": "-", "full_code": "lemma expanded_square_with_coefficients:\n  fixes a b c :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos", "origin": "square_expression", "update_count": 0}, "expanded_square_expression": {"skill_name": "expanded_square_expression", "marker": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*(a - b)*c + c^2\"\n    by sos\n  also have \"... = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV2": {"skill_name": "expanded_square_expressionV2", "marker": "lemma expanded_square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - 2 * a * b + b * b\" \n    by sos\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - 2 * a * b + b * b\" \n    by sos\n  thus ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "difference_of_squaresV2": {"skill_name": "difference_of_squaresV2", "marker": "theorem difference_of_squares:\n  fixes a b :: real\n  shows \"(a^2 - b^2) = (a - b) * (a + b)\"\nproof -\n  have \"a^2 - b^2 = (a - b) * (a + b)\" \n    by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem difference_of_squares:\n  fixes a b :: real\n  shows \"(a^2 - b^2) = (a - b) * (a + b)\"\nproof -\n  have \"a^2 - b^2 = (a - b) * (a + b)\" \n    by sos\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "sqrt_divideV3": {"skill_name": "sqrt_divideV3", "marker": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) * sqrt(1 / b)\" \n    by (metis mult.right_neutral real_sqrt_mult times_divide_eq_right)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    by (smt (verit) real_sqrt_divide assms(1) real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) * sqrt(1 / b)\" \n    by (metis mult.right_neutral real_sqrt_mult times_divide_eq_right)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    by (smt (verit) real_sqrt_divide assms(1) real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expression_general": {"skill_name": "square_expression_general", "marker": "lemma square_expression_general:\n  fixes a b :: \"'a::real_normed_field\"\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (smt (verit) diff_add_eq power2_diff)", "description": "-", "full_code": "lemma square_expression_general:\n  fixes a b :: \"'a::real_normed_field\"\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (smt (verit) diff_add_eq power2_diff)", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV3": {"skill_name": "expanded_square_expressionV3", "marker": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b - c)^2 = a^2 - 2*a*b - 2*a*c + b^2 + 2*b*c + c^2\"\nproof -\n  have \"a - b - c = (a - b) - c\" by simp\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b - c)^2 = a^2 - 2*a*b - 2*a*c + b^2 + 2*b*c + c^2\"\nproof -\n  have \"a - b - c = (a - b) - c\" by simp\n  thus ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "sqrt_non_negativeV6": {"skill_name": "sqrt_non_negativeV6", "marker": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by auto\n  also have \"... \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_non_negative:\n  fixes x :: real\n  assumes \"x \\<ge> 0\"\n  shows \"sqrt x \\<ge> 0\"\nproof -\n  have \"sqrt x = sqrt (max x 0)\" \n    using assms by auto\n  also have \"... \\<ge> 0\" \n    using real_sqrt_ge_zero by simp\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expression_combined": {"skill_name": "square_expression_combined", "marker": "lemma square_expression_combined:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (a - c)^2 = 2*a^2 - 2*a*(b + c) + (b^2 + c^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  have \"(a - c)^2 = a^2 - 2*a*c + c^2\" by sos\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_combined:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (a - c)^2 = 2*a^2 - 2*a*(b + c) + (b^2 + c^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  have \"(a - c)^2 = a^2 - 2*a*c + c^2\" by sos\n  thus ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_sum": {"skill_name": "square_expression_sum", "marker": "lemma square_expression_sum:\n  fixes a b c d :: real\n  shows \"(a - b)^2 + (c - d)^2 = a^2 - 2*a*b + b^2 + c^2 - 2*c*d + d^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  have \"(c - d)^2 = c^2 - 2*c*d + d^2\" by sos\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_sum:\n  fixes a b c d :: real\n  shows \"(a - b)^2 + (c - d)^2 = a^2 - 2*a*b + b^2 + c^2 - 2*c*d + d^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by sos\n  have \"(c - d)^2 = c^2 - 2*c*d + d^2\" by sos\n  thus ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV4": {"skill_name": "expanded_square_expressionV4", "marker": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  then show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  then show ?thesis\n    by sos\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV5": {"skill_name": "expanded_square_expressionV5", "marker": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*(a-b)*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = ((a - b) + c)^2\" by simp\n  also have \"... = (a - b)^2 + 2*(a - b)*c + c^2\" by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*(a - b)*c + c^2\" by sos\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*(a-b)*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = ((a - b) + c)^2\" by simp\n  also have \"... = (a - b)^2 + 2*(a - b)*c + c^2\" by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2*(a - b)*c + c^2\" by sos\n  finally show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_expressionV4": {"skill_name": "square_expressionV4", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_differenceV2": {"skill_name": "square_differenceV2", "marker": "lemma square_difference:\n  fixes x y :: real\n  shows \"(x - y) * (x + y) = x^2 - y^2\"\nproof -\n  have \"x^2 - y^2 = (x - y) * (x + y)\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes x y :: real\n  shows \"(x - y) * (x + y) = x^2 - y^2\"\nproof -\n  have \"x^2 - y^2 = (x - y) * (x + y)\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expressionV5": {"skill_name": "square_expressionV5", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_of_binomial": {"skill_name": "square_of_binomial", "marker": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a^2 + a * b + b * a + b^2\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by auto\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * (a + b) + b * (a + b)\" by sos\n  also have \"... = a^2 + a * b + b * a + b^2\" by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" by auto\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "square_of_binomialV2": {"skill_name": "square_of_binomialV2", "marker": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  also have \"... = a^2 + a*b + a*b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by sos\n  also have \"... = a^2 + a*b + a*b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_of_binomialV3": {"skill_name": "square_of_binomialV3", "marker": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "square_of_difference": {"skill_name": "square_of_difference", "marker": "lemma square_of_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2*(-b)*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2*b*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2*(-b)*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2*b*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_generalV2": {"skill_name": "square_expression_generalV2", "marker": "lemma square_expression_general:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*b*c + 2*c*a\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by sos\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_general:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*b*c + 2*c*a\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by sos\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_of_binomialV4": {"skill_name": "square_of_binomialV4", "marker": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + b^2 + a*b + a*b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_of_binomial:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b)^2 = (a + b) * (a + b)\" by (simp add: power2_eq_square)\n  also have \"... = a * a + a * b + b * a + b * b\" \n    by sos\n  also have \"... = a^2 + b^2 + a*b + a*b\" \n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "square_expression_n_dim": {"skill_name": "square_expression_n_dim", "marker": "lemma square_expression_n_dim:\n  fixes a b :: \"real set\"\n  shows \"(\\<forall>x \\<in> a. \\<forall>y \\<in> b. (x - y)^2 = x^2 - 2*x*y + y^2)\"\nproof -\n  have \"(\\<forall>x \\<in> a. (x - y)^2 = x^2 - 2*x*y + y^2)\"\n    for y \n    by (smt (verit) diff_add_eq power2_diff)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma square_expression_n_dim:\n  fixes a b :: \"real set\"\n  shows \"(\\<forall>x \\<in> a. \\<forall>y \\<in> b. (x - y)^2 = x^2 - 2*x*y + y^2)\"\nproof -\n  have \"(\\<forall>x \\<in> a. (x - y)^2 = x^2 - 2*x*y + y^2)\"\n    for y \n    by (smt (verit) diff_add_eq power2_diff)\n  then show ?thesis by auto\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_multi": {"skill_name": "square_expression_multi", "marker": "fun square_expression_multi :: \"real list \\<Rightarrow> real\" where\n  \"square_expression_multi [] = 0\" |\n  \"square_expression_multi (x # xs) = x^2 + square_expression_multi xs\"", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos\n\nfun square_expression_multi :: \"real list \\<Rightarrow> real\" where\n  \"square_expression_multi [] = 0\" |\n  \"square_expression_multi (x # xs) = x^2 + square_expression_multi xs\"", "origin": "square_expression", "update_count": 0}, "sum_of_squaresV2": {"skill_name": "sum_of_squaresV2", "marker": "lemma sum_of_squares:\n  fixes xs :: \"real list\"\n  shows \"square_expression_multi xs = sum_list (map (\\<lambda>x. x^2) xs)\"\nproof (induction xs)\n  case Nil\n  then show ?case by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (auto)\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by sos\n\nfun square_expression_multi :: \"real list \\<Rightarrow> real\" where\n  \"square_expression_multi [] = 0\" |\n  \"square_expression_multi (x # xs) = x^2 + square_expression_multi xs\"\n\nlemma sum_of_squares:\n  fixes xs :: \"real list\"\n  shows \"square_expression_multi xs = sum_list (map (\\<lambda>x. x^2) xs)\"\nproof (induction xs)\n  case Nil\n  then show ?case by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (auto)\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_generalized_with_c": {"skill_name": "square_expression_generalized_with_c", "marker": "lemma square_expression_generalized_with_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\n  by sos", "description": "-", "full_code": "lemma square_expression_generalized:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (simp add: power2_diff)\n\nlemma square_expression_generalized_with_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*c*(a - b) + c^2\"\n  by sos", "origin": "square_expression", "update_count": 0}, "square_expression_expanded": {"skill_name": "square_expression_expanded", "marker": "lemma square_expression_expanded:\n  fixes a b c :: real\n  shows \"(a + b - c)^2 = a^2 + 2*a*b - 2*a*c + b^2 - 2*b*c + c^2\"\nproof -\n  have \"(a + b - c)^2 = (a + b)^2 - 2*(a + b)*c + c^2\" by sos\n  also have \"... = a^2 + 2*a*b + b^2 - 2*(a + b)*c + c^2\" by sos\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_expanded:\n  fixes a b c :: real\n  shows \"(a + b - c)^2 = a^2 + 2*a*b - 2*a*c + b^2 - 2*b*c + c^2\"\nproof -\n  have \"(a + b - c)^2 = (a + b)^2 - 2*(a + b)*c + c^2\" by sos\n  also have \"... = a^2 + 2*a*b + b^2 - 2*(a + b)*c + c^2\" by sos\n  finally show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_difference_formula": {"skill_name": "square_difference_formula", "marker": "lemma square_difference_formula:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (simp add: power2_diff)", "description": "-", "full_code": "lemma square_difference_formula:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\n  by (simp add: power2_diff)", "origin": "square_expression", "update_count": 0}, "expand_squareV4": {"skill_name": "expand_squareV4", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV6": {"skill_name": "expanded_square_expressionV6", "marker": "lemma expanded_square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2*(-b)*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2*a*b + a^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2*(-b)*a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2*a*b + a^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_real": {"skill_name": "square_expression_real", "marker": "lemma square_expression_real:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by (simp add: power2_eq_square algebra_simps)\nqed", "description": "-", "full_code": "lemma square_expression_real:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by (simp add: power2_eq_square algebra_simps)\nqed", "origin": "square_expression", "update_count": 0}, "expand_squareV5": {"skill_name": "expand_squareV5", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2 * a * (-b) + (-b)^2\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expression_composite": {"skill_name": "square_expression_composite", "marker": "lemma square_expression_composite:\n  fixes a b c d :: real\n  shows \"(a + b + c + d)^2 = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\nproof -\n  have \"a + b + c + d = (a + b) + (c + d)\" by simp\n  then have \"(a + b + c + d)^2 = ((a + b) + (c + d))^2\" by presburger\n  also have \"... = (a + b)^2 + (c + d)^2 + 2*(a + b)*(c + d)\" by sos\n  also have \"... = (a^2 + 2*a*b + b^2) + (c^2 + 2*c*d + d^2) + 2*(a + b)*(c + d)\" \n    by sos\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_composite:\n  fixes a b c d :: real\n  shows \"(a + b + c + d)^2 = a^2 + b^2 + c^2 + d^2 + 2*(a*b + a*c + a*d + b*c + b*d + c*d)\"\nproof -\n  have \"a + b + c + d = (a + b) + (c + d)\" by simp\n  then have \"(a + b + c + d)^2 = ((a + b) + (c + d))^2\" by presburger\n  also have \"... = (a + b)^2 + (c + d)^2 + 2*(a + b)*(c + d)\" by sos\n  also have \"... = (a^2 + 2*a*b + b^2) + (c^2 + 2*c*d + d^2) + 2*(a + b)*(c + d)\" \n    by sos\n  finally show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_sumV2": {"skill_name": "square_expression_sumV2", "marker": "lemma square_expression_sum:\n  fixes a b c d :: real\n  shows \"(a + b - c - d)^2 = a^2 + b^2 + c^2 + d^2 + 2*a*b - 2*a*c - 2*a*d - 2*b*c - 2*b*d + 2*c*d\"\nproof -\n  have \"(a + b - c - d)^2 = ((a + b) - (c + d))^2\" by sos\n  also have \"... = (a + b)^2 - 2*(a + b)*(c + d) + (c + d)^2\" by sos\n  also have \"... = (a^2 + 2*a*b + b^2) - 2*(a*c + a*d + b*c + b*d) + (c^2 + 2*c*d + d^2)\" \n    by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_sum:\n  fixes a b c d :: real\n  shows \"(a + b - c - d)^2 = a^2 + b^2 + c^2 + d^2 + 2*a*b - 2*a*c - 2*a*d - 2*b*c - 2*b*d + 2*c*d\"\nproof -\n  have \"(a + b - c - d)^2 = ((a + b) - (c + d))^2\" by sos\n  also have \"... = (a + b)^2 - 2*(a + b)*(c + d) + (c + d)^2\" by sos\n  also have \"... = (a^2 + 2*a*b + b^2) - 2*(a*c + a*d + b*c + b*d) + (c^2 + 2*c*d + d^2)\" \n    by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_combinedV2": {"skill_name": "square_expression_combinedV2", "marker": "lemma square_expression_combined:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (b - c)^2 = a^2 - 2 * a * b + b^2 + b^2 - 2 * b * c + c^2\"\nproof -\n  have \"(a - b)^2 + (b - c)^2 = (a^2 - 2 * a * b + b^2) + (b^2 - 2 * b * c + c^2)\"\n    by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_combined:\n  fixes a b c :: real\n  shows \"(a - b)^2 + (b - c)^2 = a^2 - 2 * a * b + b^2 + b^2 - 2 * b * c + c^2\"\nproof -\n  have \"(a - b)^2 + (b - c)^2 = (a^2 - 2 * a * b + b^2) + (b^2 - 2 * b * c + c^2)\"\n    by sos\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_extendedV4": {"skill_name": "square_expression_extendedV4", "marker": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = ((a - b) + c)^2\" by simp\n  then have \"... = (a - b)^2 + 2 * (a - b) * c + c^2\" by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2 * (a - b) * c + c^2\" by sos\n  also have \"... = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\" by sos\n  finally show ?thesis.\nqed", "description": "-", "full_code": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\"\nproof -\n  have \"(a - b + c)^2 = ((a - b) + c)^2\" by simp\n  then have \"... = (a - b)^2 + 2 * (a - b) * c + c^2\" by sos\n  also have \"... = (a^2 - 2*a*b + b^2) + 2 * (a - b) * c + c^2\" by sos\n  also have \"... = a^2 - 2*a*b + b^2 + 2*a*c - 2*b*c + c^2\" by sos\n  finally show ?thesis.\nqed", "origin": "square_expression", "update_count": 0}, "square_expressionV6": {"skill_name": "square_expressionV6", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" by (simp add: algebra_simps)\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "quadratic_form": {"skill_name": "quadratic_form", "marker": "lemma quadratic_form:\n  fixes a b c x :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"(a * x^2 + b * x) = -c\"\nproof -\n  have \"a * x^2 + b * x = -c\" using assms by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma quadratic_form:\n  fixes a b c x :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"(a * x^2 + b * x) = -c\"\nproof -\n  have \"a * x^2 + b * x = -c\" using assms by simp\n  thus ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_generalV3": {"skill_name": "square_expression_generalV3", "marker": "lemma square_expression_general:\n  fixes a b c d :: real\n  shows \"(a - (b + c + d))^2 = a^2 - 2*a*(b + c + d) + (b + c + d)^2\"\nproof -\n  have \"(a - (b + c + d))^2 = (a - b - c - d)^2\" by sos\n  also have \"... = a^2 - 2*(a)*(b + c + d) + (b + c + d)^2\" by sos\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_expression_general:\n  fixes a b c d :: real\n  shows \"(a - (b + c + d))^2 = a^2 - 2*a*(b + c + d) + (b + c + d)^2\"\nproof -\n  have \"(a - (b + c + d))^2 = (a - b - c - d)^2\" by sos\n  also have \"... = a^2 - 2*(a)*(b + c + d) + (b + c + d)^2\" by sos\n  finally show ?thesis .\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_extendedV5": {"skill_name": "square_expression_extendedV5", "marker": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b - c)^2 = a^2 - 2*a*b - 2*a*c + b^2 + 2*b*c + c^2\"\nproof -\n  have \"(a - b - c)^2 = (a - (b + c))^2\" by sos\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_extended:\n  fixes a b c :: real\n  shows \"(a - b - c)^2 = a^2 - 2*a*b - 2*a*c + b^2 + 2*b*c + c^2\"\nproof -\n  have \"(a - b - c)^2 = (a - (b + c))^2\" by sos\n  then show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_with_coefficients": {"skill_name": "square_expression_with_coefficients", "marker": "lemma square_expression_with_coefficients:\n  fixes a b c d :: \"'a::field\"\n  shows \"(a - b)^2 + (c - d)^2 = (a^2 - 2*a*b + b^2) + (c^2 - 2*c*d + d^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by (simp add: square_expression_general)\n  have \"(c - d)^2 = c^2 - 2*c*d + d^2\" by (simp add: square_expression_general)\n  thus ?thesis by (metis power2_eq_square square_expression_general)\nqed", "description": "-", "full_code": "lemma square_expression_general:\n  fixes a b :: \"'a::field\"\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - b * a - a * b + b * b\" by (auto simp: field_simps)\n  then show ?thesis by (smt (verit) diff_add_eq_diff_diff_swap distrib_right mult.commute mult_2 power2_eq_square)\nqed\n\nlemma square_expression_with_coefficients:\n  fixes a b c d :: \"'a::field\"\n  shows \"(a - b)^2 + (c - d)^2 = (a^2 - 2*a*b + b^2) + (c^2 - 2*c*d + d^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2*a*b + b^2\" by (simp add: square_expression_general)\n  have \"(c - d)^2 = c^2 - 2*c*d + d^2\" by (simp add: square_expression_general)\n  thus ?thesis by (metis power2_eq_square square_expression_general)\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_generalV4": {"skill_name": "square_expression_generalV4", "marker": "lemma square_expression_general:\n  fixes a b :: \"'a::field\"\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - b * a - a * b + b * b\" by (auto simp: field_simps)\n  then show ?thesis by (smt (verit) diff_add_eq_diff_diff_swap distrib_right mult.commute mult_2 power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_expression_general:\n  fixes a b :: \"'a::field\"\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - b * a - a * b + b * b\" by (auto simp: field_simps)\n  then show ?thesis by (smt (verit) diff_add_eq_diff_diff_swap distrib_right mult.commute mult_2 power2_eq_square)\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_generalized": {"skill_name": "square_expression_generalized", "marker": "lemma square_expression_generalized:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2 * a * (b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c)) * (a - (b + c)) = a^2 - 2 * a * (b + c) + (b + c)^2\"\n    by sos\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_generalized:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2 * a * (b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c)) * (a - (b + c)) = a^2 - 2 * a * (b + c) + (b + c)^2\"\n    by sos\n  thus ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_expression_expandedV2": {"skill_name": "square_expression_expandedV2", "marker": "lemma square_expression_expanded:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - 2 * a * b + b * b\"\n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_expression_expanded:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * a - 2 * a * b + b * b\"\n    by (simp add: algebra_simps)\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "origin": "square_expression", "update_count": 0}, "simplify_square_root": {"skill_name": "simplify_square_root", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a) / b = sqrt(a / (b^2))\"\nproof -\n  have \"sqrt(a) / b = sqrt(a) * (1 / b)\" by (simp)\n  also have \"... = sqrt(a) * sqrt(1 / (b^2))\" by (smt (verit) assms less_eq_real_def mult_cancel_left real_sqrt_divide real_sqrt_one real_sqrt_pow2_iff real_sqrt_power)\n  also have \"... = sqrt(a * (1 / (b^2)))\" using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a / (b^2))\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a) / b = sqrt(a / (b^2))\"\nproof -\n  have \"sqrt(a) / b = sqrt(a) * (1 / b)\" by (simp)\n  also have \"... = sqrt(a) * sqrt(1 / (b^2))\" by (smt (verit) assms less_eq_real_def mult_cancel_left real_sqrt_divide real_sqrt_one real_sqrt_pow2_iff real_sqrt_power)\n  also have \"... = sqrt(a * (1 / (b^2)))\" using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a / (b^2))\" by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expression_with_c": {"skill_name": "square_expression_with_c", "marker": "lemma square_expression_with_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2 * a * b + b^2 + 2 * (a - b) * c + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2 * (a - b) * c + c^2\" by sos\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression_with_c:\n  fixes a b c :: real\n  shows \"(a - b + c)^2 = a^2 - 2 * a * b + b^2 + 2 * (a - b) * c + c^2\"\nproof -\n  have \"(a - b + c)^2 = (a - b)^2 + 2 * (a - b) * c + c^2\" by sos\n  then show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_differenceV3": {"skill_name": "square_differenceV3", "marker": "lemma square_difference:\n  fixes x y :: real\n  shows \"(x - y)^2 = x^2 - 2*x*y + y^2\"\n  by sos", "description": "-", "full_code": "lemma square_difference:\n  fixes x y :: real\n  shows \"(x - y)^2 = x^2 - 2*x*y + y^2\"\n  by sos", "origin": "square_expression", "update_count": 0}, "general_square_expression": {"skill_name": "general_square_expression", "marker": "lemma general_square_expression:\n  fixes x y :: real\n  shows \"(x - y)^2 = x^2 - 2*x*y + y^2\"\n  by (simp add: power2_diff)", "description": "-", "full_code": "lemma general_square_expression:\n  fixes x y :: real\n  shows \"(x - y)^2 = x^2 - 2*x*y + y^2\"\n  by (simp add: power2_diff)", "origin": "square_expression", "update_count": 0}, "square_expression_parametrized": {"skill_name": "square_expression_parametrized", "marker": "lemma square_expression_parametrized:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" by sos\n  also have \"... = a * a - a * b - b * a + b * b\" by (simp add: algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_parametrized:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" by sos\n  also have \"... = a * a - a * b - b * a + b * b\" by (simp add: algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_of_fractionV3": {"skill_name": "square_of_fractionV3", "marker": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\n  using assms by (simp add: power2_eq_square)", "description": "", "full_code": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\n  using assms by (simp add: power2_eq_square)", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v21", "update_count": -1}, "square_expressionV7": {"skill_name": "square_expressionV7", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2 * (-b) * a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2 * b * a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(-b + a)^2 = (-b)^2 + 2 * (-b) * a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = b^2 - 2 * b * a + a^2\" by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_root_expression": {"skill_name": "square_root_expression", "marker": "lemma square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\n  using assms square_difference by auto", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by simp\nqed\n\nlemma square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\n  using assms square_difference by auto", "origin": "square_expression", "update_count": 0}, "simplify_square_rootV2": {"skill_name": "simplify_square_rootV2", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n    using assms \n    by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n    using assms \n    by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_rootV3": {"skill_name": "simplify_square_rootV3", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" if \"a \\<ge> 0\" and \"b \\<ge> 0\" for a b\n  proof -\n    have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n      using that by (metis real_sqrt_mult)\n    thus ?thesis .\n  qed\n  thus ?thesis using assms by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" if \"a \\<ge> 0\" and \"b \\<ge> 0\" for a b\n  proof -\n    have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n      using that by (metis real_sqrt_mult)\n    thus ?thesis .\n  qed\n  thus ?thesis using assms by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_rootV4": {"skill_name": "simplify_square_rootV4", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b) \\<or> (a = 0 \\<and> b = 0)\"\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by auto\n  next\n    case False\n    then have \"sqrt(a) > 0\" using assms(1) by auto\n    then show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(1) by auto\n    next\n      case False\n      then have \"sqrt(b) > 0\" using assms(2) by auto\n      have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b) \\<or> (a = 0 \\<and> b = 0)\"\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by auto\n  next\n    case False\n    then have \"sqrt(a) > 0\" using assms(1) by auto\n    then show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(1) by auto\n    next\n      case False\n      then have \"sqrt(b) > 0\" using assms(2) by auto\n      have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\n  then show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "square_differenceV4": {"skill_name": "square_differenceV4", "marker": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\"\n    by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\"\n    by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "square_root_relation": {"skill_name": "square_root_relation", "marker": "lemma square_root_relation:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt(a) = sqrt(b) \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt(a) = sqrt(b) \\<longrightarrow> a = b\"\n    using assms by auto\n  moreover have \"a = b \\<longrightarrow> sqrt(a) = sqrt(b)\"\n    using assms by auto\n  ultimately show ?thesis by blast\nqed", "description": "", "full_code": "lemma square_root_relation:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt(a) = sqrt(b) \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt(a) = sqrt(b) \\<longrightarrow> a = b\"\n    using assms by auto\n  moreover have \"a = b \\<longrightarrow> sqrt(a) = sqrt(b)\"\n    using assms by auto\n  ultimately show ?thesis by blast\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v24", "update_count": -1}, "square_of_fraction_extended": {"skill_name": "square_of_fraction_extended", "marker": "lemma square_of_fraction_extended:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / (b * c))^2 = a^2 / (b^2 * c^2)\"\n  using assms by (auto simp: field_simps)", "description": "-", "full_code": "lemma square_of_fraction_extended:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / (b * c))^2 = a^2 / (b^2 * c^2)\"\n  using assms by (auto simp: field_simps)", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_variable": {"skill_name": "square_of_fraction_variable", "marker": "lemma square_of_fraction_variable:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"((a / b) * c)^2 = (a^2 * c^2) / (b^2)\"\nproof -\n  have \"((a / b) * c)^2 = (a * c / b)^2\" by simp\n  also have \"... = (a * c)^2 / b^2\" by (auto simp: field_simps)\n  also have \"... = a^2 * c^2 / b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_variable:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"((a / b) * c)^2 = (a^2 * c^2) / (b^2)\"\nproof -\n  have \"((a / b) * c)^2 = (a * c / b)^2\" by simp\n  also have \"... = (a * c)^2 / b^2\" by (auto simp: field_simps)\n  also have \"... = a^2 * c^2 / b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_expression_simplified": {"skill_name": "square_expression_simplified", "marker": "lemma square_expression_simplified:\n  fixes a b :: real\n  assumes \"a = c + d\" and \"b = e + f\"\n  shows \"(a - b)^2 = (c - e)^2 + (d - f)^2 + 2*(c - e)*(d - f)\"\nproof -\n  have \"(a - b) = ((c + d) - (e + f))\" using assms by simp\n  then show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma square_expression_simplified:\n  fixes a b :: real\n  assumes \"a = c + d\" and \"b = e + f\"\n  shows \"(a - b)^2 = (c - e)^2 + (d - f)^2 + 2*(c - e)*(d - f)\"\nproof -\n  have \"(a - b) = ((c + d) - (e + f))\" using assms by simp\n  then show ?thesis\n    by sos\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_identity": {"skill_name": "expanded_square_identity", "marker": "lemma expanded_square_identity:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by (simp add: square_expression_generalized)\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression_generalized:\n  fixes a b c :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\n  by sos\n\nlemma expanded_square_identity:\n  fixes a b c :: real\n  shows \"(a + b + c)^2 = a^2 + b^2 + c^2 + 2*a*b + 2*a*c + 2*b*c\"\nproof -\n  have \"(a + b + c)^2 = (a + (b + c))^2\" by sos\n  also have \"... = a^2 + 2*a*(b + c) + (b + c)^2\" by (simp add: square_expression_generalized)\n  also have \"... = a^2 + 2*a*b + 2*a*c + (b^2 + 2*b*c + c^2)\" by sos\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "difference_of_squaresV3": {"skill_name": "difference_of_squaresV3", "marker": "lemma difference_of_squares:\n  fixes a b :: real\n  shows \"(a^2 - b^2) = (a - b) * (a + b)\"\n  by sos", "description": "-", "full_code": "lemma difference_of_squares:\n  fixes a b :: real\n  shows \"(a^2 - b^2) = (a - b) * (a + b)\"\n  by sos", "origin": "square_expression", "update_count": 0}, "square_expressionV8": {"skill_name": "square_expressionV8", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"a - b = a + (-b)\" by simp\n  hence \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"(a - b)^2 = a^2 + 2*a*(-b) + (-b)^2\" \n    by sos\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"a - b = a + (-b)\" by simp\n  hence \"(a - b)^2 = (a + (-b))^2\" by simp\n  then have \"(a - b)^2 = a^2 + 2*a*(-b) + (-b)^2\" \n    by sos\n  thus ?thesis by (simp add: power2_eq_square)\nqed", "origin": "square_expression", "update_count": 0}, "square_root_relation_generalized": {"skill_name": "square_root_relation_generalized", "marker": "lemma square_root_relation_generalized:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) = sqrt(y) \\<longleftrightarrow> x = y\"\nproof -\n  have \"sqrt(x) = sqrt(y) \\<longrightarrow> x = y\"\n    using assms by auto\n  moreover have \"x = y \\<longrightarrow> sqrt(x) = sqrt(y)\"\n    using assms by auto\n  ultimately show ?thesis by blast\nqed", "description": "-", "full_code": "lemma square_root_relation_generalized:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) = sqrt(y) \\<longleftrightarrow> x = y\"\nproof -\n  have \"sqrt(x) = sqrt(y) \\<longrightarrow> x = y\"\n    using assms by auto\n  moreover have \"x = y \\<longrightarrow> sqrt(x) = sqrt(y)\"\n    using assms by auto\n  ultimately show ?thesis by blast\nqed", "origin": "square_root_relation", "update_count": 0}, "square_root_relation_parametrized": {"skill_name": "square_root_relation_parametrized", "marker": "lemma square_root_relation_parametrized:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) = sqrt(y) \\<longleftrightarrow> x = y\"\n  using square_root_relation_generalized[of x y] by simp", "description": "-", "full_code": "lemma square_root_relation_generalized:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt(a) = sqrt(b) \\<longleftrightarrow> a = b\"\nproof -\n  have \"sqrt(a) = sqrt(b) \\<longrightarrow> a = b\"\n    using assms by auto\n  moreover have \"a = b \\<longrightarrow> sqrt(a) = sqrt(b)\"\n    using assms by auto\n  ultimately show ?thesis by blast\nqed\n\nlemma square_root_relation_parametrized:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) = sqrt(y) \\<longleftrightarrow> x = y\"\n  using square_root_relation_generalized[of x y] by simp", "origin": "square_root_relation", "update_count": 0}, "sqrt_of_fraction": {"skill_name": "sqrt_of_fraction", "marker": "lemma sqrt_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n  using assms by (metis real_sqrt_divide)", "description": "-", "full_code": "lemma sqrt_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n  using assms by (metis real_sqrt_divide)", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fractionV4": {"skill_name": "square_of_fractionV4", "marker": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b) * (a / b) = a * a / (b * b)\" by (simp add: field_simps)\n  then show ?thesis by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b) * (a / b) = a * a / (b * b)\" by (simp add: field_simps)\n  then show ?thesis by (simp add: power2_eq_square)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fractionV5": {"skill_name": "square_of_fractionV5", "marker": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / (b * b)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma square_of_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / (b * b)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "simplify_square_rootV5": {"skill_name": "simplify_square_rootV5", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by auto\n  next\n    case False\n    then have \"sqrt(a) > 0\" using assms(1) by auto\n    then show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(2) by auto\n    next\n      case False\n      then have \"sqrt(b) > 0\" using assms(2) by auto\n      then have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by auto\n  next\n    case False\n    then have \"sqrt(a) > 0\" using assms(1) by auto\n    then show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(2) by auto\n    next\n      case False\n      then have \"sqrt(b) > 0\" using assms(2) by auto\n      then have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\n  thus ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "square_expression_with_cV2": {"skill_name": "square_expression_with_cV2", "marker": "lemma square_expression_with_c:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c))^2 = (a - b - c)^2\"\n    by sos\n  then show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma square_expression_with_c:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(a - (b + c))^2 = (a - b - c)^2\"\n    by sos\n  then show ?thesis\n    by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_of_fraction_generalized": {"skill_name": "square_of_fraction_generalized", "marker": "lemma square_of_fraction_generalized:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"b > 0 \\<or> b < 0\" using assms by auto\n  then show ?thesis\n    using assms by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_of_fraction_generalized:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"b > 0 \\<or> b < 0\" using assms by auto\n  then show ?thesis\n    using assms by (simp add: power2_eq_square)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "sqrt_nonnegativity": {"skill_name": "sqrt_nonnegativity", "marker": "lemma sqrt_nonnegativity:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x) + sqrt(y) = sqrt(x) + sqrt(y) + 0\" by simp\n  then have \"sqrt(x) + sqrt(y) - sqrt(x + y) >= 0\" using assms by (smt (verit) le_diff_eq sqrt_add_le_add_sqrt)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_nonnegativity:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"sqrt(x) + sqrt(y) >= sqrt(x + y)\"\nproof -\n  have \"sqrt(x) + sqrt(y) = sqrt(x) + sqrt(y) + 0\" by simp\n  then have \"sqrt(x) + sqrt(y) - sqrt(x + y) >= 0\" using assms by (smt (verit) le_diff_eq sqrt_add_le_add_sqrt)\n  then show ?thesis by simp\nqed", "origin": "square_root_relation", "update_count": 0}, "substitute_quadraticV3": {"skill_name": "substitute_quadraticV3", "marker": "lemma substitute_quadratic:\n  fixes a b c x k :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  from assms have \"a * x^2 + b * x + c = 0\" \n    by simp\n  then show \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma substitute_quadratic:\n  fixes a b c x k :: real\n  assumes \"a * x^2 + b * x + c = 0\"\n  shows \"c = - (a * x^2 + b * x)\"\nproof -\n  from assms have \"a * x^2 + b * x + c = 0\" \n    by simp\n  then show \"c = - (a * x^2 + b * x)\" \n    by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "square_root_propertiesV2": {"skill_name": "square_root_propertiesV2", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt((sqrt(a) + sqrt(b))^2)\" \n    by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt(a + b + 2*sqrt(a)*sqrt(b))\" \n    by (smt (verit) assms(1) assms(2) power2_sum real_sqrt_eq_iff real_sqrt_pow2_iff)\n  also have \"... = sqrt(a + b + 2*sqrt(a*b))\"\n    using assms by (simp add: real_sqrt_mult)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt((sqrt(a) + sqrt(b))^2)\" \n    by (metis add_nonneg_nonneg assms(1) assms(2) real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt(a + b + 2*sqrt(a)*sqrt(b))\" \n    by (smt (verit) assms(1) assms(2) power2_sum real_sqrt_eq_iff real_sqrt_pow2_iff)\n  also have \"... = sqrt(a + b + 2*sqrt(a*b))\"\n    using assms by (simp add: real_sqrt_mult)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_root_propertiesV3": {"skill_name": "square_root_propertiesV3", "marker": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt(sqrt(a)^2 + sqrt(b)^2 + 2*sqrt(a)*sqrt(b))\"\n    by (metis add_nonneg_nonneg assms(1) assms(2) power2_sum real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt((sqrt(a) + sqrt(b))^2)\"\n    by (metis add_nonneg_nonneg assms(1) assms(2) calculation real_sqrt_ge_zero real_sqrt_unique)\n  finally show ?thesis\n    by (metis \\<open>sqrt a + sqrt b = sqrt ((sqrt a)\\<^sup>2 + (sqrt b)\\<^sup>2 + 2 * sqrt a * sqrt b)\\<close> ab_semigroup_mult_class.mult_ac(1) add.left_commute assms(1) assms(2) is_num_normalize(1) real_sqrt_mult real_sqrt_pow2_iff)\nqed", "description": "-", "full_code": "lemma square_root_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) + sqrt(b) = sqrt(a + b + 2*sqrt(a*b))\"\nproof -\n  have \"sqrt(a) + sqrt(b) = sqrt(sqrt(a)^2 + sqrt(b)^2 + 2*sqrt(a)*sqrt(b))\"\n    by (metis add_nonneg_nonneg assms(1) assms(2) power2_sum real_sqrt_ge_zero real_sqrt_unique)\n  also have \"... = sqrt((sqrt(a) + sqrt(b))^2)\"\n    by (metis add_nonneg_nonneg assms(1) assms(2) calculation real_sqrt_ge_zero real_sqrt_unique)\n  finally show ?thesis\n    by (metis \\<open>sqrt a + sqrt b = sqrt ((sqrt a)\\<^sup>2 + (sqrt b)\\<^sup>2 + 2 * sqrt a * sqrt b)\\<close> ab_semigroup_mult_class.mult_ac(1) add.left_commute assms(1) assms(2) is_num_normalize(1) real_sqrt_mult real_sqrt_pow2_iff)\nqed", "origin": "do_request", "update_count": 0}, "generalized_square_expression": {"skill_name": "generalized_square_expression", "marker": "lemma generalized_square_expression:\n  fixes a b c d :: real\n  shows \"(a - (b + c + d))^2 = a^2 - 2*a*(b + c + d) + (b + c + d)^2\"\nproof -\n  have \"(b + c + d)^2 = b^2 + c^2 + d^2 + 2*(b*c + c*d + b*d)\" \n    by sos\n  then show ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma generalized_square_expression:\n  fixes a b c d :: real\n  shows \"(a - (b + c + d))^2 = a^2 - 2*a*(b + c + d) + (b + c + d)^2\"\nproof -\n  have \"(b + c + d)^2 = b^2 + c^2 + d^2 + 2*(b*c + c*d + b*d)\" \n    by sos\n  then show ?thesis \n    by sos\nqed", "origin": "square_expression", "update_count": 0}, "expanded_square_expressionV7": {"skill_name": "expanded_square_expressionV7", "marker": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(b + c)^2 = b^2 + 2*b*c + c^2\" by sos\n  then show ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma expanded_square_expression:\n  fixes a b c :: real\n  shows \"(a - (b + c))^2 = a^2 - 2*a*(b + c) + (b + c)^2\"\nproof -\n  have \"(b + c)^2 = b^2 + 2*b*c + c^2\" by sos\n  then show ?thesis \n    by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_difference_property": {"skill_name": "square_difference_property", "marker": "lemma square_difference_property:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"(a - b)^2 = a^2 + b^2 - 2 * a * b\"\n  using assms by sos", "description": "-", "full_code": "lemma square_difference_property:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"(a - b)^2 = a^2 + b^2 - 2 * a * b\"\n  using assms by sos", "origin": "square_expression", "update_count": 0}, "simplify_square_root_expressionV3": {"skill_name": "simplify_square_root_expressionV3", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = (a - sqrt b) * (a - sqrt b)\" by (metis power2_eq_square)\n  also have \"... = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (metis calculation square_difference)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using assms by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed\n\nlemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = (a - sqrt b) * (a - sqrt b)\" by (metis power2_eq_square)\n  also have \"... = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (metis calculation square_difference)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using assms by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV4": {"skill_name": "simplify_square_root_expressionV4", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"a - sqrt b = a - (sqrt b)\" by simp\n  then have \"(a - sqrt b)^2 = (a - sqrt b) * (a - sqrt b)\" by (metis power2_eq_square)\n  also have \"... = a^2 - 2*a*(sqrt b) + (sqrt b)^2\" \n    using square_difference by (metis calculation)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using assms by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b + a)^2 = a^2 - 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed\n\nlemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"a - sqrt b = a - (sqrt b)\" by simp\n  then have \"(a - sqrt b)^2 = (a - sqrt b) * (a - sqrt b)\" by (metis power2_eq_square)\n  also have \"... = a^2 - 2*a*(sqrt b) + (sqrt b)^2\" \n    using square_difference by (metis calculation)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using assms by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_sqrt": {"skill_name": "non_negative_sqrt", "marker": "lemma non_negative_sqrt:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt(a) >= 0\"\nproof -\n  have \"sqrt(a) = sqrt(0 + a)\" using assms by simp\n  then show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "description": "-", "full_code": "lemma non_negative_sqrt:\n  fixes a :: real\n  assumes \"a >= 0\"\n  shows \"sqrt(a) >= 0\"\nproof -\n  have \"sqrt(a) = sqrt(0 + a)\" using assms by simp\n  then show ?thesis by (metis assms real_sqrt_ge_zero)\nqed", "origin": "square_root_relation", "update_count": 0}, "square_root_inequality": {"skill_name": "square_root_inequality", "marker": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt(a) < sqrt(b) \\<longleftrightarrow> a < b\"\nproof -\n  have \"sqrt(a) < sqrt(b) \\<longrightarrow> a < b\" \n    using assms by auto \n  moreover have \"a < b \\<longrightarrow> sqrt(a) < sqrt(b)\" \n    using assms by auto \n  ultimately show ?thesis by blast\nqed", "description": "-", "full_code": "lemma square_root_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"sqrt(a) < sqrt(b) \\<longleftrightarrow> a < b\"\nproof -\n  have \"sqrt(a) < sqrt(b) \\<longrightarrow> a < b\" \n    using assms by auto \n  moreover have \"a < b \\<longrightarrow> sqrt(a) < sqrt(b)\" \n    using assms by auto \n  ultimately show ?thesis by blast\nqed", "origin": "square_root_relation", "update_count": 0}, "simplify_square_root_expressionV5": {"skill_name": "simplify_square_root_expressionV5", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have left: \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (smt (verit) diff_add_eq power2_diff)\n  have right: \"(sqrt b)^2 = b\" \n    using assms by (simp add: power2_eq_square)\n  show ?thesis \n    using left right by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have left: \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (smt (verit) diff_add_eq power2_diff)\n  have right: \"(sqrt b)^2 = b\" \n    using assms by (simp add: power2_eq_square)\n  show ?thesis \n    using left right by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV6": {"skill_name": "simplify_square_root_expressionV6", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (smt (verit) diff_add_eq power2_diff)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using `b > 0` by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a > 0\" \"b > 0\"\n  shows \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + b\"\nproof -\n  have \"(a - sqrt b)^2 = a^2 - 2*a*sqrt b + (sqrt b)^2\" \n    by (smt (verit) diff_add_eq power2_diff)\n  also have \"... = a^2 - 2*a*sqrt b + b\" \n    using `b > 0` by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_expressionV9": {"skill_name": "square_expressionV9", "marker": "lemma square_expression:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"2 * x^2 = (600 - 52 * sqrt 131) / 16\"\nproof -\n  have \"x^2 = ((13 - sqrt 131) / 4)^2\" using assms by blast\n  then have \"2 * x^2 = 2 * ((13 - sqrt 131) ^ 2 / 16)\" by (auto simp: field_simps)\n  also have \"... = (2 * (13 - sqrt 131) ^ 2) / 16\" by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 169 - 2 * 13 * sqrt 131 + 131\" \n    by (simp add: power2_eq_square algebra_simps)\n  hence \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\" by simp\n  have \"2 * (13 - sqrt 131)^2 = 2 * (300 - 26 * sqrt 131)\" by (metis \\<open>(13 - sqrt 131)\\<^sup>2 = 300 - 26 * sqrt 131\\<close>)\n  then have \"2 * (13 - sqrt 131)^2 = 600 - 52 * sqrt 131\" by simp\n  thus \"2 * x^2 = (600 - 52 * sqrt 131) / 16\" \n    by (metis \\<open>2 * ((13 - sqrt 131)\\<^sup>2 / 16) = 2 * (13 - sqrt 131)\\<^sup>2 / 16\\<close> calculation comm_semiring_class.distrib distrib_left mult.commute mult_2 power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"2 * x^2 = (600 - 52 * sqrt 131) / 16\"\nproof -\n  have \"x^2 = ((13 - sqrt 131) / 4)^2\" using assms by blast\n  then have \"2 * x^2 = 2 * ((13 - sqrt 131) ^ 2 / 16)\" by (auto simp: field_simps)\n  also have \"... = (2 * (13 - sqrt 131) ^ 2) / 16\" by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 169 - 2 * 13 * sqrt 131 + 131\" \n    by (simp add: power2_eq_square algebra_simps)\n  hence \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\" by simp\n  have \"2 * (13 - sqrt 131)^2 = 2 * (300 - 26 * sqrt 131)\" by (metis \\<open>(13 - sqrt 131)\\<^sup>2 = 300 - 26 * sqrt 131\\<close>)\n  then have \"2 * (13 - sqrt 131)^2 = 600 - 52 * sqrt 131\" by simp\n  thus \"2 * x^2 = (600 - 52 * sqrt 131) / 16\" \n    by (metis \\<open>2 * ((13 - sqrt 131)\\<^sup>2 / 16) = 2 * (13 - sqrt 131)\\<^sup>2 / 16\\<close> calculation comm_semiring_class.distrib distrib_left mult.commute mult_2 power2_eq_square)\nqed", "origin": "do_request", "update_count": 0}, "square_of_fraction_general": {"skill_name": "square_of_fraction_general", "marker": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"b > 0 \\<or> b < 0\" using assms by auto\n  then show ?thesis\n  proof\n    assume \"b > 0\"\n    then have \"(a / b)^2 = (a * (1 / b))^2\" by (simp add: field_simps)\n    also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n    also have \"... = a^2 / b^2\" by (simp add: field_simps)\n    finally show ?thesis .\n  next\n    assume \"b < 0\"\n    then have \"(a / b)^2 = (a * (1 / b))^2\" by (simp add: field_simps)\n    also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n    also have \"... = a^2 / b^2\" by (simp add: field_simps)\n    finally show ?thesis .\n  qed\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"b > 0 \\<or> b < 0\" using assms by auto\n  then show ?thesis\n  proof\n    assume \"b > 0\"\n    then have \"(a / b)^2 = (a * (1 / b))^2\" by (simp add: field_simps)\n    also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n    also have \"... = a^2 / b^2\" by (simp add: field_simps)\n    finally show ?thesis .\n  next\n    assume \"b < 0\"\n    then have \"(a / b)^2 = (a * (1 / b))^2\" by (simp add: field_simps)\n    also have \"... = a^2 * (1 / b)^2\" by (simp add: power2_eq_square)\n    also have \"... = a^2 / b^2\" by (simp add: field_simps)\n    finally show ?thesis .\n  qed\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "sum_of_squaresV3": {"skill_name": "sum_of_squaresV3", "marker": "lemma sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 = (x + y)^2 - 2 * x * y\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  then show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma sum_of_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 = (x + y)^2 - 2 * x * y\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  then show ?thesis by (simp add: algebra_simps)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_sum": {"skill_name": "square_of_sum", "marker": "lemma square_of_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_sum:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2*a*b + b^2\"\nproof -\n  have \"(a + b)^2 = a^2 + 2*a*b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_with_variable": {"skill_name": "square_of_fraction_with_variable", "marker": "lemma square_of_fraction_with_variable:\n  fixes a b c d :: real\n  assumes \"b > 0\" and \"d > 0\"\n  shows \"((a / b) + (c / d))^2 = (a^2 / b^2) + (c^2 / d^2) + (2 * (a * c) / (b * d))\"\nproof -\n  have \"((a / b) + (c / d))^2 = (a / b)^2 + (c / d)^2 + 2 * (a / b) * (c / d)\" \n    by sos\n  also have \"... = (a^2 / b^2) + (c^2 / d^2) + (2 * (a * c) / (b * d))\" \n    using square_of_fraction_general[of a b] square_of_fraction_general[of c d] \n    by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\n  using assms by (simp add: power2_eq_square)\n\nlemma square_of_fraction_with_variable:\n  fixes a b c d :: real\n  assumes \"b > 0\" and \"d > 0\"\n  shows \"((a / b) + (c / d))^2 = (a^2 / b^2) + (c^2 / d^2) + (2 * (a * c) / (b * d))\"\nproof -\n  have \"((a / b) + (c / d))^2 = (a / b)^2 + (c / d)^2 + 2 * (a / b) * (c / d)\" \n    by sos\n  also have \"... = (a^2 / b^2) + (c^2 / d^2) + (2 * (a * c) / (b * d))\" \n    using square_of_fraction_general[of a b] square_of_fraction_general[of c d] \n    by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_for_any_c": {"skill_name": "square_of_fraction_for_any_c", "marker": "lemma square_of_fraction_for_any_c:\n  fixes a b c :: real\n  assumes \"b > 0\"\n  shows \"(c * (a / b))^2 = c^2 * (a^2 / b^2)\"\nproof -\n  have \"(c * (a / b))^2 = c^2 * ((a / b)^2)\" by (simp add: power2_eq_square)\n  also have \"... = c^2 * (a^2 / b^2)\" using square_of_fraction_general[of a b] assms by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\n  using assms by (simp add: power2_eq_square)\n\nlemma square_of_fraction_for_any_c:\n  fixes a b c :: real\n  assumes \"b > 0\"\n  shows \"(c * (a / b))^2 = c^2 * (a^2 / b^2)\"\nproof -\n  have \"(c * (a / b))^2 = c^2 * ((a / b)^2)\" by (simp add: power2_eq_square)\n  also have \"... = c^2 * (a^2 / b^2)\" using square_of_fraction_general[of a b] assms by (auto simp: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "sqrt_divideV4": {"skill_name": "sqrt_divideV4", "marker": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" \n    by (simp add: divide_simps)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" \n    using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    using assms by (smt (verit) real_sqrt_divide real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" \n    by (simp add: divide_simps)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" \n    using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    using assms by (smt (verit) real_sqrt_divide real_sqrt_one)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_divideV5": {"skill_name": "sqrt_divideV5", "marker": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" \n    by (simp add: divide_simps)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" \n    using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    using assms by (simp add: real_sqrt_divide)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_divide:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a * (1 / b))\" \n    by (simp add: divide_simps)\n  also have \"... = sqrt(a) * sqrt(1 / b)\" \n    using assms by (metis real_sqrt_mult)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\" \n    using assms by (simp add: real_sqrt_divide)\n  also have \"... = sqrt(a) / sqrt(b)\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "fraction_properties": {"skill_name": "fraction_properties", "marker": "lemma fraction_properties:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b) * (c / b) = (a * c) / (b * b)\"\nproof -\n  have \"((a * c) / (b * b)) = (a / b) * (c / b)\"\n    by (simp add: field_simps)\n  thus ?thesis using assms by auto\nqed", "description": "-", "full_code": "lemma fraction_properties:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b) * (c / b) = (a * c) / (b * b)\"\nproof -\n  have \"((a * c) / (b * b)) = (a / b) * (c / b)\"\n    by (simp add: field_simps)\n  thus ?thesis using assms by auto\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "fraction_simplification": {"skill_name": "fraction_simplification", "marker": "lemma fraction_simplification:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b) * (a / b) = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using assms by (simp add: power2_eq_square)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma fraction_simplification:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b) * (a / b) = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using assms by (simp add: power2_eq_square)\n  thus ?thesis by sos\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "absolute_value_triangle_inequality": {"skill_name": "absolute_value_triangle_inequality", "marker": "lemma absolute_value_triangle_inequality:\n  fixes x y :: real\n  shows \"abs(x + y) \\<le> abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) \\<le> abs(x) + abs(y)\" by (simp add: abs_triangle_ineq)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma absolute_value_triangle_inequality:\n  fixes x y :: real\n  shows \"abs(x + y) \\<le> abs(x) + abs(y)\"\nproof -\n  have \"abs(x + y) \\<le> abs(x) + abs(y)\" by (simp add: abs_triangle_ineq)\n  then show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_generalV2": {"skill_name": "square_of_fraction_generalV2", "marker": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(x / b)^2 = x^2 / b^2\"\nproof -\n  have \"(x / b)^2 = x^2 / (b^2)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(x / b)^2 = x^2 / b^2\"\nproof -\n  have \"(x / b)^2 = x^2 / (b^2)\" using assms by (simp add: power2_eq_square)\n  then show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_generalV3": {"skill_name": "square_of_fraction_generalV3", "marker": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(x / b)^2 = x^2 / b^2\"\nproof -\n  have \"(x / b)^2 = (x * (1 / b))^2\" by simp\n  also have \"... = x^2 * (1 / b)^2\" by (auto simp: field_simps)\n  also have \"... = x^2 / b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(x / b)^2 = x^2 / b^2\"\nproof -\n  have \"(x / b)^2 = (x * (1 / b))^2\" by simp\n  also have \"... = x^2 * (1 / b)^2\" by (auto simp: field_simps)\n  also have \"... = x^2 / b^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_root_equation": {"skill_name": "square_root_equation", "marker": "lemma square_root_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" \n    using assms by (simp add: assms) \n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_root_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"sqrt a = sqrt b\"\nproof -\n  have \"sqrt a = sqrt b\" \n    using assms by (simp add: assms) \n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "rearrange_terms": {"skill_name": "rearrange_terms", "marker": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by auto\n  then show ?thesis\n    by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by auto\n  then show ?thesis\n    by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "rearrange_termsV2": {"skill_name": "rearrange_termsV2", "marker": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b = a - c\" \n    by (simp add: algebra_simps)\n  thus ?thesis\n    by assumption\nqed", "description": "-", "full_code": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b = a - c\" \n    by (simp add: algebra_simps)\n  thus ?thesis\n    by assumption\nqed", "origin": "do_request", "update_count": 0}, "rearrange_termsV3": {"skill_name": "rearrange_termsV3", "marker": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"a - c = b + c - c\" using assms by (simp add: algebra_simps)\n  also have \"... = b\" by (simp add: algebra_simps)\n  finally show \"b = a - c\" by simp\nqed", "description": "-", "full_code": "lemma rearrange_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"a - c = b + c - c\" using assms by (simp add: algebra_simps)\n  also have \"... = b\" by (simp add: algebra_simps)\n  finally show \"b = a - c\" by simp\nqed", "origin": "do_request", "update_count": 0}, "substitute_x_in_quadratic": {"skill_name": "substitute_x_in_quadratic", "marker": "lemma substitute_x_in_quadratic:\n  fixes k x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"2 * x^2 - 13 * x = 2 * ((13 - sqrt 131) / 4)^2 - 13 * ((13 - sqrt 131) / 4)\"\nproof -\n  have \"x^2 = ((13 - sqrt 131) / 4)^2\" using assms by blast\n  then have \"2 * x^2 = 2 * ((13 - sqrt 131) ^ 2 / 16)\" by (simp add: field_simps)\n  also have \"... = (2 * (13 - sqrt 131) ^ 2) / 16\" by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 169 - 2 * 13 * sqrt 131 + 131\" \n    by (simp add: power2_eq_square algebra_simps)\n  hence \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\" by simp\n  have \"2 * (13 - sqrt 131)^2 = 2 * (300 - 26 * sqrt 131)\" by (metis \\<open>(13 - sqrt 131)\\<^sup>2 = 300 - 26 * sqrt 131\\<close>)\n  then have \"2 * (13 - sqrt 131)^2 = 600 - 52 * sqrt 131\" by simp\n  have \"13 * ((13 - sqrt 131) / 4) = (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  then have \"13 * (13 - sqrt 131) = 169 - 13 * sqrt 131\" by simp\n  thus ?thesis\n    by (metis assms)\nqed", "description": "", "full_code": "lemma substitute_x_in_quadratic:\n  fixes k x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"2 * x^2 - 13 * x = 2 * ((13 - sqrt 131) / 4)^2 - 13 * ((13 - sqrt 131) / 4)\"\nproof -\n  have \"x^2 = ((13 - sqrt 131) / 4)^2\" using assms by blast\n  then have \"2 * x^2 = 2 * ((13 - sqrt 131) ^ 2 / 16)\" by (simp add: field_simps)\n  also have \"... = (2 * (13 - sqrt 131) ^ 2) / 16\" by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 169 - 2 * 13 * sqrt 131 + 131\" \n    by (simp add: power2_eq_square algebra_simps)\n  hence \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\" by simp\n  have \"2 * (13 - sqrt 131)^2 = 2 * (300 - 26 * sqrt 131)\" by (metis \\<open>(13 - sqrt 131)\\<^sup>2 = 300 - 26 * sqrt 131\\<close>)\n  then have \"2 * (13 - sqrt 131)^2 = 600 - 52 * sqrt 131\" by simp\n  have \"13 * ((13 - sqrt 131) / 4) = (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  then have \"13 * (13 - sqrt 131) = 169 - 13 * sqrt 131\" by simp\n  thus ?thesis\n    by (metis assms)\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v39", "update_count": -1}, "algebraic_identityV4": {"skill_name": "algebraic_identityV4", "marker": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b)^2 = b^2\" by simp\n  have \"2 * a * (-b) = -2 * a * b\" by simp\n  show ?thesis\n    by (simp add: power2_eq_square algebra_simps)\nqed", "description": "-", "full_code": "lemma algebraic_identity:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b)^2 = b^2\" by simp\n  have \"2 * a * (-b) = -2 * a * b\" by simp\n  show ?thesis\n    by (simp add: power2_eq_square algebra_simps)\nqed", "origin": "square_expression", "update_count": 0}, "square_expressionV10": {"skill_name": "square_expressionV10", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b)^2 = b^2\" by simp\n  have \"2 * (-a) * (-b) = 2 * a * b\" by simp\n  also have \"(-a + -b)^2 = a^2 + 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(-b)^2 = b^2\" by simp\n  have \"2 * (-a) * (-b) = 2 * a * b\" by simp\n  also have \"(-a + -b)^2 = a^2 + 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by sos\nqed", "origin": "square_expression", "update_count": 0}, "square_differenceV5": {"skill_name": "square_differenceV5", "marker": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\"\n    by (simp add: algebra_simps)\n  then show ?thesis\n    by (simp add: power2_eq_square algebra_simps)\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\"\n    by (simp add: algebra_simps)\n  then show ?thesis\n    by (simp add: power2_eq_square algebra_simps)\nqed", "origin": "square_expression", "update_count": 0}, "square_of_fraction_with_var": {"skill_name": "square_of_fraction_with_var", "marker": "lemma square_of_fraction_with_var:\n  fixes x y z :: real\n  assumes \"y \\<noteq> 0\"\n  shows \"(x / y)^2 + (z / y)^2 = (x^2 + z^2) / y^2\"\nproof -\n  have \"((x + z) / y)^2 = (x + z)^2 / y^2\"\n    by (simp add: power2_eq_square)\n  thus ?thesis by (smt (verit) add_divide_distrib power_divide)\nqed", "description": "-", "full_code": "lemma square_of_fraction_with_var:\n  fixes x y z :: real\n  assumes \"y \\<noteq> 0\"\n  shows \"(x / y)^2 + (z / y)^2 = (x^2 + z^2) / y^2\"\nproof -\n  have \"((x + z) / y)^2 = (x + z)^2 / y^2\"\n    by (simp add: power2_eq_square)\n  thus ?thesis by (smt (verit) add_divide_distrib power_divide)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_generalV4": {"skill_name": "square_of_fraction_generalV4", "marker": "lemma square_of_fraction_general:\n  fixes a b :: real\n  shows \"(a / b)^2 = a^2 / b^2\"\n  by (auto simp: field_simps)", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  shows \"(a / b)^2 = a^2 / b^2\"\n  by (auto simp: field_simps)", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_with_conditions": {"skill_name": "square_of_fraction_with_conditions", "marker": "lemma square_of_fraction_with_conditions:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b)^2 + (c / b)^2 = a^2 / b^2 + c^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using square_of_fraction_generalized[of a b] assms(1) by (auto simp: field_simps)\n  have \"(c / b)^2 = c^2 / b^2\" using square_of_fraction_generalized[of c b] assms(2) by (auto simp: field_simps)\n  then show ?thesis by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_of_fraction_generalized:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\n  using assms by (simp add: power2_eq_square)\n\nlemma square_of_fraction_with_conditions:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b)^2 + (c / b)^2 = a^2 / b^2 + c^2 / b^2\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using square_of_fraction_generalized[of a b] assms(1) by (auto simp: field_simps)\n  have \"(c / b)^2 = c^2 / b^2\" using square_of_fraction_generalized[of c b] assms(2) by (auto simp: field_simps)\n  then show ?thesis by (simp add: power2_eq_square)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "rational_expression_simplification": {"skill_name": "rational_expression_simplification", "marker": "lemma rational_expression_simplification:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  then have \"(a * d) / (b * d) + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (metis add_divide_distrib)\n  thus ?thesis by (metis \\<open>a / b + c / d = a * d / (b * d) + c * b / (b * d)\\<close> add.commute assms(2) div_by_1 divide_cancel_right divide_divide_eq_left' divide_divide_times_eq frac_eq_eq group_cancel.add1 minus_divide_left mult.commute mult_cancel_right2 real_add_minus_iff right_inverse_eq times_divide_times_eq zero_neq_one)\nqed", "description": "-", "full_code": "lemma rational_expression_simplification:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  then have \"(a * d) / (b * d) + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (metis add_divide_distrib)\n  thus ?thesis by (metis \\<open>a / b + c / d = a * d / (b * d) + c * b / (b * d)\\<close> add.commute assms(2) div_by_1 divide_cancel_right divide_divide_eq_left' divide_divide_times_eq frac_eq_eq group_cancel.add1 minus_divide_left mult.commute mult_cancel_right2 real_add_minus_iff right_inverse_eq times_divide_times_eq zero_neq_one)\nqed", "origin": "do_request", "update_count": 0}, "rational_expression_simplificationV2": {"skill_name": "rational_expression_simplificationV2", "marker": "lemma rational_expression_simplification:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have lhs: \"(a / b) + (c / d) = (a * d) / (b * d) + (c * b) / (b * d)\"\n    using assms by (simp add: field_simps)\n  have rhs: \"(a * d) / (b * d) + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (simp add: field_simps)\n  show ?thesis\n    using lhs rhs by simp\nqed", "description": "-", "full_code": "lemma rational_expression_simplification:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / b) + (c / d) = (a * d + c * b) / (b * d)\"\nproof -\n  have lhs: \"(a / b) + (c / d) = (a * d) / (b * d) + (c * b) / (b * d)\"\n    using assms by (simp add: field_simps)\n  have rhs: \"(a * d) / (b * d) + (c * b) / (b * d) = (a * d + c * b) / (b * d)\"\n    by (simp add: field_simps)\n  show ?thesis\n    using lhs rhs by simp\nqed", "origin": "do_request", "update_count": 0}, "square_of_fraction_multi": {"skill_name": "square_of_fraction_multi", "marker": "lemma square_of_fraction_multi:\n  fixes a b :: real\n  assumes \"b > 0\" and \"c > 0\"\n  shows \"(a / (b * c))^2 = a^2 / (b^2 * c^2)\"\nproof -\n  have \"(a / (b * c))^2 = a^2 / (b * c)^2\" by (simp add: power2_eq_square)\n  also have \"(b * c)^2 = b^2 * c^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_multi:\n  fixes a b :: real\n  assumes \"b > 0\" and \"c > 0\"\n  shows \"(a / (b * c))^2 = a^2 / (b^2 * c^2)\"\nproof -\n  have \"(a / (b * c))^2 = a^2 / (b * c)^2\" by (simp add: power2_eq_square)\n  also have \"(b * c)^2 = b^2 * c^2\" by (simp add: power2_eq_square)\n  finally show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_n": {"skill_name": "square_of_fraction_n", "marker": "lemma square_of_fraction_n:\n  fixes a b :: real\n  assumes \"b > 0\" \"n > 0\"\n  shows \"(a / b)^n = a^n / b^n\"\nproof -\n  have \"(a / b)^n = a^n / b^n\" by (simp add: power_divide assms)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_n:\n  fixes a b :: real\n  assumes \"b > 0\" \"n > 0\"\n  shows \"(a / b)^n = a^n / b^n\"\nproof -\n  have \"(a / b)^n = a^n / b^n\" by (simp add: power_divide assms)\n  then show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "real_arithmetic": {"skill_name": "real_arithmetic", "marker": "lemma real_arithmetic:\n  fixes a b c :: real\n  shows \"a + b + c = (a + b) + c\"\nproof -\n  have \"a + b + c = (a + b) + c\"\n    by (simp add: ac_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma real_arithmetic:\n  fixes a b c :: real\n  shows \"a + b + c = (a + b) + c\"\nproof -\n  have \"a + b + c = (a + b) + c\"\n    by (simp add: ac_simps)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "square_of_fraction_property": {"skill_name": "square_of_fraction_property", "marker": "lemma square_of_fraction_property:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b)^2 + (c / b)^2 = (a^2 + c^2) / b^2\"\nproof -\n  have \"(a / b)^2 + (c / b)^2 = a^2 / b^2 + c^2 / b^2\" using assms by (simp add: power2_eq_square)\n  also have \"... = (a^2 + c^2) / b^2\" by (metis add_divide_distrib)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma square_of_fraction_property:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b)^2 + (c / b)^2 = (a^2 + c^2) / b^2\"\nproof -\n  have \"(a / b)^2 + (c / b)^2 = a^2 / b^2 + c^2 / b^2\" using assms by (simp add: power2_eq_square)\n  also have \"... = (a^2 + c^2) / b^2\" by (metis add_divide_distrib)\n  finally show ?thesis .\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_properties": {"skill_name": "square_of_fraction_properties", "marker": "lemma square_of_fraction_properties:\n  fixes a b c d :: real\n  assumes \"b > 0\" \"d > 0\"\n  shows \"(a / b)^2 + (c / d)^2 = (a^2 / b^2) + (c^2 / d^2)\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using assms by (simp add: power2_eq_square)\n  moreover have \"(c / d)^2 = c^2 / d^2\" using assms by (simp add: power2_eq_square)\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_of_fraction_properties:\n  fixes a b c d :: real\n  assumes \"b > 0\" \"d > 0\"\n  shows \"(a / b)^2 + (c / d)^2 = (a^2 / b^2) + (c^2 / d^2)\"\nproof -\n  have \"(a / b)^2 = a^2 / b^2\" using assms by (simp add: power2_eq_square)\n  moreover have \"(c / d)^2 = c^2 / d^2\" using assms by (simp add: power2_eq_square)\n  ultimately show ?thesis by simp\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_extendedV2": {"skill_name": "square_of_fraction_extendedV2", "marker": "lemma square_of_fraction_extended:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b) * (c / b) = (a * c) / (b^2)\"\nproof -\n  have \"(a / b) * (c / b) = (a * c) / (b * b)\" using assms by (simp add: field_simps)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_of_fraction_extended:\n  fixes a b c :: real\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a / b) * (c / b) = (a * c) / (b^2)\"\nproof -\n  have \"(a / b) * (c / b) = (a * c) / (b * b)\" using assms by (simp add: field_simps)\n  thus ?thesis by sos\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_of_fraction_generalV5": {"skill_name": "square_of_fraction_generalV5", "marker": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = (a * a) / (b * b)\" using assms by (simp add: power2_eq_square)\n  thus ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma square_of_fraction_general:\n  fixes a b :: real\n  assumes \"b \\<noteq> 0\"\n  shows \"(a / b)^2 = a^2 / b^2\"\nproof -\n  have \"(a / b)^2 = (a * a) / (b * b)\" using assms by (simp add: power2_eq_square)\n  thus ?thesis by (auto simp: field_simps)\nqed", "origin": "square_of_fractionV3", "update_count": 0}, "square_expressionV11": {"skill_name": "square_expressionV11", "marker": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" \n    by simp\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_expression:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2*a*b + b^2\"\nproof -\n  have \"(a - b)^2 = (a + (-b))^2\" \n    by simp\n  also have \"... = a^2 + 2*a*(-b) + (-b)^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  also have \"... = a^2 - 2*a*b + b^2\" \n    by (simp add: power2_eq_square algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "square_expression", "update_count": 0}, "simplify_square_rootV6": {"skill_name": "simplify_square_rootV6", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" if \"a > 0\" and \"b > 0\" for a b\n  proof -\n    have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n      using that by (metis real_sqrt_mult)\n    thus ?thesis .\n  qed\n  show ?thesis\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by (cases \"b = 0\") auto\n  next\n    case False\n    with assms have \"sqrt(a) > 0\" by auto\n    show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(1) by auto\n    next\n      case False\n      with assms have \"sqrt(b) > 0\" by auto\n      have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" if \"a > 0\" and \"b > 0\" for a b\n  proof -\n    have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n      using that by (metis real_sqrt_mult)\n    thus ?thesis .\n  qed\n  show ?thesis\n  proof (cases \"a = 0\")\n    case True\n    then show ?thesis\n      by (cases \"b = 0\") auto\n  next\n    case False\n    with assms have \"sqrt(a) > 0\" by auto\n    show ?thesis\n    proof (cases \"b = 0\")\n      case True\n      then show ?thesis using True assms(1) by auto\n    next\n      case False\n      with assms have \"sqrt(b) > 0\" by auto\n      have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n        by (metis real_sqrt_mult)\n      then show ?thesis by simp\n    qed\n  qed\nqed", "origin": "do_request", "update_count": 0}}