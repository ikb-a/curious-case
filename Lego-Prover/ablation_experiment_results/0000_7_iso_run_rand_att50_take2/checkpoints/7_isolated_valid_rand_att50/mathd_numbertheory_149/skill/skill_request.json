{"request_0": {"request_name": "request_0", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b c d :: nat\n  assumes \"a mod m = b\" \"c mod n = d\" \"m coprime n\"\n  shows \"(\\<exists>x. x mod m = a \\<and> x mod n = c) \\<longleftrightarrow> (\\<exists>k. x = a + k * m)\"", "update_count": 2}, "request_1": {"request_name": "request_1", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma express_congruence:\n  fixes n :: nat\n  assumes \"n mod m = a\"\n  shows \"n = m * k + a\" for some integer k", "update_count": 2}, "request_2": {"request_name": "request_2", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma sum_of_congruences:\n  fixes a b m n :: nat\n  assumes \"a mod m = b\" \"c mod n = d\"\n  shows \"(\\<Sum> k\\<in> {x::nat. x < L \\<and> x mod m = a \\<and> x mod n = c}. k) = S\"", "update_count": 2}, "request_3": {"request_name": "request_3", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b m n :: nat\n  assumes \"m > 0\" \"n > 0\" \"a mod m = b mod n\"\n  shows \"\u2203x. x mod m = a \u2227 x mod n = b\"", "update_count": 2}, "request_4": {"request_name": "request_4", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_linear_combination:\n  fixes a b c d m :: nat\n  assumes \"a mod m = b\" \"c mod m = d\"\n  shows \"(a + c) mod m = (b + d) mod m\"", "update_count": 1}, "request_5": {"request_name": "request_5", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma lcm_properties:\n  fixes a b :: nat\n  shows \"lcm a b = (a * b) div gcd a b\"", "update_count": 2}, "request_6": {"request_name": "request_6", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder_theorem:\n  fixes a b c d :: nat\n  assumes \"a < m\" \"b < n\" \"m coprime to n\"\n  shows \"\u2203x. x mod m = a \u2227 x mod n = b\"", "update_count": 2}, "request_7": {"request_name": "request_7", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_manipulation:\n  fixes k :: nat\n  assumes \"k mod m = a\" \"k mod n = b\"\n  shows \"k = m * q + a\" for some integer q", "update_count": 2}, "request_8": {"request_name": "request_8", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma bounds_on_n:\n  fixes N :: nat\n  assumes \"N < 50\"\n  shows \"N mod 8 = 5 \u2227 N mod 6 = 3 \u27f9 N \u2208 {21, 45}\"", "update_count": 2}, "request_9": {"request_name": "request_9", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_analysis:\n  fixes N :: nat\n  assumes \"N < 50\" \"N mod 8 = 5\" \"N mod 6 = 3\"\n  shows \"N = 24k + 21\" for some nat k", "update_count": 2}, "request_10": {"request_name": "request_10", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder_theorem:\n  fixes a b m n :: nat\n  assumes \"m > 0\" \"n > 0\" \"a < m\" \"b < n\"\n  shows \"\u2203x. x mod m = a \u2227 x mod n = b \u27f7 \u2203k. x = a + k * m \u2227 (a + k * m) mod n = b\"", "update_count": 1}, "request_11": {"request_name": "request_11", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitute_congruence:\n  fixes k :: nat\n  assumes \"N mod 8 = 5\"\n  shows \"N = 8k + 5\"", "update_count": 2}, "request_12": {"request_name": "request_12", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitute_into_second_congruence:\n  fixes k :: nat\n  assumes \"N = 8k + 5\"\n  shows \"8k + 5 mod 6 = 3\"", "update_count": 1}, "request_13": {"request_name": "request_13", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma simplify_congruence:\n  fixes k :: nat\n  assumes \"2k + 5 \\<equiv> 3 mod 6\"\n  shows \"k \\<equiv> 2 mod 3\"", "update_count": 1}, "request_14": {"request_name": "request_14", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_N:\n  fixes m :: nat\n  shows \"N = 24m + 21\"", "update_count": 1}, "request_15": {"request_name": "request_15", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_possible_N:\n  fixes m :: nat\n  assumes \"N = 24m + 21\"\n  shows \"N < 50 ? m < 1\"", "update_count": 2}, "request_16": {"request_name": "request_16", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma check_m_0:\n  shows \"N = 21\" if \"m = 0\"", "update_count": 2}, "request_17": {"request_name": "request_17", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder_theorem:\n  fixes a b c d :: nat\n  assumes \"a < b\" \"c < d\" \"gcd b d = 1\"\n  shows \"\\<exists>x. x mod b = a \\<and> x mod d = c\"", "update_count": 1}, "request_18": {"request_name": "request_18", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence:\n  fixes a b c :: nat\n  assumes \"b > 0\"\n  shows \"\\<exists>x. x mod b = a \\<and> x < c \\<longleftrightarrow> a < c\"", "update_count": 2}, "request_19": {"request_name": "request_19", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_manipulation:\n  fixes a b c d :: nat\n  assumes \"a \u2261 b (mod m)\" \"c \u2261 d (mod n)\"\n  shows \"a + c \u2261 b + d (mod lcm m n)\"", "update_count": 2}, "request_20": {"request_name": "request_20", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma integer_divisibility:\n  fixes n :: nat\n  assumes \"n mod d = 0\"\n  shows \"n = k * d\" for some k :: nat", "update_count": 2}, "request_21": {"request_name": "request_21", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_sum:\n  fixes x y :: nat\n  assumes \"x < n\" \"y < n\"\n  shows \"(x + y) mod n = (x mod n + y mod n) mod n\"", "update_count": 1}, "request_22": {"request_name": "request_22", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b > 0\" \"c > 0\" \"d > 0\"\n    and \"x \u2261 a mod b\" \"x \u2261 c mod d\"\n  shows \"\u2203k. x = a + b * k \u2227 x \u2261 c mod d\"", "update_count": 2}, "request_23": {"request_name": "request_23", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_simplification:\n  fixes a b c :: nat\n  assumes \"a \u2261 b mod c\"\n  shows \"a + k * c \u2261 b mod c\" for any integer k", "update_count": 2}, "request_24": {"request_name": "request_24", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma bounded_integer:\n  fixes n :: nat\n  assumes \"n < m\"\n  shows \"\u2203k. n = k + 1 \u2227 k < m - 1\"", "update_count": 1}, "request_25": {"request_name": "request_25", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_N_values:\n  fixes N :: nat\n  assumes \"N mod 8 = 5\" \"N mod 6 = 3\" \"N < 50\"\n  shows \"N = 21 \u2228 N = 45\"", "update_count": 2}, "request_26": {"request_name": "request_26", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_add:\n  fixes a b m :: nat\n  shows \"(a + b) mod m = ((a mod m) + (b mod m)) mod m\"", "update_count": 2}, "request_27": {"request_name": "request_27", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_congruence:\n  fixes a b m :: nat\n  assumes \"a mod m = b\"\n  shows \"((c * a) mod m) = ((c * b) mod m)\"", "update_count": 1}, "request_28": {"request_name": "request_28", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma sum_of_congruences:\n  fixes N :: nat\n  assumes \"N < 50\" \"N mod 8 = 5\" \"N mod 6 = 3\"\n  shows \"N = 21 \u2228 N = 45\"", "update_count": 2}, "request_29": {"request_name": "request_29", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence_solution:\n  fixes a b m :: nat\n  assumes \"gcd m d = 1\"\n  shows \"\\<exists>x. x \u2261 a (mod m) \\<and> x \u2261 b (mod d)\"", "update_count": 2}, "request_30": {"request_name": "request_30", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_expression:\n  fixes N :: nat\n  assumes \"N mod 8 = 5\" \"N mod 6 = 3\"\n  shows \"\\<exists>k. N = 24 * k + 21\"", "update_count": 2}, "request_31": {"request_name": "request_31", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma valid_range:\n  fixes N m :: nat\n  assumes \"N = 24*m + 21\" \"N < 50\"\n  shows \"m < 2\"", "update_count": 1}, "request_32": {"request_name": "request_32", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruences:\n  fixes N :: nat\n  assumes \"N mod 8 = 5\"\n    and \"N mod 6 = 3\"\n  shows \"N < 50\"", "update_count": 2}, "request_33": {"request_name": "request_33", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_arithmetic:\n  fixes a b c :: nat\n  assumes \"a mod m = b\" \"a mod n = c\"\n  shows \"a = k * lcm m n + b\" for some integer k", "update_count": 2}, "request_34": {"request_name": "request_34", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma solve_congruences:\n  fixes x :: nat\n  assumes \"x mod m = a\" \"x mod n = b\"\n  shows \"x = k * lcm m n + a\" for some integer k", "update_count": 2}, "request_35": {"request_name": "request_35", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma divisibility_properties:\n  fixes a b m :: nat\n  assumes \"a mod m = b\" \"b < m\"\n  shows \"a = k * m + b\" for some integer k", "update_count": 2}, "request_36": {"request_name": "request_36", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_properties:\n  fixes a b c :: nat\n  assumes \"b > 0\" \"c > 0\"\n  shows \"(a + b) mod c = (a mod c + b mod c) mod c\"", "update_count": 2}, "request_37": {"request_name": "request_37", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma unique_solution_mod:\n  fixes a b c d :: nat\n  assumes \"a mod c = b mod c\" \"c > 0\"\n  shows \"a = b + k * c \\<longleftrightarrow> k \\<in int\"", "update_count": 1}, "request_38": {"request_name": "request_38", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_8_form:\n  fixes k :: nat\n  shows \"N = 8 * k + 5\"", "update_count": 2}, "request_39": {"request_name": "request_39", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma simplify_congruence:\n  fixes k :: nat\n  assumes \"N = 8 * k + 5\"\n  shows \"2 * k mod 6 = 4\"", "update_count": 1}, "request_40": {"request_name": "request_40", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma reduce_k:\n  fixes k :: nat\n  assumes \"2 * k mod 6 = 4\"\n  shows \"k mod 3 = 2\"", "update_count": 1}, "request_41": {"request_name": "request_41", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma expression_for_N:\n  fixes m :: nat\n  shows \"N = 24 * m + 21\"", "update_count": 2}, "request_42": {"request_name": "request_42", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_values:\n  fixes m :: nat\n  assumes \"N = 24 * m + 21\"\n  shows \"m < 2\"", "update_count": 1}, "request_43": {"request_name": "request_43", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma compute_N_values:\n  assumes \"m < 2\"\n  shows \"N = 21 \\<or> N = 45\"", "update_count": 2}, "request_44": {"request_name": "request_44", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma possible_N:\n  shows \"N = 21 \\<or> N = 45\"", "update_count": 2}, "request_45": {"request_name": "request_45", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder_theorem:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b > 0\" \"c > 0\" \"d > 0\"\n    and \"x mod a = b\" \"x mod c = d\"\n  shows \"x = b + a * k\" for some integer k", "update_count": 2}, "request_46": {"request_name": "request_46", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_properties:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b < a\" \"c > 0\" \"d < c\"\n  shows \"b + a * k mod c = d\" for some integer k", "update_count": 1}, "request_47": {"request_name": "request_47", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma sum_of_modular_conditions:\n  fixes n :: nat\n  assumes \"P x\" and \"Q x\"\n  shows \"(\\<Sum> x. x) = S\"", "update_count": 2}, "request_48": {"request_name": "request_48", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_properties:\n  fixes a b c d :: nat\n  assumes \"a mod d = b\" \"c mod d = 0\"\n  shows \"(a + c) mod d = b\"", "update_count": 1}, "request_49": {"request_name": "request_49", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_bound:\n  fixes n :: nat\n  assumes \"n < k\" \"n mod m = r\"\n  shows \"\u2203x. x < k \u2227 x mod m = r\"", "update_count": 2}, "request_50": {"request_name": "request_50", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_properties:\n  fixes a b m :: nat\n  assumes \"a \u2261 b (mod m)\"\n  shows \"a + k \u2261 b + k (mod m) \u2227 a * c \u2261 b * c (mod m)\"", "update_count": 1}, "request_51": {"request_name": "request_51", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma inequality_bounds:\n  fixes x :: nat\n  assumes \"x < a\" \"x < b\"\n  shows \"x < min a b\"", "update_count": 2}, "request_52": {"request_name": "request_52", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_add:\n  fixes a b c d :: nat\n  assumes \"a \u2261 b mod c\" \"d > 0\"\n  shows \"a + d \u2261 b + d mod c\"", "update_count": 1}, "request_53": {"request_name": "request_53", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_properties:\n  fixes a b c :: nat\n  shows \"a \u2261 b mod c \u27f7 (\u2203k. a = b + k * c)\"", "update_count": 2}, "request_54": {"request_name": "request_54", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_reduction:\n  fixes N k :: nat\n  assumes \"N \\<equiv> 5 (mod 8)\"\n  shows \"N = 8 * k + 5\"", "update_count": 2}, "request_55": {"request_name": "request_55", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitute_congruence:\n  fixes k :: nat\n  assumes \"N = 8 * k + 5\" \"N \\<equiv> 3 (mod 6)\"\n  shows \"8 * k + 5 \\<equiv> 3 (mod 6)\"", "update_count": 2}, "request_56": {"request_name": "request_56", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_add:\n  fixes a b c d :: nat\n  shows \"a mod c + b mod c = (a + b) mod c\"", "update_count": 2}, "request_57": {"request_name": "request_57", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_properties:\n  fixes a b c d :: nat\n  assumes \"a \u2261 b (mod c)\" and \"b \u2261 d (mod c)\"\n  shows \"a \u2261 d (mod c)\"", "update_count": 2}, "request_58": {"request_name": "request_58", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence_solution:\n  fixes a b c :: nat\n  assumes \"c > 0\" and \"a \u2261 b (mod c)\"\n  shows \"\u2203k. a = b + k * c\"", "update_count": 2}, "request_59": {"request_name": "request_59", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_class_representation:\n  fixes n m :: nat\n  assumes \"n mod m = r\" and \"0 \u2264 r\" and \"r < m\"\n  shows \"n = m * k + r\" for some integer k", "update_count": 2}, "request_60": {"request_name": "request_60", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma sum_of_possible_N:\n  shows \"21 + 45 = 66\"", "update_count": 1}, "request_61": {"request_name": "request_61", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma inequality_bound:\n  fixes m :: nat\n  assumes \"24 * m + 21 < 50\"\n  shows \"m < 2\"", "update_count": 1}, "request_62": {"request_name": "request_62", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_combination_mod:\n  fixes a b c d m :: nat\n  assumes \"a mod m = b\" and \"c mod m = d\"\n  shows \"(k * a + l * c) mod m = (k * b + l * d) mod m\" for any integers k, l", "update_count": 1}, "request_63": {"request_name": "request_63", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b c d m n :: nat\n  assumes \"m > 0\" and \"n > 0\" and \"a mod m = b\" and \"c mod n = d\"\n  shows \"(\\<exists> x. x mod m = b \\<and> x mod n = d) \\<longleftrightarrow> (b - d) mod (gcd m n) = 0\"", "update_count": 2}, "request_64": {"request_name": "request_64", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence_solution:\n  fixes a b m :: nat\n  assumes \"gcd a m = 1\"\n  shows \"\\<exists> x. a * x mod m = b \\<longleftrightarrow> b mod m = 0\"", "update_count": 2}, "request_65": {"request_name": "request_65", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma residue_properties:\n  fixes a b m :: nat\n  shows \"a mod m = b \\<longleftrightarrow> a = k * m + b \\<text{ for some } k :: int\"", "update_count": 2}, "request_66": {"request_name": "request_66", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_equivalence:\n  fixes a b m :: nat\n  assumes \"m > 0\"\n  shows \"a \u2261 b (mod m) \u27f7 \u2203k. a = b + k * m\"", "update_count": 1}, "request_67": {"request_name": "request_67", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma solve_congruences:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b > 0\" \"c > 0\" \"d > 0\"\n  shows \"\\<exists>k. (k mod a = b) \\<and> (k mod c = d)\"", "update_count": 2}, "request_68": {"request_name": "request_68", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_arithmetic:\n  fixes a b c :: nat\n  assumes \"a > 0\" \"b < a\" \"c > 0\"\n  shows \"(b + c) mod a = ((b mod a) + (c mod a)) mod a\"", "update_count": 2}, "request_69": {"request_name": "request_69", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b c d :: nat\n  assumes \"coprime a b\"\n  shows \"\\<exists>x. x mod a = c \\<and> x mod b = d\"", "update_count": 2}, "request_70": {"request_name": "request_70", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitute_congruence:\n  fixes k :: nat\n  assumes \"N = 8 * k + 5\"\n  shows \"N mod 6 = 3 \\<longleftrightarrow> (2 * k + 5) mod 6 = 3\"", "update_count": 2}, "request_71": {"request_name": "request_71", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma k_in_terms_of_m:\n  fixes m :: nat\n  shows \"k = 3 * m + 2\"", "update_count": 1}, "request_72": {"request_name": "request_72", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b m n :: nat\n  assumes \"m > 0\" \"n > 0\" \"a mod m = b mod n\"\n  shows \"(\\<exists> x. x mod m = a \\<and> x mod n = b) \\<longleftrightarrow> (a mod (lcm m n) = b mod (lcm m n))\"", "update_count": 1}, "request_73": {"request_name": "request_73", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_add:\n  fixes a b c m :: nat\n  assumes \"a mod m = b\"\n  shows \"(a + c) mod m = (b + c) mod m\"", "update_count": 1}, "request_74": {"request_name": "request_74", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence:\n  fixes a b m :: nat\n  assumes \"gcd a m = 1\"\n  shows \"\u2203x. a * x \u2261 b mod m \u27f7 \u2203k. x = (b * (inverse a m) + k * (m div (gcd a m))) mod m\"", "update_count": 3}, "request_75": {"request_name": "request_75", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruence_manipulation:\n  fixes a b m n :: nat\n  assumes \"a mod m = b\" \"n > 0\"\n  shows \"a + n mod m = (b + n) mod m\"", "update_count": 1}, "request_76": {"request_name": "request_76", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma lcm_property:\n  fixes a b :: nat\n  assumes \"a > 0\" \"b > 0\"\n  shows \"lcm a b = (a * b) div gcd a b\"", "update_count": 2}, "request_77": {"request_name": "request_77", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b c d :: nat\n  assumes \"a mod m = b\" \"c mod n = d\" \"gcd m n = 1\"\n  shows \"\u2203k. x = a + m * k \u2227 x mod n = d\"", "update_count": 1}, "request_78": {"request_name": "request_78", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder_theorem:\n  fixes a b m n :: nat\n  assumes \"m > 0\" \"n > 0\" \"gcd m n = 1\"\n  shows \"(\\<exists> x. x mod m = a \\<and> x mod n = b) \\<longleftrightarrow> (\\<exists> k. a + k * m mod n = b)\"", "update_count": 2}, "request_79": {"request_name": "request_79", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma solve_linear_congruence:\n  fixes a b m :: nat\n  assumes \"m > 0\"\n  shows \"(\\<exists> x. x mod m = a) \\<longleftrightarrow> (\\<exists> k. x = a + k * m)\"", "update_count": 1}, "request_80": {"request_name": "request_80", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma simplify_congruence:\n  fixes a b c :: nat\n  assumes \"a > 0\" \"b < a\" \"c < a\"\n  shows \"b + c mod a = (b mod a + c mod a) mod a\"", "update_count": 2}, "request_81": {"request_name": "request_81", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma nat_inequality:\n  fixes a b :: nat\n  assumes \"a < b\"\n  shows \"a + 1 \u2264 b\"", "update_count": 3}, "request_82": {"request_name": "request_82", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma sum_of_set:\n  fixes S :: \"nat set\"\n  assumes \"finite S\"\n  shows \"sum S = \\<Sum> x\\<in>S. x\"", "update_count": 2}, "request_83": {"request_name": "request_83", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma solve_congruences:\n  fixes k :: nat\n  assumes \"2 * k mod 6 = 4\"\n  shows \"k = 3m + 2\" for some integer m", "update_count": 1}, "request_84": {"request_name": "request_84", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma bounds_on_n:\n  fixes N :: nat\n  assumes \"N < 50\"\n  shows \"N mod 8 = 5 \\<Longrightarrow> N mod 6 = 3 \\<Longrightarrow> N < 50\"", "update_count": 0}, "request_85": {"request_name": "request_85", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma algebraic_manipulation:\n  fixes x y :: nat\n  assumes \"x + y < z\"\n  shows \"y < z - x\"", "update_count": 0}, "request_86": {"request_name": "request_86", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma congruences:\n  fixes n :: nat\n  assumes \"n < 50\"\n  shows \"n mod 8 = 5 \\<and> n mod 6 = 3 \\<longrightarrow> n = 8k + 5\" for k :: nat", "update_count": 1}, "request_87": {"request_name": "request_87", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma expression_n:\n  fixes k :: nat\n  shows \"N = 8k + 5\" if \"N mod 8 = 5\"", "update_count": 1}, "request_88": {"request_name": "request_88", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitution:\n  fixes k :: nat\n  assumes \"N mod 8 = 5\" \"N mod 6 = 3\"\n  shows \"2k + 5 mod 6 = 3\"", "update_count": 0}, "request_89": {"request_name": "request_89", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma k_expression:\n  fixes m :: nat\n  shows \"k = 3m + 2\" for m :: nat", "update_count": 0}, "request_90": {"request_name": "request_90", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma substitute_back:\n  fixes m :: nat\n  shows \"N = 24m + 21\" for m :: nat", "update_count": 0}, "request_91": {"request_name": "request_91", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_N:\n  fixes m :: nat\n  assumes \"N = 24m + 21\"\n  shows \"N < 50 \\<longrightarrow> m \\<le> 1\"", "update_count": 0}, "request_92": {"request_name": "request_92", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma express_N:\n  fixes k m :: nat\n  shows \"N = 24m + 21\" if \"k = 3m + 2\"", "update_count": 0}, "request_93": {"request_name": "request_93", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma bound_on_N:\n  fixes m :: nat\n  assumes \"m < 50\"\n  shows \"24m + 21 < 50 \\<longleftrightarrow> m < 1.2083\"", "update_count": 0}, "request_94": {"request_name": "request_94", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma mod_arithmetic:\n  fixes a b c :: nat\n  assumes \"a mod b = c\"\n  shows \"a = b * k + c\" for some k :: nat", "update_count": 0}, "request_95": {"request_name": "request_95", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma find_solutions:\n  fixes a m :: nat\n  assumes \"a < m\"\n  shows \"(\\<exists>k. k mod m = a)\"", "update_count": 0}, "request_96": {"request_name": "request_96", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma express_N_in_terms_of_k:\n  fixes k :: nat\n  shows \"N = 8 * k + 5\"", "update_count": 2}, "request_97": {"request_name": "request_97", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma solve_for_k:\n  fixes k :: nat\n  shows \"2 * k \\<equiv> 4 (mod 6) \\<longleftrightarrow> k \\<equiv> 2 (mod 3)\"", "update_count": -1}, "request_98": {"request_name": "request_98", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma linear_congruence:\n  fixes a b m :: nat\n  assumes \"m > 0\" \"a * x + b mod m = c\"\n  shows \"x = (c - b) * inv a mod m\"", "update_count": 0}, "request_99": {"request_name": "request_99", "problem_name": "data/full_data/debug/valid_rand/mathd_numbertheory_149.json", "formal_statement": "lemma chinese_remainder:\n  fixes a b m n :: nat\n  assumes \"m > 0\" \"n > 0\" \"a mod m = b\" \"c mod n = d\"\n  shows \"x = a + k * m\" for some integer k satisfying the combined congruence.", "update_count": 0}}