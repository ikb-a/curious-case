{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "nonzero_multiplicative_inverse": {"skill_name": "nonzero_multiplicative_inverse", "marker": "lemma nonzero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms\n    by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonzero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" using assms\n    by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "nonzero_multiplicative_inverseV2": {"skill_name": "nonzero_multiplicative_inverseV2", "marker": "lemma nonzero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 / a \\<noteq> 0\" using assms by auto\n  then show ?thesis by (simp add: assms)\nqed", "description": "-", "full_code": "lemma nonzero_multiplicative_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 / a \\<noteq> 0\" using assms by auto\n  then show ?thesis by (simp add: assms)\nqed", "origin": "a_times_vera", "update_count": 0}, "mod_add_power_fewer_dimensions": {"skill_name": "mod_add_power_fewer_dimensions", "marker": "lemma mod_add_power_fewer_dimensions:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b + d)^c) mod n = ((a + b + d)^c) mod n\"\nproof -\n  have \"((x + b + d)^c) mod n = (((x + b) + d)^c) mod n\"\n    by (simp add: add.assoc)\n  also have \"... = (((x mod n) + b) + d)^c mod n\"\n    by (smt (verit) assms(1) assms(3) assms(4) mod_add_left_eq mod_add_power_general)\n  also have \"... = (a + b + d)^c mod n\"\n    using assms(4) by (metis add.commute assms(5) group_cancel.add1 group_cancel.add2)\n  finally show ?thesis by (metis \\<open>(x + b + d) ^ c mod n = (x mod n + b + d) ^ c mod n\\<close> add.commute add.left_commute assms(5))\nqed", "description": "-", "full_code": "lemma mod_add_power_general:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed\n\nlemma mod_add_power_fewer_dimensions:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b + d)^c) mod n = ((a + b + d)^c) mod n\"\nproof -\n  have \"((x + b + d)^c) mod n = (((x + b) + d)^c) mod n\"\n    by (simp add: add.assoc)\n  also have \"... = (((x mod n) + b) + d)^c mod n\"\n    by (smt (verit) assms(1) assms(3) assms(4) mod_add_left_eq mod_add_power_general)\n  also have \"... = (a + b + d)^c mod n\"\n    using assms(4) by (metis add.commute assms(5) group_cancel.add1 group_cancel.add2)\n  finally show ?thesis by (metis \\<open>(x + b + d) ^ c mod n = (x mod n + b + d) ^ c mod n\\<close> add.commute add.left_commute assms(5))\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add_power_multi_dim": {"skill_name": "mod_add_power_multi_dim", "marker": "lemma mod_add_power_multi_dim:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b + d)^c) mod n = ((a + b + d)^c) mod n\"\nproof -\n  have \"((x + b + d) mod n) = ((x mod n) + (b mod n) + (d mod n)) mod n\"\n    by (smt (verit) mod_add_cong mod_add_eq mod_mod_trivial)\n  then have \"(x + b + d)^c mod n = ((x mod n) + b + d)^c mod n\"\n    by (smt (verit) assms(1) assms(3) assms(4) mod_add_left_eq mod_add_power_generalized mod_add_right_eq)\n  also have \"... = (a + b + d)^c mod n\"\n    using assms(4) by (metis add.commute assms(5) group_cancel.add1 group_cancel.add2)\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power_generalized:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"((x + b) mod n) = ((x mod n) + (b mod n)) mod n\"\n    by presburger\n  then have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (metis mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed\n\nlemma mod_add_power_multi_dim:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b + d)^c) mod n = ((a + b + d)^c) mod n\"\nproof -\n  have \"((x + b + d) mod n) = ((x mod n) + (b mod n) + (d mod n)) mod n\"\n    by (smt (verit) mod_add_cong mod_add_eq mod_mod_trivial)\n  then have \"(x + b + d)^c mod n = ((x mod n) + b + d)^c mod n\"\n    by (smt (verit) assms(1) assms(3) assms(4) mod_add_left_eq mod_add_power_generalized mod_add_right_eq)\n  also have \"... = (a + b + d)^c mod n\"\n    using assms(4) by (metis add.commute assms(5) group_cancel.add1 group_cancel.add2)\n  finally show ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "mod_add_power_extended": {"skill_name": "mod_add_power_extended", "marker": "lemma mod_add_power_extended:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\" \"d > 0\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  then have \"((a + b)^c + d) mod n = ((a + b)^c mod n + d) mod n\"\n    by (metis mod_add_left_eq)\n  then show ?thesis using assms by (metis add.commute calculation mod_add_cong)\nqed", "description": "-", "full_code": "lemma mod_add_power_extended:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\" \"d > 0\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  then have \"((a + b)^c + d) mod n = ((a + b)^c mod n + d) mod n\"\n    by (metis mod_add_left_eq)\n  then show ?thesis using assms by (metis add.commute calculation mod_add_cong)\nqed", "origin": "mod_add_power", "update_count": 0}, "cal_log_exp_value_general": {"skill_name": "cal_log_exp_value_general", "marker": "lemma cal_log_exp_value_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\" \n    using log_nat_power[of b a n] by (metis assms(3))\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma cal_log_exp_value_general:\n  fixes a b :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"b > 0\"\n  shows \"log a (b^n) = n * log a b\"\nproof -\n  have \"log a (b^n) = n * log a b\" \n    using log_nat_power[of b a n] by (metis assms(3))\n  then show ?thesis by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "cal_log_exp_value_multi": {"skill_name": "cal_log_exp_value_multi", "marker": "lemma cal_log_exp_value_multi:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\" \"m > 0\"\n  shows \"log a ((a^n) * (a^m)) = n + m\"\nproof -\n  have \"log a ((a^n) * (a^m)) = log a (a^(n + m))\"\n    by (simp add: power_add)\n  then have \"log a ((a^n) * (a^m)) = n + m\"\n    using cal_log_exp_value[of a \"n + m\"] assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed\n\nlemma cal_log_exp_value_multi:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\" \"m > 0\"\n  shows \"log a ((a^n) * (a^m)) = n + m\"\nproof -\n  have \"log a ((a^n) * (a^m)) = log a (a^(n + m))\"\n    by (simp add: power_add)\n  then have \"log a ((a^n) * (a^m)) = n + m\"\n    using cal_log_exp_value[of a \"n + m\"] assms by auto\n  thus ?thesis by simp\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "expand_square": {"skill_name": "expand_square", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\"\n    by sos\n  also have \"... = a * (a - b) - b * (a - b)\"\n    by sos\n  also have \"... = a^2 - a * b - b * a + b^2\"\n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\"\n    by sos\n  also have \"... = a * (a - b) - b * (a - b)\"\n    by sos\n  also have \"... = a^2 - a * b - b * a + b^2\"\n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV2": {"skill_name": "expand_squareV2", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * a - a * b - b * a + b * b\" \n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * a - a * b - b * a + b * b\" \n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" \n    by sos\n  finally show ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV3": {"skill_name": "expand_squareV3", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" by sos\n  also have \"... = a * (a - b) - b * (a - b)\" by sos\n  also have \"... = a * a - a * b - b * a + b * b\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" by sos\n  also have \"... = a * (a - b) - b * (a - b)\" by sos\n  also have \"... = a * a - a * b - b * a + b * b\" by sos\n  also have \"... = a^2 - 2 * a * b + b^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "combine_fractions": {"skill_name": "combine_fractions", "marker": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a/c) + (b/d) = (a*d + b*c) / (c*d)\"\nproof -\n  have \"a / c + b / d = (a * d) / (c * d) + (b * c) / (c * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (a * d + b * c) / (c * d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a/c) + (b/d) = (a*d + b*c) / (c*d)\"\nproof -\n  have \"a / c + b / d = (a * d) / (c * d) + (b * c) / (c * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (a * d + b * c) / (c * d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "combine_fractionsV2": {"skill_name": "combine_fractionsV2", "marker": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / c) + (b / d) = (a * d + b * c) / (c * d)\"\nproof -\n  have \"a / c + b / d = a * (1 / c) + b * (1 / d)\" by (simp add: field_simps)\n  also have \"... = (a * d) / (c * d) + (b * c) / (c * d)\" by (simp add: assms)\n  also have \"... = (a * d + b * c) / (c * d)\" by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"c \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a / c) + (b / d) = (a * d + b * c) / (c * d)\"\nproof -\n  have \"a / c + b / d = a * (1 / c) + b * (1 / d)\" by (simp add: field_simps)\n  also have \"... = (a * d) / (c * d) + (b * c) / (c * d)\" by (simp add: assms)\n  also have \"... = (a * d + b * c) / (c * d)\" by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV4": {"skill_name": "expand_squareV4", "marker": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a - b) - b * (a - b)\" \n    by sos\n  also have \"... = a * a - a * b - b * a + b * b\"\n    by sos\n  also have \"... = a^2 - a * b - b * a + b^2\" \n    by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2 * a * b + b^2\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b)^2 = (a - b) * (a - b)\" \n    by (simp add: power2_eq_square)\n  also have \"... = a * (a - b) - b * (a - b)\" \n    by sos\n  also have \"... = a * a - a * b - b * a + b * b\"\n    by sos\n  also have \"... = a^2 - a * b - b * a + b^2\" \n    by (simp add: power2_eq_square)\n  also have \"... = a^2 - 2 * a * b + b^2\" \n    by (simp add: field_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "neg_thirteen_times": {"skill_name": "neg_thirteen_times", "marker": "lemma neg_thirteen_times:\n  fixes x :: real\n  shows \"-13 * x = -13 * x\"\n  by simp", "description": "", "full_code": "lemma neg_thirteen_times:\n  fixes x :: real\n  shows \"-13 * x = -13 * x\"\n  by simp", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v4", "update_count": -1}, "double_square": {"skill_name": "double_square", "marker": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp", "description": "", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp", "origin": "data/full_data/debug/valid_rand/mathd_algebra_116.json_v4", "update_count": -1}, "neg_multiplication": {"skill_name": "neg_multiplication", "marker": "lemma neg_multiplication:\n  fixes a b :: real\n  shows \"-a * b = - (a * b)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_multiplication:\n  fixes a b :: real\n  shows \"-a * b = - (a * b)\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "negation_property": {"skill_name": "negation_property", "marker": "lemma negation_property:\n  fixes a b :: real\n  shows \"-(a + b) = -a + -b\"\nproof -\n  have \"-(a + b) = -a + -b\" by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma negation_property:\n  fixes a b :: real\n  shows \"-(a + b) = -a + -b\"\nproof -\n  have \"-(a + b) = -a + -b\" by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "negation_propertyV2": {"skill_name": "negation_propertyV2", "marker": "lemma negation_property:\n  fixes x :: real\n  shows \"-a * x = - (a * x)\"\nproof -\n  have \"- a * x = - (a * x)\" by simp\n  show ?thesis by simp\nqed", "description": "-", "full_code": "lemma negation_property:\n  fixes x :: real\n  shows \"-a * x = - (a * x)\"\nproof -\n  have \"- a * x = - (a * x)\" by simp\n  show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_distributive": {"skill_name": "double_square_distributive", "marker": "lemma double_square_distributive:\n  fixes x y :: real\n  shows \"m * (x^2 + y^2) = (m * x^2) + (m * y^2)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma double_square_distributive:\n  fixes x y :: real\n  shows \"m * (x^2 + y^2) = (m * x^2) + (m * y^2)\"\n  by (simp add: algebra_simps)", "origin": "double_square", "update_count": 0}, "double_square_inequality": {"skill_name": "double_square_inequality", "marker": "lemma double_square_inequality:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"(x + y)^2 \\<ge> x^2 + y^2\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  thus ?thesis using assms by (simp add: zero_le_mult_iff)\nqed", "description": "-", "full_code": "lemma double_square_inequality:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"(x + y)^2 \\<ge> x^2 + y^2\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  thus ?thesis using assms by (simp add: zero_le_mult_iff)\nqed", "origin": "double_square", "update_count": 0}, "double_square_of_sum": {"skill_name": "double_square_of_sum", "marker": "lemma double_square_of_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2*x*y + y^2)\"\nproof -\n  have \"2 * (x + y)^2 = 2 * ((x + y) * (x + y))\" by sos\n  also have \"... = 2 * (x^2 + 2*x*y + y^2)\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_of_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2*x*y + y^2)\"\nproof -\n  have \"2 * (x + y)^2 = 2 * ((x + y) * (x + y))\" by sos\n  also have \"... = 2 * (x^2 + 2*x*y + y^2)\" by sos\n  finally show ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "double_square_expansion": {"skill_name": "double_square_expansion", "marker": "lemma double_square_expansion:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\n  by sos", "description": "-", "full_code": "lemma double_square_expansion:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\n  by sos", "origin": "double_square", "update_count": 0}, "double_square_two_terms": {"skill_name": "double_square_two_terms", "marker": "lemma double_square_two_terms:\n  fixes a b :: real\n  shows \"2 * (a^2 + b^2) = 2 * a^2 + 2 * b^2\"\n  by simp", "description": "-", "full_code": "lemma double_square_two_terms:\n  fixes a b :: real\n  shows \"2 * (a^2 + b^2) = 2 * a^2 + 2 * b^2\"\n  by simp", "origin": "double_square", "update_count": 0}, "negation_propertyV3": {"skill_name": "negation_propertyV3", "marker": "lemma negation_property:\n  fixes x :: real\n  shows \"(-c) * x = - (c * x)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma negation_property:\n  fixes x :: real\n  shows \"(-c) * x = - (c * x)\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_property": {"skill_name": "neg_times_property", "marker": "lemma neg_times_property:\n  fixes x y :: real\n  shows \"(-k) * x = - (k * x)\"\n  by auto", "description": "-", "full_code": "lemma neg_times_property:\n  fixes x y :: real\n  shows \"(-k) * x = - (k * x)\"\n  by auto", "origin": "neg_thirteen_times", "update_count": 0}, "double_product_expansion": {"skill_name": "double_product_expansion", "marker": "lemma double_product_expansion:\n  fixes a b :: real\n  shows \"2 * a * b = (a + b)^2 - (a^2 + b^2)\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then have \"(a + b)^2 - (a^2 + b^2) = 2 * a * b\" by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_product_expansion:\n  fixes a b :: real\n  shows \"2 * a * b = (a + b)^2 - (a^2 + b^2)\"\nproof -\n  have \"(a + b)^2 = a^2 + 2 * a * b + b^2\" by (simp add: power2_eq_square algebra_simps)\n  then have \"(a + b)^2 - (a^2 + b^2) = 2 * a * b\" by simp\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "neg_thirteen_times_multi": {"skill_name": "neg_thirteen_times_multi", "marker": "lemma neg_thirteen_times_multi:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * (x + real_of_nat n) = -13 * x - 13 * real_of_nat n\"\nproof -\n  have \"-13 * (x + real_of_nat n) = -13 * x - 13 * real_of_nat n\" \n    by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_multi:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * (x + real_of_nat n) = -13 * x - 13 * real_of_nat n\"\nproof -\n  have \"-13 * (x + real_of_nat n) = -13 * x - 13 * real_of_nat n\" \n    by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_natural": {"skill_name": "neg_thirteen_times_natural", "marker": "lemma neg_thirteen_times_natural:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * (x + n) = -13 * x - 13 * n\"\nproof -\n  have \"-13 * (x + n) = -13 * x - 13 * n\"\n    by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_natural:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * (x + n) = -13 * x - 13 * n\"\nproof -\n  have \"-13 * (x + n) = -13 * x - 13 * n\"\n    by (simp add: algebra_simps)\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_scalar_product": {"skill_name": "neg_scalar_product", "marker": "lemma neg_scalar_product:\n  fixes a :: real\n  fixes xs :: \"real list\"\n  shows \"(-a) * sum_list xs = sum_list (map (\\<lambda>x. -a * x) xs)\"\nproof (induction xs)\n  case Nil\n  then show ?case \n    by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma neg_scalar_product:\n  fixes a :: real\n  fixes xs :: \"real list\"\n  shows \"(-a) * sum_list xs = sum_list (map (\\<lambda>x. -a * x) xs)\"\nproof (induction xs)\n  case Nil\n  then show ?case \n    by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (simp add: field_simps)\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_with_conditions": {"skill_name": "double_square_with_conditions", "marker": "lemma double_square_with_conditions:\n  fixes x y :: real\n  assumes \"x = y\"\n  shows \"2 * x^2 = (x + x) * x\"\n  using assms by sos", "description": "-", "full_code": "lemma double_square_with_conditions:\n  fixes x y :: real\n  assumes \"x = y\"\n  shows \"2 * x^2 = (x + x) * x\"\n  using assms by sos", "origin": "double_square", "update_count": 0}, "double_square_expanded": {"skill_name": "double_square_expanded", "marker": "lemma double_square_expanded:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x) * x\"\n  by sos", "description": "-", "full_code": "lemma double_square_expanded:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x) * x\"\n  by sos", "origin": "double_square", "update_count": 0}, "neg_thirteen_times_extended": {"skill_name": "neg_thirteen_times_extended", "marker": "lemma neg_thirteen_times_extended:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\"\n    by (simp add: distrib_left)\n  thus ?thesis .\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_extended:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\"\n    by (simp add: distrib_left)\n  thus ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_grouped": {"skill_name": "neg_thirteen_times_grouped", "marker": "lemma neg_thirteen_times_grouped:\n  fixes x y z :: real\n  shows \"-13 * (x + y + z) = -13 * x + -13 * y + -13 * z\"\nproof -\n  have \"-13 * (x + y + z) = -13 * (x + y) + -13 * z\"\n    by (simp add: distrib_left)\n  also have \"... = -13 * x + -13 * y + -13 * z\"\n    using neg_thirteen_times_extended by simp\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_extended:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\"\n    by (simp add: distrib_left)\n  thus ?thesis .\nqed\n\nlemma neg_thirteen_times_grouped:\n  fixes x y z :: real\n  shows \"-13 * (x + y + z) = -13 * x + -13 * y + -13 * z\"\nproof -\n  have \"-13 * (x + y + z) = -13 * (x + y) + -13 * z\"\n    by (simp add: distrib_left)\n  also have \"... = -13 * x + -13 * y + -13 * z\"\n    using neg_thirteen_times_extended by simp\n  finally show ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_distributive": {"skill_name": "neg_thirteen_times_distributive", "marker": "lemma neg_thirteen_times_distributive:\n  fixes x :: real\n  shows \"(-13 * (x + 1)) = -13 * x - 13\"\nproof -\n  have \"(-13 * (x + 1)) = -13 * x + (-13 * 1)\" by (simp only: distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_distributive:\n  fixes x :: real\n  shows \"(-13 * (x + 1)) = -13 * x - 13\"\nproof -\n  have \"(-13 * (x + 1)) = -13 * x + (-13 * 1)\" by (simp only: distrib_left)\n  thus ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_property": {"skill_name": "neg_thirteen_times_property", "marker": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  shows \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\nproof -\n  have \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\n    by (simp add: distrib_left)\n  thus ?thesis .\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  shows \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\nproof -\n  have \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\n    by (simp add: distrib_left)\n  thus ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_sum": {"skill_name": "neg_thirteen_times_sum", "marker": "lemma neg_thirteen_times_sum:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\n  by (simp add: distrib_left)", "description": "-", "full_code": "lemma neg_thirteen_times_sum:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\n  by (simp add: distrib_left)", "origin": "neg_thirteen_times", "update_count": 0}, "combine_fractionsV3": {"skill_name": "combine_fractionsV3", "marker": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a/b) + (c/d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (a * d + c * b) / (b * d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_fractions:\n  fixes a b c d :: real\n  assumes \"b \\<noteq> 0\" \"d \\<noteq> 0\"\n  shows \"(a/b) + (c/d) = (a * d + c * b) / (b * d)\"\nproof -\n  have \"a / b + c / d = (a * d) / (b * d) + (c * b) / (b * d)\"\n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (a * d + c * b) / (b * d)\"\n    by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expression": {"skill_name": "simplify_square_root_expression", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n    by (metis real_sqrt_mult)\n  thus ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) = sqrt(a * b)\" \n    by (metis real_sqrt_mult)\n  thus ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "real_number_properties": {"skill_name": "real_number_properties", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x \\<ge> 0\" and \"y \\<ge> 0\" by simp_all\n  then show \"x + y \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x \\<ge> 0\" and \"y \\<ge> 0\" by simp_all\n  then show \"x + y \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV2": {"skill_name": "real_number_propertiesV2", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  moreover have \"x \\<ge> 0\" by (rule assms(1))\n  moreover have \"y \\<ge> 0\" by (rule assms(2))\n  ultimately show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  moreover have \"x \\<ge> 0\" by (rule assms(1))\n  moreover have \"y \\<ge> 0\" by (rule assms(2))\n  ultimately show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV3": {"skill_name": "real_number_propertiesV3", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = x + y\" by auto\n  moreover have \"x \\<ge> 0\" using assms(1) by simp\n  moreover have \"y \\<ge> 0\" using assms(2) by simp\n  ultimately show ?thesis by auto\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = x + y\" by auto\n  moreover have \"x \\<ge> 0\" using assms(1) by simp\n  moreover have \"y \\<ge> 0\" using assms(2) by simp\n  ultimately show ?thesis by auto\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root": {"skill_name": "simplify_square_root", "marker": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) = sqrt(x) * sqrt(y)\" \n    using assms by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) = sqrt(x) * sqrt(y)\" \n    using assms by (metis real_sqrt_mult)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV4": {"skill_name": "real_number_propertiesV4", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y \\<ge> 0 + 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y \\<ge> 0 + 0\" \n    using assms by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV5": {"skill_name": "real_number_propertiesV5", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = (0 + x) + (0 + y)\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = (0 + x) + (0 + y)\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV6": {"skill_name": "real_number_propertiesV6", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = x + y\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by auto\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  have \"x + y = x + y\" by simp\n  also have \"... \\<ge> 0 + 0\" using assms by auto\n  finally show ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV7": {"skill_name": "real_number_propertiesV7", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  then show ?thesis\n    using assms by auto\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  then show ?thesis\n    using assms by auto\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_rootV2": {"skill_name": "simplify_square_rootV2", "marker": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) * sqrt(x * y) = x * y\" by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt x * sqrt x) * (sqrt y * sqrt y)\" using assms\n    by auto\n  also have \"... = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" by (auto simp: field_simps)\n  finally have \"sqrt(x * y) * sqrt(x * y) = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" .\n  then show ?thesis by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) * sqrt(x * y) = x * y\" by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt x * sqrt x) * (sqrt y * sqrt y)\" using assms\n    by auto\n  also have \"... = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" by (auto simp: field_simps)\n  finally have \"sqrt(x * y) * sqrt(x * y) = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" .\n  then show ?thesis by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_rootV3": {"skill_name": "simplify_square_rootV3", "marker": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) = sqrt((sqrt x) ^ 2 * (sqrt y) ^ 2)\" \n    using assms by (simp add: power2_eq_square)\n  also have \"... = sqrt x * sqrt y\" \n    by (metis calculation real_sqrt_mult)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) = sqrt((sqrt x) ^ 2 * (sqrt y) ^ 2)\" \n    using assms by (simp add: power2_eq_square)\n  also have \"... = sqrt x * sqrt y\" \n    by (metis calculation real_sqrt_mult)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "double_square_property": {"skill_name": "double_square_property", "marker": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x * x) + (x * x)\"\nproof -\n  have \"2 * x^2 = x^2 + x^2\" by (simp add: algebra_simps)\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x * x) + (x * x)\"\nproof -\n  have \"2 * x^2 = x^2 + x^2\" by (simp add: algebra_simps)\n  then show ?thesis by sos\nqed", "origin": "double_square", "update_count": 0}, "double_squareV2": {"skill_name": "double_squareV2", "marker": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square)\n  then show ?thesis by (simp)\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square)\n  then show ?thesis by (simp)\nqed", "origin": "double_square", "update_count": 0}, "neg_product": {"skill_name": "neg_product", "marker": "lemma neg_product:\n  fixes a b :: real\n  shows \"-(a * b) = -a * b\"\nproof -\n  have \"-(a * b) = -1 * (a * b)\" by (simp add: algebra_simps)\n  also have \"... = (-1 * a) * b\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_product:\n  fixes a b :: real\n  shows \"-(a * b) = -a * b\"\nproof -\n  have \"-(a * b) = -1 * (a * b)\" by (simp add: algebra_simps)\n  also have \"... = (-1 * a) * b\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "factor_double_square": {"skill_name": "factor_double_square", "marker": "lemma factor_double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (x * sqrt 2)^2\"\nproof -\n  have \"2 * x^2 = (sqrt 2 * x) * (sqrt 2 * x)\" by (simp add: power2_eq_square)\n  then show ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma factor_double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (x * sqrt 2)^2\"\nproof -\n  have \"2 * x^2 = (sqrt 2 * x) * (sqrt 2 * x)\" by (simp add: power2_eq_square)\n  then show ?thesis by (auto simp: field_simps)\nqed", "origin": "double_square", "update_count": 0}, "neg_times_scalar": {"skill_name": "neg_times_scalar", "marker": "lemma neg_times_scalar:\n  fixes x :: real\n  assumes \"a \\<in> {0..n}\" \"n > 0\"\n  shows \"(-a) * x = - (a * x)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_times_scalar:\n  fixes x :: real\n  assumes \"a \\<in> {0..n}\" \"n > 0\"\n  shows \"(-a) * x = - (a * x)\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_distribution": {"skill_name": "neg_times_distribution", "marker": "lemma neg_times_distribution:\n  fixes x y :: real\n  shows \"-a * (x + y) = -a * x - a * y\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_times_distribution:\n  fixes x y :: real\n  shows \"-a * (x + y) = -a * x - a * y\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_n_dimensions": {"skill_name": "double_square_n_dimensions", "marker": "lemma double_square_n_dimensions:\n  fixes x :: \"real list\"\n  shows \"2 * sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. 2 * (xi^2)) x)\"\nproof -\n  have \"sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. (xi^2)) x)\"\n    by simp\n  then show ?thesis\n    by (metis sum_list_const_mult)\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp\n\nlemma double_square_n_dimensions:\n  fixes x :: \"real list\"\n  shows \"2 * sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. 2 * (xi^2)) x)\"\nproof -\n  have \"sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. (xi^2)) x)\"\n    by simp\n  then show ?thesis\n    by (metis sum_list_const_mult)\nqed", "origin": "double_square", "update_count": 0}, "double_square_n_dimensionsV2": {"skill_name": "double_square_n_dimensionsV2", "marker": "lemma double_square_n_dimensions:\n  fixes x :: \"real list\" and n :: nat\n  assumes \"length x = n\"\n  shows \"2 * sum (\\<lambda>i. x ! i ^ 2) {0..n-1} = sum (\\<lambda>i. 2 * (x ! i ^ 2)) {0..n-1}\"\nproof -\n  have \"sum (\\<lambda>i. x ! i ^ 2) {0..n-1} = sum (\\<lambda>i. (x ! i ^ 2)) {0..n-1}\" by simp\n  then show ?thesis by (metis sum_distrib_left)\nqed", "description": "-", "full_code": "lemma double_square_n_dimensions:\n  fixes x :: \"real list\" and n :: nat\n  assumes \"length x = n\"\n  shows \"2 * sum (\\<lambda>i. x ! i ^ 2) {0..n-1} = sum (\\<lambda>i. 2 * (x ! i ^ 2)) {0..n-1}\"\nproof -\n  have \"sum (\\<lambda>i. x ! i ^ 2) {0..n-1} = sum (\\<lambda>i. (x ! i ^ 2)) {0..n-1}\" by simp\n  then show ?thesis by (metis sum_distrib_left)\nqed", "origin": "double_square", "update_count": 0}, "neg_times_generalized": {"skill_name": "neg_times_generalized", "marker": "lemma neg_times_generalized:\n  fixes a x :: real\n  shows \"-a * x = -a * x\"\n  by simp", "description": "-", "full_code": "lemma neg_times_generalized:\n  fixes a x :: real\n  shows \"-a * x = -a * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_product": {"skill_name": "double_square_product", "marker": "lemma double_square_product:\n  fixes x y :: real\n  shows \"2 * (x * y) = (x + y)^2 - (x^2 + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  hence \"(x + y)^2 - (x^2 + y^2) = 2 * x * y\" by (simp)\n  thus ?thesis by (simp add: mult.commute)\nqed", "description": "-", "full_code": "lemma double_square_product:\n  fixes x y :: real\n  shows \"2 * (x * y) = (x + y)^2 - (x^2 + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  hence \"(x + y)^2 - (x^2 + y^2) = 2 * x * y\" by (simp)\n  thus ?thesis by (simp add: mult.commute)\nqed", "origin": "double_square", "update_count": 0}, "double_square_root_relation": {"skill_name": "double_square_root_relation", "marker": "lemma double_square_root_relation:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(2 * (x^2 + y^2)) = sqrt(2) * sqrt(x^2 + y^2)\"\n  using assms by (metis real_sqrt_mult)", "description": "-", "full_code": "lemma double_square_root_relation:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(2 * (x^2 + y^2)) = sqrt(2) * sqrt(x^2 + y^2)\"\n  using assms by (metis real_sqrt_mult)", "origin": "double_square", "update_count": 0}, "negation_identity": {"skill_name": "negation_identity", "marker": "lemma negation_identity:\n  fixes a :: real\n  shows \"-a = -a\"\n  by simp", "description": "-", "full_code": "lemma negation_identity:\n  fixes a :: real\n  shows \"-a = -a\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "sqrt_properties": {"skill_name": "sqrt_properties", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt ((sqrt a) ^ 2 * (sqrt b) ^ 2)\"\n    using assms by (simp add: power2_eq_square)\n  also have \"... = sqrt a * sqrt b\"\n    by (metis calculation real_sqrt_mult)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) = sqrt ((sqrt a) ^ 2 * (sqrt b) ^ 2)\"\n    using assms by (simp add: power2_eq_square)\n  also have \"... = sqrt a * sqrt b\"\n    by (metis calculation real_sqrt_mult)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "substitute_and_simplify": {"skill_name": "substitute_and_simplify", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" using assms by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" using assms by simp\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "substitute_and_simplifyV2": {"skill_name": "substitute_and_simplifyV2", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  from assms have \"k = - (2 * x^2 - 13 * x)\" by (simp add: algebra_simps)\n  thus ?thesis \n    by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  from assms have \"k = - (2 * x^2 - 13 * x)\" by (simp add: algebra_simps)\n  thus ?thesis \n    by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "neg_times_generalization": {"skill_name": "neg_times_generalization", "marker": "lemma neg_times_generalization:\n  fixes a x :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = -a * x\"\n  by simp", "description": "-", "full_code": "lemma neg_times_generalization:\n  fixes a x :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = -a * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "substitute_and_simplifyV3": {"skill_name": "substitute_and_simplifyV3", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" \n    using assms by (simp add: algebra_simps)\n  have \"k = 13 * x - 2 * x^2\"\n    by (smt (verit) \\<open>k = - (2 * x\\<^sup>2 - 13 * x)\\<close>)\n  thus ?thesis using `k = - (2 * x^2 - 13 * x)` by simp\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" \n    using assms by (simp add: algebra_simps)\n  have \"k = 13 * x - 2 * x^2\"\n    by (smt (verit) \\<open>k = - (2 * x\\<^sup>2 - 13 * x)\\<close>)\n  thus ?thesis using `k = - (2 * x^2 - 13 * x)` by simp\nqed", "origin": "do_request", "update_count": 0}, "substitute_and_simplifyV4": {"skill_name": "substitute_and_simplifyV4", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  obtain k where \"k = 13 * x - 2 * x^2\" \n    using assms by (simp add: algebra_simps)\n  thus ?thesis by (smt (verit) assms)\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  obtain k where \"k = 13 * x - 2 * x^2\" \n    using assms by (simp add: algebra_simps)\n  thus ?thesis by (smt (verit) assms)\nqed", "origin": "do_request", "update_count": 0}, "substitute_and_simplifyV5": {"skill_name": "substitute_and_simplifyV5", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  from assms have \"2 * x^2 - 13 * x + k = 0\" \n    by assumption\n  then have \"k = - (2 * x^2 - 13 * x)\" by (simp add: algebra_simps)\n  also have \"... = 13 * x - 2 * x^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  from assms have \"2 * x^2 - 13 * x + k = 0\" \n    by assumption\n  then have \"k = - (2 * x^2 - 13 * x)\" by (simp add: algebra_simps)\n  also have \"... = 13 * x - 2 * x^2\" \n    by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV2": {"skill_name": "sqrt_propertiesV2", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\" \n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\" \n    using assms by auto\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" \n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show \"sqrt (a * b) = sqrt a * sqrt b\" \n    using real_sqrt_mult by blast\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\" \n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\" \n    using assms by auto\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" \n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show \"sqrt (a * b) = sqrt a * sqrt b\" \n    using real_sqrt_mult by blast\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV3": {"skill_name": "sqrt_propertiesV3", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    using assms by (auto simp: field_simps)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (auto simp: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    using assms by (auto simp: field_simps)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (auto simp: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV4": {"skill_name": "sqrt_propertiesV4", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\" \n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\" \n    using assms by (simp add: power2_eq_square)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" \n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis \n    by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\" \n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\" \n    using assms by (simp add: power2_eq_square)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" \n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis \n    by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "double_square_generalized": {"skill_name": "double_square_generalized", "marker": "lemma double_square_generalized:\n  fixes x :: real\n  assumes \"n > 0\"\n  shows \"n * x^2 = (n * (x^2))\"\n  using assms by simp", "description": "-", "full_code": "lemma double_square_generalized:\n  fixes x :: real\n  assumes \"n > 0\"\n  shows \"n * x^2 = (n * (x^2))\"\n  using assms by simp", "origin": "double_square", "update_count": 0}, "double_square_extended": {"skill_name": "double_square_extended", "marker": "lemma double_square_extended:\n  fixes x :: real\n  fixes n :: nat\n  shows \"n * x^2 = (n * (x^2))\"\n  by simp", "description": "-", "full_code": "lemma double_square_extended:\n  fixes x :: real\n  fixes n :: nat\n  shows \"n * x^2 = (n * (x^2))\"\n  by simp", "origin": "double_square", "update_count": 0}, "double_square_multi": {"skill_name": "double_square_multi", "marker": "lemma double_square_multi:\n  fixes x :: real\n  assumes \"k > 0\"\n  shows \"k * x^2 = (k * (x^2))\"\n  by (metis assms)", "description": "-", "full_code": "lemma double_square_multi:\n  fixes x :: real\n  assumes \"k > 0\"\n  shows \"k * x^2 = (k * (x^2))\"\n  by (metis assms)", "origin": "double_square", "update_count": 0}, "sqrt_propertiesV5": {"skill_name": "sqrt_propertiesV5", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    by (metis abs_mult abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_abs2 real_sqrt_mult)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (auto simp: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    by (metis abs_mult abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_abs2 real_sqrt_mult)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (auto simp: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "double_square_expression": {"skill_name": "double_square_expression", "marker": "lemma double_square_expression:\n  fixes x y :: real\n  shows \"2 * (x^2 + y^2) = (2 * x^2) + (2 * y^2)\"\n  by simp", "description": "-", "full_code": "lemma double_square_expression:\n  fixes x y :: real\n  shows \"2 * (x^2 + y^2) = (2 * x^2) + (2 * y^2)\"\n  by simp", "origin": "double_square", "update_count": 0}, "double_square_complex": {"skill_name": "double_square_complex", "marker": "lemma double_square_complex:\n  fixes z :: complex\n  shows \"2 * (Re z)^2 + 2 * (Im z)^2 = 2 * (norm z)^2\"\nproof -\n  have \"norm z = sqrt ((Re z)^2 + (Im z)^2)\" \n    by (metis norm_complex_def)\n  hence \"norm z^2 = (Re z)^2 + (Im z)^2\" by simp\n  thus ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma double_square_complex:\n  fixes z :: complex\n  shows \"2 * (Re z)^2 + 2 * (Im z)^2 = 2 * (norm z)^2\"\nproof -\n  have \"norm z = sqrt ((Re z)^2 + (Im z)^2)\" \n    by (metis norm_complex_def)\n  hence \"norm z^2 = (Re z)^2 + (Im z)^2\" by simp\n  thus ?thesis \n    by auto\nqed", "origin": "double_square", "update_count": 0}, "simplify_square_root_expressionV2": {"skill_name": "simplify_square_root_expressionV2", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt (a) * sqrt (b) * sqrt (a) * sqrt (b) = (sqrt (a) * sqrt (b))^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = sqrt (a) * sqrt (a) * sqrt (b) * sqrt (b)\"\n    by (metis mult.assoc mult.commute mult.left_commute power2_eq_square real_sqrt_mult real_sqrt_power)\n  also have \"... = a * b\"\n    by (metis \\<open>(sqrt a * sqrt b)\\<^sup>2 = sqrt a * sqrt a * sqrt b * sqrt b\\<close> \\<open>sqrt a * sqrt b * sqrt a * sqrt b = (sqrt a * sqrt b)\\<^sup>2\\<close> ab_semigroup_mult_class.mult_ac(1) abs_mult abs_of_nonneg assms(1) assms(2) mult.commute mult.left_commute real_sqrt_abs2 real_sqrt_mult real_sqrt_mult_self)\n  finally have \"sqrt (a) * sqrt (b) * sqrt (a) * sqrt (b) = a * b\" .\n  then have \"sqrt (a) * sqrt (b) = sqrt (a * b)\"\n    by (metis real_sqrt_mult)\n  thus ?thesis\n    by (simp add: real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt (a) * sqrt (b) * sqrt (a) * sqrt (b) = (sqrt (a) * sqrt (b))^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = sqrt (a) * sqrt (a) * sqrt (b) * sqrt (b)\"\n    by (metis mult.assoc mult.commute mult.left_commute power2_eq_square real_sqrt_mult real_sqrt_power)\n  also have \"... = a * b\"\n    by (metis \\<open>(sqrt a * sqrt b)\\<^sup>2 = sqrt a * sqrt a * sqrt b * sqrt b\\<close> \\<open>sqrt a * sqrt b * sqrt a * sqrt b = (sqrt a * sqrt b)\\<^sup>2\\<close> ab_semigroup_mult_class.mult_ac(1) abs_mult abs_of_nonneg assms(1) assms(2) mult.commute mult.left_commute real_sqrt_abs2 real_sqrt_mult real_sqrt_mult_self)\n  finally have \"sqrt (a) * sqrt (b) * sqrt (a) * sqrt (b) = a * b\" .\n  then have \"sqrt (a) * sqrt (b) = sqrt (a * b)\"\n    by (metis real_sqrt_mult)\n  thus ?thesis\n    by (simp add: real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV3": {"skill_name": "simplify_square_root_expressionV3", "marker": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) * sqrt(a) * sqrt(b) = (sqrt(a) * sqrt(b))^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = a * b\"\n    using assms by (auto simp: field_simps)\n  also have \"... = sqrt(a * b) * sqrt(a * b)\"\n    by (metis assms(1) assms(2) mult_nonneg_nonneg power2_eq_square real_sqrt_pow2)\n  finally have \"sqrt(a) * sqrt(b) * sqrt(a) * sqrt(b) = sqrt(a * b) * sqrt(a * b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt(a) * sqrt(b) = sqrt(a * b)\"\nproof -\n  have \"sqrt(a) * sqrt(b) * sqrt(a) * sqrt(b) = (sqrt(a) * sqrt(b))^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = a * b\"\n    using assms by (auto simp: field_simps)\n  also have \"... = sqrt(a * b) * sqrt(a * b)\"\n    by (metis assms(1) assms(2) mult_nonneg_nonneg power2_eq_square real_sqrt_pow2)\n  finally have \"sqrt(a) * sqrt(b) * sqrt(a) * sqrt(b) = sqrt(a * b) * sqrt(a * b)\" .\n  then show ?thesis\n    by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "negation_propertyV4": {"skill_name": "negation_propertyV4", "marker": "lemma negation_property:\n  fixes x :: real\n  shows \"-c * x = c * (-x)\"\n  by simp", "description": "-", "full_code": "lemma negation_property:\n  fixes x :: real\n  shows \"-c * x = c * (-x)\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "substitute_and_simplifyV6": {"skill_name": "substitute_and_simplifyV6", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" \n    using assms by (simp add: algebra_simps)\n  have \"k = 13 * x - 2 * x^2\" \n    using `k = - (2 * x^2 - 13 * x)` by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"k = - (2 * x^2 - 13 * x)\" \n    using assms by (simp add: algebra_simps)\n  have \"k = 13 * x - 2 * x^2\" \n    using `k = - (2 * x^2 - 13 * x)` by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "substitute_and_simplifyV7": {"skill_name": "substitute_and_simplifyV7", "marker": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"2 * x^2 - 13 * x + k = 0\" using assms by assumption\n  then have \"k = - (2 * x^2 - 13 * x)\"\n    by (simp add: algebra_simps)\n  thus ?thesis\n    by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma substitute_and_simplify:\n  fixes k x :: real\n  assumes \"2 * x^2 - 13 * x + k = 0\"\n  shows \"k = 13 * x - 2 * x^2\"\nproof -\n  have \"2 * x^2 - 13 * x + k = 0\" using assms by assumption\n  then have \"k = - (2 * x^2 - 13 * x)\"\n    by (simp add: algebra_simps)\n  thus ?thesis\n    by (simp add: algebra_simps)\nqed", "origin": "do_request", "update_count": 0}, "neg_k_times": {"skill_name": "neg_k_times", "marker": "lemma neg_k_times:\n  fixes x :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"-k * x = -k * x\"\n  by (metis assms)", "description": "-", "full_code": "lemma neg_k_times:\n  fixes x :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"-k * x = -k * x\"\n  by (metis assms)", "origin": "neg_thirteen_times", "update_count": 0}, "neg_mult": {"skill_name": "neg_mult", "marker": "lemma neg_mult:\n  fixes a x :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = - (a * x)\"\nproof -\n  have \"-a * x = - (a * x)\" by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_mult:\n  fixes a x :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = - (a * x)\"\nproof -\n  have \"-a * x = - (a * x)\" by simp\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_k_timesV2": {"skill_name": "neg_k_timesV2", "marker": "lemma neg_k_times:\n  fixes k :: real\n    and x :: real\n  shows \"-k * x = -k * x\"\n  by simp", "description": "-", "full_code": "lemma neg_k_times:\n  fixes k :: real\n    and x :: real\n  shows \"-k * x = -k * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "sqrt_propertiesV6": {"skill_name": "sqrt_propertiesV6", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = abs a\" \n    (is \"?lhs = ?rhs\")\n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"abs a = a\" by simp\n    thus ?thesis using `sqrt (a^2) * sqrt (a^2) = a^2` by auto\n  next\n    case False\n    then have \"abs a = -a\" by simp\n    thus ?thesis using `sqrt (a^2) * sqrt (a^2) = a^2` by auto\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = abs a\" \n    (is \"?lhs = ?rhs\")\n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"abs a = a\" by simp\n    thus ?thesis using `sqrt (a^2) * sqrt (a^2) = a^2` by auto\n  next\n    case False\n    then have \"abs a = -a\" by simp\n    thus ?thesis using `sqrt (a^2) * sqrt (a^2) = a^2` by auto\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV7": {"skill_name": "sqrt_propertiesV7", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = abs a\" \n    (is \"?LHS = ?RHS\")\n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"abs a = a\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"a < 0\" by (simp add: not_le)\n    hence \"abs a = -a\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = abs a\" \n    (is \"?LHS = ?RHS\")\n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"abs a = a\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"a < 0\" by (simp add: not_le)\n    hence \"abs a = -a\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV8": {"skill_name": "sqrt_propertiesV8", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\" \n    by auto\n  also have \"... = abs a\" \n    by auto\n  finally show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\" \n    by auto\n  also have \"... = abs a\" \n    by auto\n  finally show ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV9": {"skill_name": "sqrt_propertiesV9", "marker": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  also have \"... = (abs a) * (abs a)\"\n    by sos\n  finally have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" .\n  then show \"sqrt (a^2) = abs a\"\n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  also have \"... = (abs a) * (abs a)\"\n    by sos\n  finally have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" .\n  then show \"sqrt (a^2) = abs a\"\n    by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV10": {"skill_name": "sqrt_propertiesV10", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = (abs a) * (abs a)\"\n    by sos\n  finally have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" .\n  have \"sqrt (a^2) \\<ge> 0\"\n    by auto\n  then show ?thesis\n    using `sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)` by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = (abs a) * (abs a)\"\n    by sos\n  finally have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" .\n  have \"sqrt (a^2) \\<ge> 0\"\n    by auto\n  then show ?thesis\n    using `sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)` by auto\nqed", "origin": "do_request", "update_count": 0}, "neg_multiplication_identity": {"skill_name": "neg_multiplication_identity", "marker": "lemma neg_multiplication_identity:\n  fixes x :: real\n  shows \"-13 * x + 13 * x = 0\"\nproof -\n  have \"-13 * x + 13 * x = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_multiplication_identity:\n  fixes x :: real\n  shows \"-13 * x + 13 * x = 0\"\nproof -\n  have \"-13 * x + 13 * x = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "sqrt_propertiesV11": {"skill_name": "sqrt_propertiesV11", "marker": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" \n    by auto\n  then have \"sqrt (a^2) = abs a\" \n    by auto\n  show ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  have \"sqrt (a^2) * sqrt (a^2) = (abs a) * (abs a)\" \n    by auto\n  then have \"sqrt (a^2) = abs a\" \n    by auto\n  show ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV12": {"skill_name": "sqrt_propertiesV12", "marker": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\"\n    by (simp add: abs_of_nonneg)\n  also have \"... = abs a\"\n    by auto\n  finally show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\"\n    by (simp add: abs_of_nonneg)\n  also have \"... = abs a\"\n    by auto\n  finally show ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV13": {"skill_name": "sqrt_propertiesV13", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (simp add: power2_eq_square)\n  then have \"sqrt (a^2) = sqrt ((abs a) * (abs a))\"\n    by (simp add: abs_of_nonneg)\n  also have \"... = abs a\"\n    by (simp add: real_sqrt_unique)\n  finally show ?thesis\n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\"\n    by (simp add: power2_eq_square)\n  then have \"sqrt (a^2) = sqrt ((abs a) * (abs a))\"\n    by (simp add: abs_of_nonneg)\n  also have \"... = abs a\"\n    by (simp add: real_sqrt_unique)\n  finally show ?thesis\n    by auto\nqed", "origin": "do_request", "update_count": 0}, "sqrt_propertiesV14": {"skill_name": "sqrt_propertiesV14", "marker": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (simp add: power2_eq_square)  \n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\" \n    by auto  \n  also have \"... = abs a\" \n    by auto  \n  finally show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a :: real\n  shows \"sqrt (a^2) = abs a\"\nproof -\n  have \"sqrt (a^2) * sqrt (a^2) = a^2\" \n    by (simp add: power2_eq_square)  \n  then have \"sqrt (a^2) = sqrt (abs a * abs a)\" \n    by auto  \n  also have \"... = abs a\" \n    by auto  \n  finally show ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "simplify_sqrt": {"skill_name": "simplify_sqrt", "marker": "lemma simplify_sqrt:\n  fixes k :: real\n  assumes \"k \\<ge> 0\"\n  shows \"sqrt(k) * sqrt(k) = k\"\nproof -\n  have \"sqrt(k) * sqrt(k) = (sqrt k) ^ 2\" \n    by (simp add: power2_eq_square)\n  also have \"... = k\" \n    using assms by auto\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_sqrt:\n  fixes k :: real\n  assumes \"k \\<ge> 0\"\n  shows \"sqrt(k) * sqrt(k) = k\"\nproof -\n  have \"sqrt(k) * sqrt(k) = (sqrt k) ^ 2\" \n    by (simp add: power2_eq_square)\n  also have \"... = k\" \n    using assms by auto\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "square_equation": {"skill_name": "square_equation", "marker": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"b^2 = b * b\" by sos\n  moreover have \"a^2 = a * a\" by sos\n  ultimately show \"a^2 = b^2\" using assms by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"b^2 = b * b\" by sos\n  moreover have \"a^2 = a * a\" by sos\n  ultimately show \"a^2 = b^2\" using assms by (simp add: power2_eq_square)\nqed", "origin": "do_request", "update_count": 0}, "square_equationV2": {"skill_name": "square_equationV2", "marker": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"a^2 = a * a\" by sos\n  also have \"... = b * b\" using assms by simp\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"a^2 = a * a\" by sos\n  also have \"... = b * b\" using assms by simp\n  finally show ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "square_equationV3": {"skill_name": "square_equationV3", "marker": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"b^2 = (a)^2\" \n    using assms by simp\n  thus ?thesis \n    by simp\nqed", "description": "-", "full_code": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"b^2 = (a)^2\" \n    using assms by simp\n  thus ?thesis \n    by simp\nqed", "origin": "do_request", "update_count": 0}, "square_equationV4": {"skill_name": "square_equationV4", "marker": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"a^2 = b^2\" \n    by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  from assms have \"a^2 = b^2\" \n    by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_sqrtV2": {"skill_name": "simplify_sqrtV2", "marker": "lemma simplify_sqrt:\n  fixes k :: real\n  assumes \"k \\<ge> 0\"\n  shows \"sqrt(k) * sqrt(k) = k\"\nproof -\n  have \"sqrt(k) * sqrt(k) = (sqrt(k))^2\" by (metis power2_eq_square)\n  also have \"... = k\" using assms by (simp add: real_sqrt_mult_self)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_sqrt:\n  fixes k :: real\n  assumes \"k \\<ge> 0\"\n  shows \"sqrt(k) * sqrt(k) = k\"\nproof -\n  have \"sqrt(k) * sqrt(k) = (sqrt(k))^2\" by (metis power2_eq_square)\n  also have \"... = k\" using assms by (simp add: real_sqrt_mult_self)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "double_square_equivalence": {"skill_name": "double_square_equivalence", "marker": "lemma double_square_equivalence:\n  fixes x y :: real\n  shows \"2 * x^2 = 2 * (y^2) \\<longleftrightarrow> x^2 = y^2\"\nproof -\n  have \"2 * x^2 = 2 * (y^2) \\<longleftrightarrow> x^2 = y^2\" \n    by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_equivalence:\n  fixes x y :: real\n  shows \"2 * x^2 = 2 * (y^2) \\<longleftrightarrow> x^2 = y^2\"\nproof -\n  have \"2 * x^2 = 2 * (y^2) \\<longleftrightarrow> x^2 = y^2\" \n    by auto\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "double_square_differences": {"skill_name": "double_square_differences", "marker": "lemma double_square_differences:\n  fixes x y :: real\n  shows \"2 * (x^2 - y^2) = 2 * x^2 - 2 * y^2\"\nproof -\n  have \"2 * (x^2 - y^2) = 2 * x^2 - 2 * y^2\" by (simp add: distrib_left)\n  thus ?thesis .\nqed", "description": "-", "full_code": "lemma double_square_differences:\n  fixes x y :: real\n  shows \"2 * (x^2 - y^2) = 2 * x^2 - 2 * y^2\"\nproof -\n  have \"2 * (x^2 - y^2) = 2 * x^2 - 2 * y^2\" by (simp add: distrib_left)\n  thus ?thesis .\nqed", "origin": "double_square", "update_count": 0}, "combine_terms": {"skill_name": "combine_terms", "marker": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"a = b / c\" \"d = e / f\" \"c \\<noteq> 0\" \"f \\<noteq> 0\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  have \"a + d = (b / c) + (e / f)\"\n    using assms(1) assms(2) by simp\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\"\n    by (simp add: assms(3) assms(4) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"a = b / c\" \"d = e / f\" \"c \\<noteq> 0\" \"f \\<noteq> 0\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  have \"a + d = (b / c) + (e / f)\"\n    using assms(1) assms(2) by simp\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\"\n    by (simp add: assms(3) assms(4) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "combine_termsV2": {"skill_name": "combine_termsV2", "marker": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"c \\<noteq> 0\" \"f \\<noteq> 0\" \"a = b / c\" \"d = e / f\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  have \"a + d = (b / c) + (e / f)\" using assms(3) assms(4) by simp\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\" \n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\" \n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"c \\<noteq> 0\" \"f \\<noteq> 0\" \"a = b / c\" \"d = e / f\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  have \"a + d = (b / c) + (e / f)\" using assms(3) assms(4) by simp\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\" \n    by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\" \n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "combine_termsV3": {"skill_name": "combine_termsV3", "marker": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"c \\<noteq> 0\" \"f \\<noteq> 0\" \"a = b / c\" \"d = e / f\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  from assms(3) have \"a = b / c\" by simp\n  from assms(4) have \"d = e / f\" by simp\n  have \"a + d = (b / c) + (e / f)\" by (simp add: assms(3) assms(4))\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\" by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\" by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_terms:\n  fixes a b c d e f :: real\n  assumes \"c \\<noteq> 0\" \"f \\<noteq> 0\" \"a = b / c\" \"d = e / f\"\n  shows \"a + d = (b * f + e * c) / (c * f)\"\nproof -\n  from assms(3) have \"a = b / c\" by simp\n  from assms(4) have \"d = e / f\" by simp\n  have \"a + d = (b / c) + (e / f)\" by (simp add: assms(3) assms(4))\n  also have \"... = (b * f) / (c * f) + (e * c) / (c * f)\" by (simp add: assms(1) assms(2) field_simps)\n  also have \"... = (b * f + e * c) / (c * f)\" by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "double_square_expandedV2": {"skill_name": "double_square_expandedV2", "marker": "lemma double_square_expanded:\n  fixes x :: real\n  shows \"2 * x^2 = x^2 + x^2\"\n  by (simp add: add.commute)", "description": "-", "full_code": "lemma double_square_expanded:\n  fixes x :: real\n  shows \"2 * x^2 = x^2 + x^2\"\n  by (simp add: add.commute)", "origin": "double_square", "update_count": 0}, "double_square_power": {"skill_name": "double_square_power", "marker": "lemma double_square_power:\n  fixes x :: real\n  shows \"2 * (x^2) = (x + x)^2 - 2 * x * x\"\nproof -\n  have \"(x + x)^2 = x^2 + x^2 + 2 * x * x\" by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma double_square_power:\n  fixes x :: real\n  shows \"2 * (x^2) = (x + x)^2 - 2 * x * x\"\nproof -\n  have \"(x + x)^2 = x^2 + x^2 + 2 * x * x\" by (simp add: power2_eq_square)\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "double_square", "update_count": 0}, "double_power": {"skill_name": "double_power", "marker": "lemma double_power:\n  fixes x :: real and n :: nat\n  shows \"2 * x^n = (2 * (x^n))\"\n  by simp", "description": "-", "full_code": "lemma double_power:\n  fixes x :: real and n :: nat\n  shows \"2 * x^n = (2 * (x^n))\"\n  by simp", "origin": "double_square", "update_count": 0}, "double_square_n_dimensional": {"skill_name": "double_square_n_dimensional", "marker": "lemma double_square_n_dimensional:\n  fixes x :: \"real list\"\n  assumes \"length x = n\" \n  shows \"2 * (\\<Sum>i=1..n. x ! i ^ 2) = 2 * (\\<Sum>i=1..n. (x ! i ^ 2))\"\n  by (simp add: sum_distrib_left)", "description": "-", "full_code": "lemma double_square_n_dimensional:\n  fixes x :: \"real list\"\n  assumes \"length x = n\" \n  shows \"2 * (\\<Sum>i=1..n. x ! i ^ 2) = 2 * (\\<Sum>i=1..n. (x ! i ^ 2))\"\n  by (simp add: sum_distrib_left)", "origin": "double_square", "update_count": 0}, "double_square_in_n_dimensions": {"skill_name": "double_square_in_n_dimensions", "marker": "lemma double_square_in_n_dimensions:\n  fixes x :: \"real list\"\n  assumes \"length x = n\"\n  shows \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * (y^2)) x)\"\nproof -\n  have \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * (y^2)) x)\"\n    by (metis sum_list_const_mult)\n  thus ?thesis by (simp add: assms)\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp\n\nlemma double_square_in_n_dimensions:\n  fixes x :: \"real list\"\n  assumes \"length x = n\"\n  shows \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * (y^2)) x)\"\nproof -\n  have \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * (y^2)) x)\"\n    by (metis sum_list_const_mult)\n  thus ?thesis by (simp add: assms)\nqed", "origin": "double_square", "update_count": 0}, "double_square_n_dimen": {"skill_name": "double_square_n_dimen", "marker": "lemma double_square_n_dimen:\n  fixes x :: \"real list\" and n :: nat\n  assumes \"length x = n\"\n  shows \"2 * (\\<Sum>i<length x. x!i^2) = (2 * (\\<Sum>i<length x. x!i^2))\"\n  using assms by simp", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp\n\nlemma double_square_n_dimen:\n  fixes x :: \"real list\" and n :: nat\n  assumes \"length x = n\"\n  shows \"2 * (\\<Sum>i<length x. x!i^2) = (2 * (\\<Sum>i<length x. x!i^2))\"\n  using assms by simp", "origin": "double_square", "update_count": 0}, "neg_thirteen_times_rearranged": {"skill_name": "neg_thirteen_times_rearranged", "marker": "lemma neg_thirteen_times_rearranged:\n  fixes x y :: real\n  shows \"-13 * x + 13 * y = 13 * (y - x)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_thirteen_times_rearranged:\n  fixes x y :: real\n  shows \"-13 * x + 13 * y = 13 * (y - x)\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_propertyV2": {"skill_name": "neg_thirteen_times_propertyV2", "marker": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  assumes \"x = y\"\n  shows \"-13 * x = -13 * y\"\n  using assms by simp", "description": "-", "full_code": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  assumes \"x = y\"\n  shows \"-13 * x = -13 * y\"\n  using assms by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_scale": {"skill_name": "neg_thirteen_times_scale", "marker": "lemma neg_thirteen_times_scale:\n  fixes x y :: real\n  assumes \"x \\<noteq> y\"\n  shows \"-13 * x + -13 * y = -13 * (x + y)\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_thirteen_times_scale:\n  fixes x y :: real\n  assumes \"x \\<noteq> y\"\n  shows \"-13 * x + -13 * y = -13 * (x + y)\"\n  by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_propertyV3": {"skill_name": "neg_thirteen_times_propertyV3", "marker": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  shows \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\nproof -\n  have \"(-13 * x) + (-13 * y) = -13 * x - 13 * y\" by simp\n  also have \"... = -13 * (x + y)\" by (simp add: distrib_left)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_property:\n  fixes x y :: real\n  shows \"(-13 * x) + (-13 * y) = -13 * (x + y)\"\nproof -\n  have \"(-13 * x) + (-13 * y) = -13 * x - 13 * y\" by simp\n  also have \"... = -13 * (x + y)\" by (simp add: distrib_left)\n  finally show ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_multi_dim": {"skill_name": "double_square_multi_dim", "marker": "lemma double_square_multi_dim:\n  fixes x :: \"real list\"\n  shows \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * y^2) x)\"\nproof -\n  have \"sum_list (map (\\<lambda>y. y^2) x) = sum_list (map (\\<lambda>y. y^2) x)\" by simp\n  then show ?thesis by (metis sum_list_const_mult)\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp\n\nlemma double_square_multi_dim:\n  fixes x :: \"real list\"\n  shows \"2 * (sum_list (map (\\<lambda>y. y^2) x)) = sum_list (map (\\<lambda>y. 2 * y^2) x)\"\nproof -\n  have \"sum_list (map (\\<lambda>y. y^2) x) = sum_list (map (\\<lambda>y. y^2) x)\" by simp\n  then show ?thesis by (metis sum_list_const_mult)\nqed", "origin": "double_square", "update_count": 0}, "double_square_in_multiple_dimensions": {"skill_name": "double_square_in_multiple_dimensions", "marker": "lemma double_square_in_multiple_dimensions:\n  fixes x :: \"real list\"\n  fixes n :: nat\n  assumes \"length x = n\"\n  shows \"2 * (sum_list (map (\\<lambda>xi. xi^2) x)) = (2 * sum_list (map (\\<lambda>xi. xi^2) x))\"\nproof -\n  have \"sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. xi^2) x)\"\n    by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  fixes n :: nat\n  shows \"2 * (x^n) = (2 * (x^n))\"\n  by simp\n\nlemma double_square_in_multiple_dimensions:\n  fixes x :: \"real list\"\n  fixes n :: nat\n  assumes \"length x = n\"\n  shows \"2 * (sum_list (map (\\<lambda>xi. xi^2) x)) = (2 * sum_list (map (\\<lambda>xi. xi^2) x))\"\nproof -\n  have \"sum_list (map (\\<lambda>xi. xi^2) x) = sum_list (map (\\<lambda>xi. xi^2) x)\"\n    by simp\n  then show ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "simplify_square_rootV4": {"skill_name": "simplify_square_rootV4", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a = (13 - sqrt 131) / 4\"\n  shows \"a^2 = (300 - 26 * sqrt 131) / 16\"\nproof -\n  have \"a^2 = ((13 - sqrt 131) / 4)^2\"\n    using assms by blast\n  also have \"... = (13 - sqrt 131)^2 / 16\"\n    by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 13^2 - 2 * 13 * sqrt 131 + (sqrt 131)^2\"\n    by (smt (verit) diff_add_eq power2_diff)\n  then have \"(13 - sqrt 131)^2 = 169 - 26 * sqrt 131 + 131\"\n    by simp\n  then have \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\"\n    by simp\n  ultimately have \"a^2 = (300 - 26 * sqrt 131) / 16\"\n    by (simp add: field_simps)\n  thus ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a = (13 - sqrt 131) / 4\"\n  shows \"a^2 = (300 - 26 * sqrt 131) / 16\"\nproof -\n  have \"a^2 = ((13 - sqrt 131) / 4)^2\"\n    using assms by blast\n  also have \"... = (13 - sqrt 131)^2 / 16\"\n    by (simp add: field_simps)\n  have \"(13 - sqrt 131)^2 = 13^2 - 2 * 13 * sqrt 131 + (sqrt 131)^2\"\n    by (smt (verit) diff_add_eq power2_diff)\n  then have \"(13 - sqrt 131)^2 = 169 - 26 * sqrt 131 + 131\"\n    by simp\n  then have \"(13 - sqrt 131)^2 = 300 - 26 * sqrt 131\"\n    by simp\n  ultimately have \"a^2 = (300 - 26 * sqrt 131) / 16\"\n    by (simp add: field_simps)\n  thus ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "square_equationV5": {"skill_name": "square_equationV5", "marker": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"b = a\" using assms by simp\n  then show \"a^2 = b^2\" \n    by (simp add: power2_eq_square)\nqed", "description": "-", "full_code": "lemma square_equation:\n  fixes a b :: real\n  assumes \"a = b\"\n  shows \"a^2 = b^2\"\nproof -\n  have \"b = a\" using assms by simp\n  then show \"a^2 = b^2\" \n    by (simp add: power2_eq_square)\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_rootV5": {"skill_name": "simplify_square_rootV5", "marker": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a = 13\" \"b = sqrt 131\"\n  shows \"(2 * (a - b)^2) = (2 * a^2 - 4 * a * b + 2 * b^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\n    by (simp add: power2_diff)\n  then have \"2 * (a - b)^2 = 2 * (a^2 - 2 * a * b + b^2)\"\n    by (simp add: algebra_simps)\n  also have \"... = 2 * a^2 - 4 * a * b + 2 * b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes a b :: real\n  assumes \"a = 13\" \"b = sqrt 131\"\n  shows \"(2 * (a - b)^2) = (2 * a^2 - 4 * a * b + 2 * b^2)\"\nproof -\n  have \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\n    by (simp add: power2_diff)\n  then have \"2 * (a - b)^2 = 2 * (a^2 - 2 * a * b + b^2)\"\n    by (simp add: algebra_simps)\n  also have \"... = 2 * a^2 - 4 * a * b + 2 * b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "neg_times_commutative": {"skill_name": "neg_times_commutative", "marker": "lemma neg_times_commutative:\n  fixes x y :: real\n  shows \"(-1) * (x + y) = (-1) * x + (-1) * y\"\nproof -\n  have \"(-1) * (x + y) = - (x + y)\" by simp\n  also have \"... = - x - y\" by (simp add: field_simps)\n  also have \"... = (-1) * x + (-1) * y\" by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma neg_times_commutative:\n  fixes x y :: real\n  shows \"(-1) * (x + y) = (-1) * x + (-1) * y\"\nproof -\n  have \"(-1) * (x + y) = - (x + y)\" by simp\n  also have \"... = - x - y\" by (simp add: field_simps)\n  also have \"... = (-1) * x + (-1) * y\" by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_mult_example": {"skill_name": "neg_thirteen_mult_example", "marker": "lemma neg_thirteen_mult_example:\n  fixes x :: real\n  shows \"-13 * x = - (13 * x)\"\n  by (simp add: neg_mult_identity)", "description": "-", "full_code": "lemma neg_mult_identity:\n  fixes x y :: real\n  shows \"-x * y = - (x * y)\"\n  by (simp add: algebra_simps)\n\nlemma neg_thirteen_mult_example:\n  fixes x :: real\n  shows \"-13 * x = - (13 * x)\"\n  by (simp add: neg_mult_identity)", "origin": "neg_thirteen_times", "update_count": 0}, "negation_multiplicative": {"skill_name": "negation_multiplicative", "marker": "lemma negation_multiplicative:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(-a) * (-b) = a * b\"\n  by (simp add: assms)", "description": "-", "full_code": "lemma negation_multiplicative:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(-a) * (-b) = a * b\"\n  by (simp add: assms)", "origin": "neg_thirteen_times", "update_count": 0}, "negation_addition": {"skill_name": "negation_addition", "marker": "lemma negation_addition:\n  fixes x y :: real\n  shows \"(-x) + (-y) = -(x + y)\"\n  by simp", "description": "-", "full_code": "lemma negation_addition:\n  fixes x y :: real\n  shows \"(-x) + (-y) = -(x + y)\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_in_n_dimensionsV2": {"skill_name": "double_square_in_n_dimensionsV2", "marker": "lemma double_square_in_n_dimensions:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * (i^2))\"\nproof -\n  have \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * i^2)\" \n    by (simp add: sum_distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_in_n_dimensions:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * (i^2))\"\nproof -\n  have \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * i^2)\" \n    by (simp add: sum_distrib_left)\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "simplify_square_root_expressionV4": {"skill_name": "simplify_square_root_expressionV4", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) = sqrt((if x \\<ge> 0 then x^2 else (-x)^2))\"\n    by (simp add: abs_if)\n  also have \"... = abs x\" \n    by auto\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) = sqrt((if x \\<ge> 0 then x^2 else (-x)^2))\"\n    by (simp add: abs_if)\n  also have \"... = abs x\" \n    by auto\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "neg_thirteen_times_general": {"skill_name": "neg_thirteen_times_general", "marker": "lemma neg_thirteen_times_general:\n  fixes x :: real\n  assumes \"x \\<in> {x | x. True}\"  \n  shows \"-13 * x = -13 * x\"\n  by simp", "description": "-", "full_code": "lemma neg_thirteen_times_general:\n  fixes x :: real\n  assumes \"x \\<in> {x | x. True}\"  \n  shows \"-13 * x = -13 * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_k_timesV3": {"skill_name": "neg_k_timesV3", "marker": "lemma neg_k_times:\n  fixes x k :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"(-k) * x = - (k * x)\"\n  using assms by (simp add: algebra_simps)", "description": "-", "full_code": "lemma neg_k_times:\n  fixes x k :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"(-k) * x = - (k * x)\"\n  using assms by (simp add: algebra_simps)", "origin": "neg_thirteen_times", "update_count": 0}, "simplify_square_root_expressionV5": {"skill_name": "simplify_square_root_expressionV5", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) = sqrt((if x \\<ge> 0 then x^2 else x^2))\" by simp\n  also have \"... = abs x\" \n    by (simp add: abs_if)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) = sqrt((if x \\<ge> 0 then x^2 else x^2))\" by simp\n  also have \"... = abs x\" \n    by (simp add: abs_if)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV6": {"skill_name": "simplify_square_root_expressionV6", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x \\<ge> 0\")\n    case True\n    then have \"abs x = x\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"abs x = -x\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x \\<ge> 0\")\n    case True\n    then have \"abs x = x\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"abs x = -x\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV7": {"skill_name": "simplify_square_root_expressionV7", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  also have \"... = (if x \\<ge> 0 then x^2 else (-x)^2)\" \n    by auto\n  also have \"... = (if x \\<ge> 0 then x else -x)^2\" \n    by auto\n  finally have \"sqrt(x^2) * sqrt(x^2) = (if x \\<ge> 0 then x else -x)^2\" .\n  then show ?thesis \n    using real_sqrt_mult by auto\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  also have \"... = (if x \\<ge> 0 then x^2 else (-x)^2)\" \n    by auto\n  also have \"... = (if x \\<ge> 0 then x else -x)^2\" \n    by auto\n  finally have \"sqrt(x^2) * sqrt(x^2) = (if x \\<ge> 0 then x else -x)^2\" .\n  then show ?thesis \n    using real_sqrt_mult by auto\nqed", "origin": "do_request", "update_count": 0}, "simplify_square_root_expressionV8": {"skill_name": "simplify_square_root_expressionV8", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x < 0\")\n    case True\n    then have \"x^2 = (abs x)^2\" by simp\n    hence \"sqrt(x^2) = sqrt((abs x)^2)\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"x \\<ge> 0\" by simp\n    hence \"abs x = x\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x < 0\")\n    case True\n    then have \"x^2 = (abs x)^2\" by simp\n    hence \"sqrt(x^2) = sqrt((abs x)^2)\" by simp\n    thus ?thesis by auto\n  next\n    case False\n    then have \"x \\<ge> 0\" by simp\n    hence \"abs x = x\" by simp\n    thus ?thesis by auto\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "double_square_of_sumV2": {"skill_name": "double_square_of_sumV2", "marker": "lemma double_square_of_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  then show ?thesis by (simp add: distrib_right)\nqed", "description": "-", "full_code": "lemma double_square_of_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  then show ?thesis by (simp add: distrib_right)\nqed", "origin": "double_square", "update_count": 0}, "negation_identityV2": {"skill_name": "negation_identityV2", "marker": "lemma negation_identity:\n  fixes a :: real\n  shows \"a = -(-a)\"\nproof -\n  have \"a + (-a) = 0\" by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma negation_identity:\n  fixes a :: real\n  shows \"a = -(-a)\"\nproof -\n  have \"a + (-a) = 0\" by simp\n  then show ?thesis by (simp add: algebra_simps)\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "negation_propertyV5": {"skill_name": "negation_propertyV5", "marker": "lemma negation_property:\n  fixes x :: real\n  shows \"a * -x = - (a * x)\"\nproof -\n  have \"-(a * x) = -1 * (a * x)\" by simp\n  also have \"... = -1 * a * x\" by (simp add: algebra_simps)\n  finally show ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "lemma negation_property:\n  fixes x :: real\n  shows \"a * -x = - (a * x)\"\nproof -\n  have \"-(a * x) = -1 * (a * x)\" by simp\n  also have \"... = -1 * a * x\" by (simp add: algebra_simps)\n  finally show ?thesis by (simp add: algebra_simps)\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_scaled_multiplication": {"skill_name": "neg_scaled_multiplication", "marker": "lemma neg_scaled_multiplication:\n  fixes a x :: real\n  shows \"-a * x = -(a * x)\"\n  by simp", "description": "-", "full_code": "lemma neg_scaled_multiplication:\n  fixes a x :: real\n  shows \"-a * x = -(a * x)\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_distributionV2": {"skill_name": "neg_times_distributionV2", "marker": "lemma neg_times_distribution:\n  fixes x y :: real\n  shows \"-(x + y) = -x - y\"\n  by simp", "description": "-", "full_code": "lemma neg_times_distribution:\n  fixes x y :: real\n  shows \"-(x + y) = -x - y\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "combine_termsV4": {"skill_name": "combine_termsV4", "marker": "lemma combine_terms:\n  fixes a b denom1 denom2 :: real\n  assumes \"denom1 > 0\" \"denom2 > 0\"\n  shows \"a / denom1 + b / denom2 = (a * denom2 + b * denom1) / (denom1 * denom2)\"\nproof -\n  have \"a / denom1 + b / denom2 = (a * denom2) / (denom1 * denom2) + (b * denom1) / (denom1 * denom2)\"\n    by (smt (verit) assms(1) assms(2) linorder_neq_iff nonzero_mult_divide_mult_cancel_right nonzero_mult_divide_mult_cancel_right2)\n  also have \"... = (a * denom2 + b * denom1) / (denom1 * denom2)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma combine_terms:\n  fixes a b denom1 denom2 :: real\n  assumes \"denom1 > 0\" \"denom2 > 0\"\n  shows \"a / denom1 + b / denom2 = (a * denom2 + b * denom1) / (denom1 * denom2)\"\nproof -\n  have \"a / denom1 + b / denom2 = (a * denom2) / (denom1 * denom2) + (b * denom1) / (denom1 * denom2)\"\n    by (smt (verit) assms(1) assms(2) linorder_neq_iff nonzero_mult_divide_mult_cancel_right nonzero_mult_divide_mult_cancel_right2)\n  also have \"... = (a * denom2 + b * denom1) / (denom1 * denom2)\"\n    by (simp add: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "sqrt_diff": {"skill_name": "sqrt_diff", "marker": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) + sqrt(y)) * ((sqrt(x) - sqrt(y)) / (sqrt(x) + sqrt(y)))\" \n    by (metis add_cancel_right_right add_nonneg_eq_0_iff assms(1) assms(2) diff_0_right diff_add_eq_diff_diff_swap diff_self div_0 divide_divide_eq_right eq_iff_diff_eq_0 nonzero_mult_div_cancel_left real_sqrt_ge_0_iff times_divide_eq_right)\n  have \"sqrt(x)^2 - sqrt(y)^2 = x - y\" \n    using assms by auto\n  have \"sqrt(x) - sqrt(y) = (sqrt(x)^2 - sqrt(y)^2) / (sqrt(x) + sqrt(y))\" \n    using `sqrt(x)^2 - sqrt(y)^2 = x - y` by (smt (verit) \\<open>sqrt x - sqrt y = (sqrt x + sqrt y) * ((sqrt x - sqrt y) / (sqrt x + sqrt y))\\<close> assms(1) assms(2) power2_eq_square real_sqrt_pow2_iff square_diff_square_factored times_divide_eq_right)\n  thus ?thesis \n    using `sqrt(x) - sqrt(y) = (sqrt(x)^2 - sqrt(y)^2) / (sqrt(x) + sqrt(y))` \n    by (metis \\<open>(sqrt x)\\<^sup>2 - (sqrt y)\\<^sup>2 = x - y\\<close>)\nqed", "description": "-", "full_code": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) + sqrt(y)) * ((sqrt(x) - sqrt(y)) / (sqrt(x) + sqrt(y)))\" \n    by (metis add_cancel_right_right add_nonneg_eq_0_iff assms(1) assms(2) diff_0_right diff_add_eq_diff_diff_swap diff_self div_0 divide_divide_eq_right eq_iff_diff_eq_0 nonzero_mult_div_cancel_left real_sqrt_ge_0_iff times_divide_eq_right)\n  have \"sqrt(x)^2 - sqrt(y)^2 = x - y\" \n    using assms by auto\n  have \"sqrt(x) - sqrt(y) = (sqrt(x)^2 - sqrt(y)^2) / (sqrt(x) + sqrt(y))\" \n    using `sqrt(x)^2 - sqrt(y)^2 = x - y` by (smt (verit) \\<open>sqrt x - sqrt y = (sqrt x + sqrt y) * ((sqrt x - sqrt y) / (sqrt x + sqrt y))\\<close> assms(1) assms(2) power2_eq_square real_sqrt_pow2_iff square_diff_square_factored times_divide_eq_right)\n  thus ?thesis \n    using `sqrt(x) - sqrt(y) = (sqrt(x)^2 - sqrt(y)^2) / (sqrt(x) + sqrt(y))` \n    by (metis \\<open>(sqrt x)\\<^sup>2 - (sqrt y)\\<^sup>2 = x - y\\<close>)\nqed", "origin": "do_request", "update_count": 0}, "double_square_propertyV2": {"skill_name": "double_square_propertyV2", "marker": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * (x^2)\"\nproof -\n  have \"2 * x^2 = x^2 + x^2\" by simp\n  also have \"... = (x + x)^2 - 2 * (x^2)\" by (simp add: power2_eq_square)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * (x^2)\"\nproof -\n  have \"2 * x^2 = x^2 + x^2\" by simp\n  also have \"... = (x + x)^2 - 2 * (x^2)\" by (simp add: power2_eq_square)\n  finally show ?thesis .\nqed", "origin": "double_square", "update_count": 0}, "double_square_propertyV3": {"skill_name": "double_square_propertyV3", "marker": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * x) * x\"\nproof -\n  have \"2 * x^2 = 2 * (x * x)\" by (simp add: power2_eq_square)\n  also have \"... = (2 * x) * x\" by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * x) * x\"\nproof -\n  have \"2 * x^2 = 2 * (x * x)\" by (simp add: power2_eq_square)\n  also have \"... = (2 * x) * x\" by (simp add: algebra_simps)\n  finally show ?thesis .\nqed", "origin": "double_square", "update_count": 0}, "double_square_sum": {"skill_name": "double_square_sum", "marker": "lemma double_square_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"2 * (x + y)^2 = 2 * ((x + y) * (x + y))\" by sos\n  also have \"... = 2 * (x^2 + 2 * x * y + y^2)\" by (simp add: algebra_simps power2_eq_square)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma double_square_sum:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"2 * (x + y)^2 = 2 * ((x + y) * (x + y))\" by sos\n  also have \"... = 2 * (x^2 + 2 * x * y + y^2)\" by (simp add: algebra_simps power2_eq_square)\n  finally show ?thesis .\nqed", "origin": "double_square", "update_count": 0}, "neg_mult_distributive": {"skill_name": "neg_mult_distributive", "marker": "lemma neg_mult_distributive:\n  fixes x :: real\n  fixes y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\" by (simp add: distrib_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_mult_distributive:\n  fixes x :: real\n  fixes y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\" by (simp add: distrib_right)\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_mult_associative": {"skill_name": "neg_mult_associative", "marker": "lemma neg_mult_associative:\n  fixes x :: real\n  shows \"-13 * (x * 2) = (-13 * x) * 2\"\nproof -\n  have \"-13 * (x * 2) = -13 * x * 2\" by (simp add: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_mult_associative:\n  fixes x :: real\n  shows \"-13 * (x * 2) = (-13 * x) * 2\"\nproof -\n  have \"-13 * (x * 2) = -13 * x * 2\" by (simp add: field_simps)\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_extendedV2": {"skill_name": "neg_thirteen_times_extendedV2", "marker": "lemma neg_thirteen_times_extended:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * x = -13 * x\" \n  and \"-13 * real_of_nat n = -13 * real_of_nat n\"\n  by simp+", "description": "-", "full_code": "lemma neg_thirteen_times_extended:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * x = -13 * x\" \n  and \"-13 * real_of_nat n = -13 * real_of_nat n\"\n  by simp+", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_generalized": {"skill_name": "neg_thirteen_times_generalized", "marker": "lemma neg_thirteen_times_generalized:\n  fixes x y :: real\n  shows \"-13 * x + 13 * y = 13 * (y - x)\"\nproof -\n  have \"-13 * x + 13 * y = 13 * (-x + y)\" by (simp add: distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_generalized:\n  fixes x y :: real\n  shows \"-13 * x + 13 * y = 13 * (y - x)\"\nproof -\n  have \"-13 * x + 13 * y = 13 * (-x + y)\" by (simp add: distrib_left)\n  thus ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_multiV2": {"skill_name": "double_square_multiV2", "marker": "lemma double_square_multi:\n  fixes x :: real\n  shows \"2 * (x^2 + y^2) = 2 * x^2 + 2 * y^2\"\n  by (simp add: distrib_left)", "description": "-", "full_code": "lemma double_square_multi:\n  fixes x :: real\n  shows \"2 * (x^2 + y^2) = 2 * x^2 + 2 * y^2\"\n  by (simp add: distrib_left)", "origin": "double_square", "update_count": 0}, "compute_neg_13x": {"skill_name": "compute_neg_13x", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"x * 4 = 13 - sqrt 131\" by (simp add: field_simps)\n  thus ?thesis\n  proof -\n    have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by (simp add: assms)\n    also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n    finally show ?thesis \n      by (simp add: field_simps)\n  qed\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"x * 4 = 13 - sqrt 131\" by (simp add: field_simps)\n  thus ?thesis\n  proof -\n    have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by (simp add: assms)\n    also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n    finally show ?thesis \n      by (simp add: field_simps)\n  qed\nqed", "origin": "do_request", "update_count": 0}, "compute_neg_13xV2": {"skill_name": "compute_neg_13xV2", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"13 - sqrt 131 = 4 * x\" by simp\n  then have \"-13 * x = -13 * (13 - sqrt 131) / 4\" by (simp add: field_simps)\n  also have \"... = -(13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = -(169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"13 - sqrt 131 = 4 * x\" by simp\n  then have \"-13 * x = -13 * (13 - sqrt 131) / 4\" by (simp add: field_simps)\n  also have \"... = -(13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = -(169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "neg_times_natural": {"skill_name": "neg_times_natural", "marker": "lemma neg_times_natural:\n  fixes n :: nat\n  fixes x :: real\n  shows \"-real n * x = -real n * x\"\n  by simp", "description": "-", "full_code": "lemma neg_times_natural:\n  fixes n :: nat\n  fixes x :: real\n  shows \"-real n * x = -real n * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_generalV2": {"skill_name": "neg_thirteen_times_generalV2", "marker": "lemma neg_thirteen_times_general:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * x = -13 * x + (n - n)\"\nproof -\n  have \"n - n = 0\" by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * x = -13 * x\"\n  by simp\n\nlemma neg_thirteen_times_general:\n  fixes x :: real\n  fixes n :: nat\n  shows \"-13 * x = -13 * x + (n - n)\"\nproof -\n  have \"n - n = 0\" by simp\n  then show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "compute_neg_13xV3": {"skill_name": "compute_neg_13xV3", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x * 4 = 13 - sqrt 131\" using assms by (simp add: field_simps)\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x * 4 = 13 - sqrt 131\" using assms by (simp add: field_simps)\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "compute_neg_13xV4": {"skill_name": "compute_neg_13xV4", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x * 4 = 13 - sqrt 131\" using assms by simp\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x * 4 = 13 - sqrt 131\" using assms by simp\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "rearranging_terms": {"skill_name": "rearranging_terms", "marker": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"a - c = (b + c) - c\" using assms by simp\n  also have \"... = b + (c - c)\" by (simp add: algebra_simps)\n  also have \"... = b + 0\" by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"a - c = (b + c) - c\" using assms by simp\n  also have \"... = b + (c - c)\" by (simp add: algebra_simps)\n  also have \"... = b + 0\" by simp\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "rearranging_termsV2": {"skill_name": "rearranging_termsV2", "marker": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by simp\n  then have \"b = a - c\" by (simp add: add_diff_eq)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by simp\n  then have \"b = a - c\" by (simp add: add_diff_eq)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "rearranging_termsV3": {"skill_name": "rearranging_termsV3", "marker": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"b + c = a\" using assms by simp\n  hence \"b = a - c\" by (simp add: algebra_simps)\n  thus ?thesis .\nqed", "description": "-", "full_code": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  have \"b + c = a\" using assms by simp\n  hence \"b = a - c\" by (simp add: algebra_simps)\n  thus ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "compute_neg_13xV5": {"skill_name": "compute_neg_13xV5", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "neg_multiple_times": {"skill_name": "neg_multiple_times", "marker": "lemma neg_multiple_times:\n  fixes x :: real\n  fixes k :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"-k * x = -k * x\"\n  by simp", "description": "-", "full_code": "lemma neg_multiple_times:\n  fixes x :: real\n  fixes k :: real\n  assumes \"k \\<noteq> 0\"\n  shows \"-k * x = -k * x\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_extendedV2": {"skill_name": "double_square_extendedV2", "marker": "lemma double_square_extended:\n  fixes x :: real\n  shows \"\\<forall>n. 2 * (x^2 + n^2) = 2 * x^2 + 2 * n^2\"\nproof -\n  have \"2 * (x^2 + n^2) = 2 * x^2 + 2 * n^2\" by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma double_square_extended:\n  fixes x :: real\n  shows \"\\<forall>n. 2 * (x^2 + n^2) = 2 * x^2 + 2 * n^2\"\nproof -\n  have \"2 * (x^2 + n^2) = 2 * x^2 + 2 * n^2\" by (simp add: algebra_simps)\n  thus ?thesis by auto\nqed", "origin": "double_square", "update_count": 0}, "double_square_extendedV3": {"skill_name": "double_square_extendedV3", "marker": "lemma double_square_extended:\n  fixes x :: real\n  shows \"k * x^2 = (k * (x^2))\"\n  by (simp add: algebra_simps)", "description": "-", "full_code": "lemma double_square_extended:\n  fixes x :: real\n  shows \"k * x^2 = (k * (x^2))\"\n  by (simp add: algebra_simps)", "origin": "double_square", "update_count": 0}, "rearranging_termsV4": {"skill_name": "rearranging_termsV4", "marker": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by simp\n  then have \"b = a - c\" using add_diff_eq by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma rearranging_terms:\n  fixes a b c :: real\n  assumes \"a = b + c\"\n  shows \"b = a - c\"\nproof -\n  from assms have \"b + c = a\" by simp\n  then have \"b = a - c\" using add_diff_eq by simp\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "compute_neg_13xV6": {"skill_name": "compute_neg_13xV6", "marker": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"x * 4 = 13 - sqrt 131\" by (simp add: field_simps)\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma compute_neg_13x:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  from assms have \"x * 4 = 13 - sqrt 131\" by (simp add: field_simps)\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" using assms by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "neg_thirteen_times_rearrangedV2": {"skill_name": "neg_thirteen_times_rearrangedV2", "marker": "lemma neg_thirteen_times_rearranged:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x - 13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\" \n    by (simp add: distrib_left)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_rearranged:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x - 13 * y\"\nproof -\n  have \"-13 * (x + y) = -13 * x + -13 * y\" \n    by (simp add: distrib_left)\n  thus ?thesis by auto\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_reflected": {"skill_name": "neg_thirteen_times_reflected", "marker": "lemma neg_thirteen_times_reflected:\n  fixes x :: real\n  shows \"-13 * x = x * -13\"\n  by (simp add: mult.commute)", "description": "-", "full_code": "lemma neg_thirteen_times_reflected:\n  fixes x :: real\n  shows \"-13 * x = x * -13\"\n  by (simp add: mult.commute)", "origin": "neg_thirteen_times", "update_count": 0}, "double_square_multi_dimV2": {"skill_name": "double_square_multi_dimV2", "marker": "lemma double_square_multi_dim:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (sum (\\<lambda>y. y^2) x) = sum (\\<lambda>y. 2 * (y^2)) x\"\nproof -\n  have \"2 * (sum (\\<lambda>y. y^2) x) = sum (\\<lambda>y. 2 * (y^2)) x\"\n    by (metis sum_distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square:\n  fixes x :: real\n  shows \"2 * x^2 = (2 * (x^2))\"\n  by simp\n\nlemma double_square_multi_dim:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (sum (\\<lambda>y. y^2) x) = sum (\\<lambda>y. 2 * (y^2)) x\"\nproof -\n  have \"2 * (sum (\\<lambda>y. y^2) x) = sum (\\<lambda>y. 2 * (y^2)) x\"\n    by (metis sum_distrib_left)\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "neg_mult_distrib": {"skill_name": "neg_mult_distrib", "marker": "lemma neg_mult_distrib:\n  fixes a b :: real\n  shows \"-(a + b) = -a + -b\"\nproof -\n  have \"-(a + b) = -1 * (a + b)\" by simp\n  also have \"... = -1 * a + -1 * b\" by (simp add: distrib)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_mult_distrib:\n  fixes a b :: real\n  shows \"-(a + b) = -a + -b\"\nproof -\n  have \"-(a + b) = -1 * (a + b)\" by simp\n  also have \"... = -1 * a + -1 * b\" by (simp add: distrib)\n  finally show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "negation_propertyV6": {"skill_name": "negation_propertyV6", "marker": "lemma negation_property:\n  fixes a b :: real\n  shows \"a + (-b) = a - b\"\n  by simp", "description": "-", "full_code": "lemma negation_property:\n  fixes a b :: real\n  shows \"a + (-b) = a - b\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_of_expression": {"skill_name": "neg_thirteen_times_of_expression", "marker": "lemma neg_thirteen_times_of_expression:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x = (13 - sqrt 131) / 4\" using assms by simp\n  hence \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by simp\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_of_expression:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"x = (13 - sqrt 131) / 4\" using assms by simp\n  hence \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by simp\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: field_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by simp\n  finally show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_with_assumption": {"skill_name": "neg_thirteen_times_with_assumption", "marker": "lemma neg_thirteen_times_with_assumption:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by (simp add: assms)\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: algebra_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_with_assumption:\n  fixes x :: real\n  assumes \"x = (13 - sqrt 131) / 4\"\n  shows \"-13 * x = - (169 - 13 * sqrt 131) / 4\"\nproof -\n  have \"-13 * x = -13 * ((13 - sqrt 131) / 4)\" by (simp add: assms)\n  also have \"... = - (13 * (13 - sqrt 131)) / 4\" by (simp add: algebra_simps)\n  also have \"... = - (169 - 13 * sqrt 131) / 4\" by (simp)\n  finally show ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_distributivity": {"skill_name": "neg_times_distributivity", "marker": "lemma neg_times_distributivity:\n  fixes a b c :: real\n  shows \"-a * (b + c) = -a * b - a * c\"\n  by sos", "description": "-", "full_code": "lemma neg_times_distributivity:\n  fixes a b c :: real\n  shows \"-a * (b + c) = -a * b - a * c\"\n  by sos", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_commutativity": {"skill_name": "neg_times_commutativity", "marker": "lemma neg_times_commutativity:\n  fixes a b :: real\n  shows \"-a * b = -(a * b)\"\n  by simp", "description": "-", "full_code": "lemma neg_times_commutativity:\n  fixes a b :: real\n  shows \"-a * b = -(a * b)\"\n  by simp", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_scalar_general": {"skill_name": "neg_times_scalar_general", "marker": "lemma neg_times_scalar_general:\n  fixes a :: real\n  fixes x :: \"real set\"\n  shows \"\\<forall>y \\<in> x. -a * y = -a * y\"\n  by auto", "description": "-", "full_code": "lemma neg_times_scalar:\n  fixes a :: real\n  fixes x :: real\n  shows \"-a * x = -a * x\"\n  by simp\n\nlemma neg_times_scalar_general:\n  fixes a :: real\n  fixes x :: \"real set\"\n  shows \"\\<forall>y \\<in> x. -a * y = -a * y\"\n  by auto", "origin": "neg_thirteen_times", "update_count": 0}, "neg_times_scalar_generalV2": {"skill_name": "neg_times_scalar_generalV2", "marker": "lemma neg_times_scalar_general:\n  fixes x :: real and a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = - (a * x)\"\n  by auto", "description": "-", "full_code": "lemma neg_times_scalar:\n  fixes x :: real and a :: real\n  shows \"-a * x = -a * x\"\n  by simp\n\nlemma neg_times_scalar_general:\n  fixes x :: real and a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"-a * x = - (a * x)\"\n  by auto", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_with_condition": {"skill_name": "neg_thirteen_times_with_condition", "marker": "lemma neg_thirteen_times_with_condition:\n  fixes x :: real\n  assumes \"x = 5\"\n  shows \"-13 * x = -65\"\nproof -\n  have \"-13 * x = -13 * 5\" using assms by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_with_condition:\n  fixes x :: real\n  assumes \"x = 5\"\n  shows \"-13 * x = -65\"\nproof -\n  have \"-13 * x = -13 * 5\" using assms by simp\n  thus ?thesis by simp\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_product": {"skill_name": "neg_thirteen_times_product", "marker": "lemma neg_thirteen_times_product:\n  fixes a b :: real\n  shows \"-13 * (a * b) = (-13 * a) * b\"\nproof -\n  have \"-13 * (a * b) = (-13 * a) * b\" by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_product:\n  fixes a b :: real\n  shows \"-13 * (a * b) = (-13 * a) * b\"\nproof -\n  have \"-13 * (a * b) = (-13 * a) * b\" by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "neg_thirteen_times_with_property": {"skill_name": "neg_thirteen_times_with_property", "marker": "lemma neg_thirteen_times_with_property:\n  fixes x y z :: real\n  assumes \"x + y = z\"\n  shows \"-13 * z = -13 * x + -13 * y\"\nproof -\n  have \"-13 * z = -13 * (x + y)\" using assms by simp\n  also have \"... = -13 * x + -13 * y\" by (simp add: neg_thirteen_times_generalized)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma neg_thirteen_times_generalized:\n  fixes x y :: real\n  shows \"-13 * (x + y) = -13 * x + -13 * y\"\nproof -\n  have \"(-13 * (x + y)) = (-13 * x) + (-13 * y)\" by simp\n  thus ?thesis .\nqed\n\nlemma neg_thirteen_times_with_property:\n  fixes x y z :: real\n  assumes \"x + y = z\"\n  shows \"-13 * z = -13 * x + -13 * y\"\nproof -\n  have \"-13 * z = -13 * (x + y)\" using assms by simp\n  also have \"... = -13 * x + -13 * y\" by (simp add: neg_thirteen_times_generalized)\n  finally show ?thesis .\nqed", "origin": "neg_thirteen_times", "update_count": 0}, "simplify_square_rootV6": {"skill_name": "simplify_square_rootV6", "marker": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) * sqrt(x * y) = x * y\" \n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt x * sqrt x) * (sqrt y * sqrt y)\" \n    using assms by (auto simp: power2_eq_square)\n  also have \"... = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" \n    by (simp add: field_simps)\n  finally have \"sqrt(x * y) * sqrt(x * y) = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" .\n  then show ?thesis \n    by (metis real_sqrt_mult)\nqed", "description": "-", "full_code": "lemma simplify_square_root:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x * y) = sqrt x * sqrt y\"\nproof -\n  have \"sqrt(x * y) * sqrt(x * y) = x * y\" \n    by (metis abs_of_nonneg assms(1) assms(2) mult_nonneg_nonneg real_sqrt_mult_self)\n  also have \"... = (sqrt x * sqrt x) * (sqrt y * sqrt y)\" \n    using assms by (auto simp: power2_eq_square)\n  also have \"... = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" \n    by (simp add: field_simps)\n  finally have \"sqrt(x * y) * sqrt(x * y) = (sqrt x * sqrt y) * (sqrt x * sqrt y)\" .\n  then show ?thesis \n    by (metis real_sqrt_mult)\nqed", "origin": "do_request", "update_count": 0}, "double_square_identity": {"skill_name": "double_square_identity", "marker": "lemma double_square_identity:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - (x^2 + x^2)\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = 2 * x^2 + 2 * x^2\" by sos\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_identity:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - (x^2 + x^2)\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square algebra_simps)\n  also have \"... = 2 * x^2 + 2 * x^2\" by sos\n  finally show ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "square_sum_identity": {"skill_name": "square_sum_identity", "marker": "lemma square_sum_identity:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + y^2 + 2*x*y)\"\n  by sos", "description": "-", "full_code": "lemma square_sum_identity:\n  fixes x y :: real\n  shows \"2 * (x + y)^2 = 2 * (x^2 + y^2 + 2*x*y)\"\n  by sos", "origin": "double_square", "update_count": 0}, "sqrt_fraction": {"skill_name": "sqrt_fraction", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt (a / b) * sqrt b = sqrt a\"\n    using assms by (metis div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then have \"sqrt (a / b) = sqrt a / sqrt b\"\n    by (metis real_sqrt_divide)\n  thus ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt (a / b) * sqrt b = sqrt a\"\n    using assms by (metis div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then have \"sqrt (a / b) = sqrt a / sqrt b\"\n    by (metis real_sqrt_divide)\n  thus ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_fractionV2": {"skill_name": "sqrt_fractionV2", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) / sqrt(b) * sqrt(b) / sqrt(b)\"\n    by (metis assms divide_self less_numeral_extra(3) mult.commute mult_cancel_right1 real_sqrt_divide real_sqrt_mult times_divide_eq_left)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\"\n    by (simp add: field_simps)\n  also have \"... = sqrt(a) * (sqrt(b) / (sqrt(b) * sqrt(b)))\"\n    by (smt (verit) assms mult_cancel_left nless_le nonzero_divide_mult_cancel_left real_sqrt_eq_zero_cancel)\n  finally show ?thesis\n    by (metis real_sqrt_divide)\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) = sqrt(a) / sqrt(b) * sqrt(b) / sqrt(b)\"\n    by (metis assms divide_self less_numeral_extra(3) mult.commute mult_cancel_right1 real_sqrt_divide real_sqrt_mult times_divide_eq_left)\n  also have \"... = sqrt(a) * (1 / sqrt(b))\"\n    by (simp add: field_simps)\n  also have \"... = sqrt(a) * (sqrt(b) / (sqrt(b) * sqrt(b)))\"\n    by (smt (verit) assms mult_cancel_left nless_le nonzero_divide_mult_cancel_left real_sqrt_eq_zero_cancel)\n  finally show ?thesis\n    by (metis real_sqrt_divide)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_fractionV3": {"skill_name": "sqrt_fractionV3", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n    by (metis assms div_by_1 frac_eq_eq less_numeral_extra(3) mult.comm_neutral mult.commute nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then show ?thesis\n    by (metis real_sqrt_divide)\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n    by (metis assms div_by_1 frac_eq_eq less_numeral_extra(3) mult.comm_neutral mult.commute nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then show ?thesis\n    by (metis real_sqrt_divide)\nqed", "origin": "do_request", "update_count": 0}, "double_square_mult": {"skill_name": "double_square_mult", "marker": "lemma double_square_mult:\n  fixes x y :: real\n  shows \"2 * (x * y) = (x + y)^2 - (x^2 + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_mult:\n  fixes x y :: real\n  shows \"2 * (x * y) = (x + y)^2 - (x^2 + y^2)\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "sqrt_fractionV4": {"skill_name": "sqrt_fractionV4", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n  proof -\n    have \"sqrt(a / b) * sqrt(b) = sqrt(a * (1 / b) * b)\"\n      by (metis mult.commute mult.right_neutral real_sqrt_mult times_divide_eq_right)\n    also have \"... = sqrt(a * 1)\" \n      by (metis ab_semigroup_mult_class.mult_ac(1) assms div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral mult_cancel_left2 mult_cancel_right2 nonzero_eq_divide_eq nonzero_mult_div_cancel_right zero_eq_1_divide_iff zero_neq_one)\n    also have \"... = sqrt(a)\"\n      by (simp add: real_sqrt_mult_self)\n    finally show ?thesis .\n  qed\n  then show ?thesis\n    by (metis assms real_sqrt_divide)\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n  proof -\n    have \"sqrt(a / b) * sqrt(b) = sqrt(a * (1 / b) * b)\"\n      by (metis mult.commute mult.right_neutral real_sqrt_mult times_divide_eq_right)\n    also have \"... = sqrt(a * 1)\" \n      by (metis ab_semigroup_mult_class.mult_ac(1) assms div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral mult_cancel_left2 mult_cancel_right2 nonzero_eq_divide_eq nonzero_mult_div_cancel_right zero_eq_1_divide_iff zero_neq_one)\n    also have \"... = sqrt(a)\"\n      by (simp add: real_sqrt_mult_self)\n    finally show ?thesis .\n  qed\n  then show ?thesis\n    by (metis assms real_sqrt_divide)\nqed", "origin": "do_request", "update_count": 0}, "sqrt_fractionV5": {"skill_name": "sqrt_fractionV5", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n    using assms by (metis div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then have \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n    using assms by (auto simp: field_simps)\n  thus ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n    using assms by (metis div_by_1 frac_eq_eq less_numeral_extra(3) mult.commute mult.right_neutral nonzero_eq_divide_eq real_sqrt_eq_iff real_sqrt_mult zero_neq_one)\n  then have \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n    using assms by (auto simp: field_simps)\n  thus ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_fractionV6": {"skill_name": "sqrt_fractionV6", "marker": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n  proof -\n    have \"a / b = a * (1 / b)\" by (simp add: field_simps)\n    then have \"sqrt(a / b) * sqrt(b) = sqrt(a * (1 / b)) * sqrt(b)\"\n      by (metis assms mult.commute)\n    also have \"... = sqrt(a) * sqrt(1 / b) * sqrt(b)\"\n      by (metis real_sqrt_mult)\n    also have \"... = sqrt(a) * (sqrt(b) / sqrt(b))\"\n      by (metis \\<open>a / b = a * (1 / b)\\<close> assms div_by_1 div_self frac_eq_eq less_numeral_extra(3) mult.comm_neutral mult.commute mult_cancel_left1 nonzero_eq_divide_eq real_sqrt_divide real_sqrt_mult zero_neq_one)\n    finally show ?thesis\n      by (metis \\<open>a / b = a * (1 / b)\\<close> \\<open>sqrt a * sqrt (1 / b) * sqrt b = sqrt a * (sqrt b / sqrt b)\\<close> assms div_self frac_eq_eq less_numeral_extra(3) mult.commute mult_cancel_right1 real_sqrt_divide real_sqrt_eq_zero_cancel_iff real_sqrt_mult)\n  qed\n  then show \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n    by (metis real_sqrt_divide)\nqed", "description": "-", "full_code": "lemma sqrt_fraction:\n  fixes a b :: real\n  assumes \"b > 0\"\n  shows \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\nproof -\n  have \"sqrt(a / b) * sqrt(b) = sqrt(a)\"\n  proof -\n    have \"a / b = a * (1 / b)\" by (simp add: field_simps)\n    then have \"sqrt(a / b) * sqrt(b) = sqrt(a * (1 / b)) * sqrt(b)\"\n      by (metis assms mult.commute)\n    also have \"... = sqrt(a) * sqrt(1 / b) * sqrt(b)\"\n      by (metis real_sqrt_mult)\n    also have \"... = sqrt(a) * (sqrt(b) / sqrt(b))\"\n      by (metis \\<open>a / b = a * (1 / b)\\<close> assms div_by_1 div_self frac_eq_eq less_numeral_extra(3) mult.comm_neutral mult.commute mult_cancel_left1 nonzero_eq_divide_eq real_sqrt_divide real_sqrt_mult zero_neq_one)\n    finally show ?thesis\n      by (metis \\<open>a / b = a * (1 / b)\\<close> \\<open>sqrt a * sqrt (1 / b) * sqrt b = sqrt a * (sqrt b / sqrt b)\\<close> assms div_self frac_eq_eq less_numeral_extra(3) mult.commute mult_cancel_right1 real_sqrt_divide real_sqrt_eq_zero_cancel_iff real_sqrt_mult)\n  qed\n  then show \"sqrt(a / b) = sqrt(a) / sqrt(b)\"\n    by (metis real_sqrt_divide)\nqed", "origin": "do_request", "update_count": 0}, "real_number_propertiesV8": {"skill_name": "real_number_propertiesV8", "marker": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  moreover have \"x + y \\<ge> 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  ultimately show \"x + y \\<ge> 0\" by simp\nqed", "description": "-", "full_code": "lemma real_number_properties:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"x + y \\<ge> 0\"\nproof -\n  from assms have \"x + y = x + y\" by simp\n  moreover have \"x + y \\<ge> 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  ultimately show \"x + y \\<ge> 0\" by simp\nqed", "origin": "do_request", "update_count": 0}, "double_square_n_dimensionalV2": {"skill_name": "double_square_n_dimensionalV2", "marker": "lemma double_square_n_dimensional:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * (i^2))\"\nproof -\n  have \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. (2 * i^2))\" by (metis sum_distrib_left)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma double_square_n_dimensional:\n  fixes x :: \"real set\"\n  assumes \"finite x\"\n  shows \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. 2 * (i^2))\"\nproof -\n  have \"2 * (\\<Sum>i\\<in>x. i^2) = (\\<Sum>i\\<in>x. (2 * i^2))\" by (metis sum_distrib_left)\n  thus ?thesis by simp\nqed", "origin": "double_square", "update_count": 0}, "sqrt_propertiesV15": {"skill_name": "sqrt_propertiesV15", "marker": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    using assms by (simp add: real_sqrt_mult)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show \"sqrt (a * b) = sqrt a * sqrt b\"\n    using real_sqrt_mult by blast\nqed", "description": "-", "full_code": "lemma sqrt_properties:\n  fixes a b :: real\n  assumes \"a \\<ge> 0\" \"b \\<ge> 0\"\n  shows \"sqrt (a * b) = sqrt a * sqrt b\"\nproof -\n  have \"sqrt (a * b) * sqrt (a * b) = a * b\"\n    using assms by auto\n  also have \"... = (sqrt a * sqrt a) * (sqrt b * sqrt b)\"\n    using assms by (simp add: real_sqrt_mult)\n  also have \"... = (sqrt a * sqrt b) * (sqrt a * sqrt b)\"\n    by (simp add: field_simps)\n  finally have \"sqrt (a * b) * sqrt (a * b) = (sqrt a * sqrt b) * (sqrt a * sqrt b)\" .\n  then show \"sqrt (a * b) = sqrt a * sqrt b\"\n    using real_sqrt_mult by blast\nqed", "origin": "do_request", "update_count": 0}, "double_square_identityV2": {"skill_name": "double_square_identityV2", "marker": "lemma double_square_identity:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square)\n  then have \"(x + x)^2 = 2 * x^2 + 2 * x^2\" by (simp)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma double_square_identity:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square)\n  then have \"(x + x)^2 = 2 * x^2 + 2 * x^2\" by (simp)\n  then show ?thesis by auto\nqed", "origin": "double_square", "update_count": 0}, "simplify_square_root_expressionV9": {"skill_name": "simplify_square_root_expressionV9", "marker": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x \\<ge> 0\")\n    case True\n    then have \"abs x = x\" by simp\n    thus ?thesis by simp\n  next\n    case False\n    then have \"abs x = -x\" by simp\n    thus ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma simplify_square_root_expression:\n  fixes x :: real\n  shows \"sqrt(x^2) = abs x\"\nproof -\n  have \"sqrt(x^2) * sqrt(x^2) = x^2\" by (metis abs_if_raw abs_of_neg abs_of_pos neg_0_less_iff_less power2_eq_square real_sqrt_abs real_sqrt_abs2 real_sqrt_eq_iff)\n  then have \"sqrt(x^2) = abs x\" \n  proof (cases \"x \\<ge> 0\")\n    case True\n    then have \"abs x = x\" by simp\n    thus ?thesis by simp\n  next\n    case False\n    then have \"abs x = -x\" by simp\n    thus ?thesis by simp\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "double_square_propertyV4": {"skill_name": "double_square_propertyV4", "marker": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square algebra_simps)\n  moreover have \"2 * x^2 = x^2 + x^2\" by simp\n  ultimately show ?thesis by sos\nqed", "description": "-", "full_code": "lemma double_square_property:\n  fixes x :: real\n  shows \"2 * x^2 = (x + x)^2 - 2 * x^2\"\nproof -\n  have \"(x + x)^2 = x^2 + 2 * x * x + x^2\" by (simp add: power2_eq_square algebra_simps)\n  moreover have \"2 * x^2 = x^2 + x^2\" by simp\n  ultimately show ?thesis by sos\nqed", "origin": "double_square", "update_count": 0}, "sqrt_diffV2": {"skill_name": "sqrt_diffV2", "marker": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) + sqrt(y)) * (sqrt(x) - sqrt(y)) / (sqrt(x) + sqrt(y))\"\n    by (metis add.left_cancel add_cancel_right_right add_le_same_cancel2 assms(1) assms(2) cancel_comm_monoid_add_class.diff_cancel dual_order.eq_iff eq_divide_eq mult.commute nonzero_mult_div_cancel_right real_sqrt_eq_zero_cancel_iff real_sqrt_ge_0_iff real_sqrt_le_0_iff real_sqrt_zero)\n  have \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\" \n  proof (cases \"x = y\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"sqrt(x) + sqrt(y) > 0\" using assms by (metis add.commute add_cancel_right_left add_nonneg_pos dual_order.strict_iff_order real_sqrt_eq_zero_cancel_iff real_sqrt_ge_zero real_sqrt_gt_zero)\n    then show ?thesis \n      using assms by (auto simp: field_simps)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) + sqrt(y)) * (sqrt(x) - sqrt(y)) / (sqrt(x) + sqrt(y))\"\n    by (metis add.left_cancel add_cancel_right_right add_le_same_cancel2 assms(1) assms(2) cancel_comm_monoid_add_class.diff_cancel dual_order.eq_iff eq_divide_eq mult.commute nonzero_mult_div_cancel_right real_sqrt_eq_zero_cancel_iff real_sqrt_ge_0_iff real_sqrt_le_0_iff real_sqrt_zero)\n  have \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\" \n  proof (cases \"x = y\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"sqrt(x) + sqrt(y) > 0\" using assms by (metis add.commute add_cancel_right_left add_nonneg_pos dual_order.strict_iff_order real_sqrt_eq_zero_cancel_iff real_sqrt_ge_zero real_sqrt_gt_zero)\n    then show ?thesis \n      using assms by (auto simp: field_simps)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sqrt_diffV3": {"skill_name": "sqrt_diffV3", "marker": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) - sqrt(y)) * (sqrt(x) + sqrt(y)) / (sqrt(x) + sqrt(y))\"\n    using assms by (metis add_cancel_left_right add_le_same_cancel1 cancel_comm_monoid_add_class.diff_cancel divide_eq_eq nle_le nonzero_mult_div_cancel_right real_sqrt_eq_zero_cancel_iff real_sqrt_ge_0_iff real_sqrt_le_0_iff sqrt_add_le_add_sqrt)\n  also have \"... = (x - y) / (sqrt(x) + sqrt(y))\"\n    using assms by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma sqrt_diff:\n  fixes x y :: real\n  assumes \"x \\<ge> 0\" \"y \\<ge> 0\"\n  shows \"sqrt(x) - sqrt(y) = (x - y) / (sqrt(x) + sqrt(y))\"\nproof -\n  have \"sqrt(x) - sqrt(y) = (sqrt(x) - sqrt(y)) * (sqrt(x) + sqrt(y)) / (sqrt(x) + sqrt(y))\"\n    using assms by (metis add_cancel_left_right add_le_same_cancel1 cancel_comm_monoid_add_class.diff_cancel divide_eq_eq nle_le nonzero_mult_div_cancel_right real_sqrt_eq_zero_cancel_iff real_sqrt_ge_0_iff real_sqrt_le_0_iff sqrt_add_le_add_sqrt)\n  also have \"... = (x - y) / (sqrt(x) + sqrt(y))\"\n    using assms by (auto simp: field_simps)\n  finally show ?thesis .\nqed", "origin": "do_request", "update_count": 0}, "neg_scalar_multiplication": {"skill_name": "neg_scalar_multiplication", "marker": "lemma neg_scalar_multiplication:\n  fixes x :: real\n  fixes k :: real\n  shows \"(-k) * x = -(k * x)\"\n  by (simp add: field_simps)", "description": "-", "full_code": "lemma neg_scalar_multiplication:\n  fixes x :: real\n  fixes k :: real\n  shows \"(-k) * x = -(k * x)\"\n  by (simp add: field_simps)", "origin": "neg_thirteen_times", "update_count": 0}}