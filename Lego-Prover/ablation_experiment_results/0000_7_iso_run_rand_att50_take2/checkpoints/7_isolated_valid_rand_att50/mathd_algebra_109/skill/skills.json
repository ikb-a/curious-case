{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "mathd_algebra_109": {"skill_name": "mathd_algebra_109", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a+2*b=12\"\n    and h1 : \"a=4\"\n  shows \"b=0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "description": "", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a+2*b=12\"\n    and h1 : \"a=4\"\n  shows \"b=0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "origin": "data/full_data/debug/valid_rand/mathd_algebra_109.json_v0", "update_count": -1}, "quadratic_expression_expansion": {"skill_name": "quadratic_expression_expansion", "marker": "lemma quadratic_expression_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"a^2 + 2 * a * b + b^2 = (a + b)^2\" by sos\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma quadratic_expression_expansion:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"a^2 + 2 * a * b + b^2 = (a + b)^2\" by sos\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "absolute_value_inequality": {"skill_name": "absolute_value_inequality", "marker": "lemma absolute_value_inequality:\n  fixes a b :: real\n  assumes h0: \"abs(a - b) < c\"\n  shows \"b - c < a \\<and> a < b + c\"\nproof -\n  have \"a - b < c\" and \"-(a - b) < c\" using assms by auto\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma absolute_value_inequality:\n  fixes a b :: real\n  assumes h0: \"abs(a - b) < c\"\n  shows \"b - c < a \\<and> a < b + c\"\nproof -\n  have \"a - b < c\" and \"-(a - b) < c\" using assms by auto\n  then show ?thesis by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "inequality_addition": {"skill_name": "inequality_addition", "marker": "lemma inequality_addition:\n  fixes a b c d :: real\n  assumes h0: \"a < b\" and h1: \"c < d\"\n  shows \"a + c < b + d\"\n  using h0 h1 by auto", "description": "-", "full_code": "lemma inequality_addition:\n  fixes a b c d :: real\n  assumes h0: \"a < b\" and h1: \"c < d\"\n  shows \"a + c < b + d\"\n  using h0 h1 by auto", "origin": "mathd_algebra_109", "update_count": 0}, "linear_combination": {"skill_name": "linear_combination", "marker": "lemma linear_combination:\n  fixes a b c d :: real\n  assumes h0: \"a + b = c\"\n  shows \"b = c - a\"\n  using h0 by simp", "description": "-", "full_code": "lemma linear_combination:\n  fixes a b c d :: real\n  assumes h0: \"a + b = c\"\n  shows \"b = c - a\"\n  using h0 by simp", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation": {"skill_name": "linear_equation", "marker": "lemma linear_equation:\n  fixes a b :: real\n  assumes h0: \"m * a + n * b = c\"\n    and h1: \"a = d\"\n  shows \"n * b = c - m * d\"\nproof -\n  have \"m * d + n * b = c\" using h0 h1 by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma linear_equation:\n  fixes a b :: real\n  assumes h0: \"m * a + n * b = c\"\n    and h1: \"a = d\"\n  shows \"n * b = c - m * d\"\nproof -\n  have \"m * d + n * b = c\" using h0 h1 by simp\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolved": {"skill_name": "mathd_algebra_109_evolved", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  thus \"b = 0\" by (simp)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  thus \"b = 0\" by (simp)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV2": {"skill_name": "mathd_algebra_109_evolvedV2", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation": {"skill_name": "solve_linear_equation", "marker": "lemma solve_linear_equation:\n  fixes a b c x :: real\n  assumes \"a \\<noteq> 0\" and \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x = c - b\" using assms(2) by simp\n  then show ?thesis using assms(1) by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma solve_linear_equation:\n  fixes a b c x :: real\n  assumes \"a \\<noteq> 0\" and \"a * x + b = c\"\n  shows \"x = (c - b) / a\"\nproof -\n  have \"a * x = c - b\" using assms(2) by simp\n  then show ?thesis using assms(1) by (auto simp: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solution": {"skill_name": "linear_equation_solution", "marker": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"  \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c)/n\"\nproof -\n  have \"m*c + n*b = p\" using h1 h0 by simp\n  then have \"n*b = p - m*c\" by simp\n  then show ?thesis by (metis h2 mult.commute nonzero_mult_div_cancel_right)\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\"\n    and h1 : \"a = c\"  \n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*c)/n\"\nproof -\n  have \"m*c + n*b = p\" using h1 h0 by simp\n  then have \"n*b = p - m*c\" by simp\n  then show ?thesis by (metis h2 mult.commute nonzero_mult_div_cancel_right)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equations": {"skill_name": "linear_equations", "marker": "theorem linear_equations:\n  fixes a b c d :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = d\"\n  shows \"b = (c - 3 * d) / 2\"\nproof -\n  have \"3 * d + 2 * b = c\" using h1 h0 by simp\n  hence \"2 * b = c - 3 * d\" by simp\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "theorem linear_equations:\n  fixes a b c d :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = d\"\n  shows \"b = (c - 3 * d) / 2\"\nproof -\n  have \"3 * d + 2 * b = c\" using h1 h0 by simp\n  hence \"2 * b = c - 3 * d\" by simp\n  thus ?thesis by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_multi": {"skill_name": "mathd_algebra_109_multi", "marker": "lemma mathd_algebra_109_multi:\n  fixes a b :: \"real list\"\n  assumes h0 : \"\\<forall>i. 3 * (a!i) + 2 * (b!i) = 12\"\n    and h1 : \"\\<forall>i. a!i = 4\"\n  shows \"\\<forall>i. b!i = 0\"\nproof -\n  show ?thesis\n  proof (rule allI)\n    fix i\n    have \"3 * 4 + 2 * (b!i) = 12\" using h1 by (metis add.commute h0 mult.commute mult_2_right numeral_Bit0 numeral_Bit1 one_add_one)\n    have \"12 + 2 * (b!i) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * (b!i) = 12\\<close>)\n    have \"2 * (b!i) = 0\" using `12 + 2 * (b!i) = 12` by simp\n    thus \"b!i = 0\" using `2 * (b!i) = 0` by simp\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed\n\nlemma mathd_algebra_109_multi:\n  fixes a b :: \"real list\"\n  assumes h0 : \"\\<forall>i. 3 * (a!i) + 2 * (b!i) = 12\"\n    and h1 : \"\\<forall>i. a!i = 4\"\n  shows \"\\<forall>i. b!i = 0\"\nproof -\n  show ?thesis\n  proof (rule allI)\n    fix i\n    have \"3 * 4 + 2 * (b!i) = 12\" using h1 by (metis add.commute h0 mult.commute mult_2_right numeral_Bit0 numeral_Bit1 one_add_one)\n    have \"12 + 2 * (b!i) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * (b!i) = 12\\<close>)\n    have \"2 * (b!i) = 0\" using `12 + 2 * (b!i) = 12` by simp\n    thus \"b!i = 0\" using `2 * (b!i) = 0` by simp\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_general": {"skill_name": "mathd_algebra_109_general", "marker": "theorem mathd_algebra_109_general:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 0\" by simp\n  thus \"b = 0\" by simp\nqed\n\ntheorem mathd_algebra_109_general:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V2": {"skill_name": "mathd_algebra_109V2", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 0\" by simp\n  thus \"b = 0\" by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 0\" by simp\n  thus \"b = 0\" by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V3": {"skill_name": "mathd_algebra_109V3", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" using `12 + 2 * b = 12` by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" using `12 + 2 * b = 12` by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_n_dimensional": {"skill_name": "mathd_algebra_n_dimensional", "marker": "theorem mathd_algebra_n_dimensional:\n  fixes a :: \"real list\"  \n  assumes \"length a = n\"  \n    and \"3 * (a!0) + 2 * (a!1) = 12\"  \n    and \"a!0 = 4\"  \n  shows \"a!1 = 0\"  \nproof -\n  have \"3 * 4 + 2 * (a!1) = 12\" using assms(3) by (metis assms(2) mult.commute mult_2 mult_2_right mult_numeral_1 nat_mult_eq_1_iff one_eq_numeral_iff)\n  have \"12 + 2 * (a!1) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * a ! 1 = 12\\<close>)\n  have \"2 * (a!1) = 0\" using `12 + 2 * (a!1) = 12` by simp\n  have \"a!1 = 0\" using `2 * (a!1) = 0` by simp\n  show ?thesis using `a!1 = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_n:\n  fixes a b :: real\n  assumes h0: \"3 * a + 2 * b = 12\"\n    and h1: \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) `3 * 4 + 2 * b = 12`)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed\n\ntheorem mathd_algebra_n_dimensional:\n  fixes a :: \"real list\"  \n  assumes \"length a = n\"  \n    and \"3 * (a!0) + 2 * (a!1) = 12\"  \n    and \"a!0 = 4\"  \n  shows \"a!1 = 0\"  \nproof -\n  have \"3 * 4 + 2 * (a!1) = 12\" using assms(3) by (metis assms(2) mult.commute mult_2 mult_2_right mult_numeral_1 nat_mult_eq_1_iff one_eq_numeral_iff)\n  have \"12 + 2 * (a!1) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * a ! 1 = 12\\<close>)\n  have \"2 * (a!1) = 0\" using `12 + 2 * (a!1) = 12` by simp\n  have \"a!1 = 0\" using `2 * (a!1) = 0` by simp\n  show ?thesis using `a!1 = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation_two_variables": {"skill_name": "solve_linear_equation_two_variables", "marker": "lemma solve_linear_equation_two_variables:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\" \n    and h1 : \"a = q\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*q)/n\"\nproof -\n  have \"m*q + n*b = p\" using h0 h1 by simp\n  then have \"n*b = p - m*q\" by simp\n  then have \"b = (p - m*q) / n\" using h2 by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma solve_linear_equation_two_variables:\n  fixes a b :: real\n  assumes h0 : \"m*a + n*b = p\" \n    and h1 : \"a = q\"\n    and h2 : \"n \\<noteq> 0\"\n  shows \"b = (p - m*q)/n\"\nproof -\n  have \"m*q + n*b = p\" using h0 h1 by simp\n  then have \"n*b = p - m*q\" by simp\n  then have \"b = (p - m*q) / n\" using h2 by (auto simp: field_simps)\n  then show ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_n_dimensions": {"skill_name": "mathd_algebra_n_dimensions", "marker": "theorem mathd_algebra_n_dimensions:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = n\"\n    and h1: \"a = m\"\n  shows \"b = (n - 3 * m) / 2\"\nproof -\n  have \"3 * m + 2 * b = n\" using h1 by (metis h0)\n  have \"2 * b = n - 3 * m\" by (smt (verit) h0 h1)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_n_dimensions:\n  fixes a b :: real\n  assumes h0: \"3*a + 2*b = n\"\n    and h1: \"a = m\"\n  shows \"b = (n - 3 * m) / 2\"\nproof -\n  have \"3 * m + 2 * b = n\" using h1 by (metis h0)\n  have \"2 * b = n - 3 * m\" by (smt (verit) h0 h1)\n  then show ?thesis by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_3d": {"skill_name": "mathd_algebra_109_3d", "marker": "theorem mathd_algebra_109_3D:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n  shows \"2*b + c = 0\"\nproof -\n  have \"3 * 4 + 2 * b + c = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b + c = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + c = 12\\<close>)\n  hence \"2 * b + c = 0\" by simp\n  show ?thesis using `2 * b + c = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_3D:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n  shows \"2*b + c = 0\"\nproof -\n  have \"3 * 4 + 2 * b + c = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b + c = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b + c = 12\\<close>)\n  hence \"2 * b + c = 0\" by simp\n  show ?thesis using `2 * b + c = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extended": {"skill_name": "mathd_algebra_109_extended", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = n\"  \n  shows \"b = (12 - 3*n)/2\"  \nproof -\n  have \"3 * n + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = 12 - 3 * n\" by (smt (verit) h0 h1)\n  have \"b = (12 - 3 * n) / 2\" using `2 * b = 12 - 3 * n` by simp\n  show ?thesis by (metis \\<open>b = (12 - 3 * n) / 2\\<close>)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = n\"  \n  shows \"b = (12 - 3*n)/2\"  \nproof -\n  have \"3 * n + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = 12 - 3 * n\" by (smt (verit) h0 h1)\n  have \"b = (12 - 3 * n) / 2\" using `2 * b = 12 - 3 * n` by simp\n  show ?thesis by (metis \\<open>b = (12 - 3 * n) / 2\\<close>)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV2": {"skill_name": "mathd_algebra_109_extendedV2", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0: \"3*a + 2*b + c = 12\" \n    and h1: \"a = 4\" \n    and h2: \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" using `12 + 2 * b = 12` by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0: \"3*a + 2*b + c = 12\" \n    and h1: \"a = 4\" \n    and h2: \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  hence \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" using `12 + 2 * b = 12` by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_with_solution": {"skill_name": "mathd_algebra_with_solution", "marker": "theorem mathd_algebra_with_solution:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"4*a - b = 0\"\n  shows \"b = (12 - 3*a) / 2\"\nproof -\n  from h0 have \"2 * b = 12 - 3*a\" by (simp add: algebra_simps)\n  hence \"b = (12 - 3*a) / 2\" by (simp add: field_simps)\n  thus ?thesis .\nqed", "description": "-", "full_code": "theorem mathd_algebra_with_solution:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"4*a - b = 0\"\n  shows \"b = (12 - 3*a) / 2\"\nproof -\n  from h0 have \"2 * b = 12 - 3*a\" by (simp add: algebra_simps)\n  hence \"b = (12 - 3*a) / 2\" by (simp add: field_simps)\n  thus ?thesis .\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_general": {"skill_name": "mathd_algebra_general", "marker": "theorem mathd_algebra_general:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"4*a - b = d\"\n  shows \"b = (c - 3*a) / 2\"\nproof -\n  from h0 have \"2 * b = c - 3*a\" by (simp add: algebra_simps)\n  hence \"b = (c - 3*a) / 2\" by (simp add: field_simps)\n  thus ?thesis .\nqed", "description": "-", "full_code": "theorem mathd_algebra_general:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"4*a - b = d\"\n  shows \"b = (c - 3*a) / 2\"\nproof -\n  from h0 have \"2 * b = c - 3*a\" by (simp add: algebra_simps)\n  hence \"b = (c - 3*a) / 2\" by (simp add: field_simps)\n  thus ?thesis .\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV3": {"skill_name": "mathd_algebra_109_evolvedV3", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  thus \"b = 0\" \n  proof -\n    have \"12 + 2 * b = 12\" using h2 by (metis \\<open>12 + 2 * b = c\\<close>)\n    have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n    thus \"b = 0\" using `2 * b = 0` by simp\n  qed\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  thus \"b = 0\" \n  proof -\n    have \"12 + 2 * b = 12\" using h2 by (metis \\<open>12 + 2 * b = c\\<close>)\n    have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n    thus \"b = 0\" using `2 * b = 0` by simp\n  qed\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV3": {"skill_name": "mathd_algebra_109_extendedV3", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  thus \"b = 0\" by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + 0 = 12\" using h1 h2 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  thus \"b = 0\" by (simp add: algebra_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalized": {"skill_name": "mathd_algebra_109_generalized", "marker": "theorem mathd_algebra_109_generalized:\n  fixes a b :: real\n  assumes h0 : \"k * a + m * b = c\" \n    and h1 : \"k * a = c - m * b\" \n    and h2 : \"a = 4\" \n    and k: \"k = 3\" \n    and m: \"m = 2\" \n    and c: \"c = 12\"\n  shows \"b = (c - k * a) / m\"\nproof -\n  have \"k * 4 + m * b = c\" using h2 h0 by simp\n  have \"12 + m * b = c\" using `k = 3` `m = 2` `c = 12` by (smt (verit) \\<open>k * 4 + m * b = c\\<close>)\n  have \"m * b = c - 12\" by (metis \\<open>12 + m * b = c\\<close> add_diff_cancel_left' c cancel_comm_monoid_add_class.diff_cancel dbl_def m mult_2)\n  have \"b = (c - k * a) / m\" using `k = 3` `m = 2` `c = 12` by (metis \\<open>m * b = c - 12\\<close> add_divide_eq_if_simps(4) diff_eq_diff_eq divide_eq_0_iff double_zero_sym eq_iff_diff_eq_0 h1 mult.commute mult_2 one_add_one semiring_norm(3) semiring_norm(5))\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_generalized:\n  fixes a b :: real\n  assumes h0 : \"k * a + m * b = c\" \n    and h1 : \"k * a = c - m * b\" \n    and h2 : \"a = 4\" \n    and k: \"k = 3\" \n    and m: \"m = 2\" \n    and c: \"c = 12\"\n  shows \"b = (c - k * a) / m\"\nproof -\n  have \"k * 4 + m * b = c\" using h2 h0 by simp\n  have \"12 + m * b = c\" using `k = 3` `m = 2` `c = 12` by (smt (verit) \\<open>k * 4 + m * b = c\\<close>)\n  have \"m * b = c - 12\" by (metis \\<open>12 + m * b = c\\<close> add_diff_cancel_left' c cancel_comm_monoid_add_class.diff_cancel dbl_def m mult_2)\n  have \"b = (c - k * a) / m\" using `k = 3` `m = 2` `c = 12` by (metis \\<open>m * b = c - 12\\<close> add_divide_eq_if_simps(4) diff_eq_diff_eq divide_eq_0_iff double_zero_sym eq_iff_diff_eq_0 h1 mult.commute mult_2 one_add_one semiring_norm(3) semiring_norm(5))\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV4": {"skill_name": "mathd_algebra_109_evolvedV4", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"3 * a = 12 - 2 * b\"\n    and h2 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h2 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis by (simp add: `b = 0`)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"3 * a = 12 - 2 * b\"\n    and h2 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h2 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis by (simp add: `b = 0`)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_generalV2": {"skill_name": "mathd_algebra_generalV2", "marker": "theorem mathd_algebra_general:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n  shows \"b = (c - 3*a) / 2\"\nproof -\n  have \"2*b = c - 3*a\" using h0 by simp\n  thus \"b = (c - 3*a) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_general:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n  shows \"b = (c - 3*a) / 2\"\nproof -\n  have \"2*b = c - 3*a\" using h0 by simp\n  thus \"b = (c - 3*a) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_special_case": {"skill_name": "mathd_algebra_109_special_case", "marker": "theorem mathd_algebra_109_special_case:\n  fixes b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  thus \"b = 0\" using `12 + 2 * b = 12` by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_special_case:\n  fixes b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  thus \"b = 0\" using `12 + 2 * b = 12` by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_more_complex": {"skill_name": "mathd_algebra_109_more_complex", "marker": "theorem mathd_algebra_109_more_complex:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 15\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 3\"\n  shows \"b = 0\"\nproof -\n  from h1 have h3: \"3 * 4 + 2 * b + 3 = 15\" by (metis dbl_simps(3) h0 h2)\n  have h4: \"12 + 2 * b + 3 = 15\" using h3 by simp\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" using `2 * b = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_more_complex:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b + c = 15\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 3\"\n  shows \"b = 0\"\nproof -\n  from h1 have h3: \"3 * 4 + 2 * b + 3 = 15\" by (metis dbl_simps(3) h0 h2)\n  have h4: \"12 + 2 * b + 3 = 15\" using h3 by simp\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" using `2 * b = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV5": {"skill_name": "mathd_algebra_109_evolvedV5", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have h2: \"3 * 4 + 2 * b = 12\" by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have h3: \"12 + 2 * b = 12\" using h2 by simp\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" using `2 * b = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  from h1 have h2: \"3 * 4 + 2 * b = 12\" by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have h3: \"12 + 2 * b = 12\" using h2 by simp\n  hence \"2 * b = 0\" by (simp add: add_diff_eq)\n  thus \"b = 0\" using `2 * b = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_multiV2": {"skill_name": "mathd_algebra_109_multiV2", "marker": "theorem mathd_algebra_109_multi:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + c = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b + c = 12\" using `c = 0` by (smt (verit) \\<open>3 * 4 + 2 * b + c = 12\\<close>)\n  have \"2 * b + c = 0\" using `12 + 2 * b + c = 12` by simp\n  have \"2 * b = 0\" using `c = 0` by (metis \\<open>2 * b + c = 0\\<close> dbl_def dbl_simps(3) mult_2 verit_sum_simplify)\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_multi:\n  fixes a b c d :: real\n  assumes h0 : \"3*a + 2*b + c = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b + c = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b + c = 12\" using `c = 0` by (smt (verit) \\<open>3 * 4 + 2 * b + c = 12\\<close>)\n  have \"2 * b + c = 0\" using `12 + 2 * b + c = 12` by simp\n  have \"2 * b = 0\" using `c = 0` by (metis \\<open>2 * b + c = 0\\<close> dbl_def dbl_simps(3) mult_2 verit_sum_simplify)\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_generalV3": {"skill_name": "mathd_algebra_generalV3", "marker": "theorem mathd_algebra_general:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n  and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus ?thesis by (simp add: algebra_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_general:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n  and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  hence \"12 + 2 * b = c\" by simp\n  thus ?thesis by (simp add: algebra_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V4": {"skill_name": "mathd_algebra_109V4", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  hence \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: algebra_simps)\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV4": {"skill_name": "mathd_algebra_109_extendedV4", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  hence \"12 + 2 * b = c\" by simp\n  thus ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  hence \"12 + 2 * b = c\" by simp\n  thus ?thesis by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_equation_solutionV2": {"skill_name": "linear_equation_solutionV2", "marker": "theorem linear_equation_solution:\n  fixes a b c :: real\n  assumes h0 : \"c = 3*a + 2*b\"\n    and h1 : \"a = x\"  \n  shows \"b = (c - 3*x) / 2\"\nproof -\n  have \"c = 3*x + 2*b\" using h1 by (metis h0)\n  thus ?thesis by (simp add: h0)\nqed", "description": "-", "full_code": "theorem linear_equation_solution:\n  fixes a b c :: real\n  assumes h0 : \"c = 3*a + 2*b\"\n    and h1 : \"a = x\"  \n  shows \"b = (c - 3*x) / 2\"\nproof -\n  have \"c = 3*x + 2*b\" using h1 by (metis h0)\n  thus ?thesis by (simp add: h0)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV5": {"skill_name": "mathd_algebra_109_extendedV5", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\n  and \"b = (12 - 3 * a) / 2\" \nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show \"b = 0\" by (metis \\<open>b = 0\\<close>)\n  show \"b = (12 - 3 * a) / 2\" using h0 by (simp add: h1)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\n  and \"b = (12 - 3 * a) / 2\" \nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show \"b = 0\" by (metis \\<open>b = 0\\<close>)\n  show \"b = (12 - 3 * a) / 2\" using h0 by (simp add: h1)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "solve_linear_equation_generalized": {"skill_name": "solve_linear_equation_generalized", "marker": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes h0 : \"a > 0\"\n    and h1 : \"a * n + b = c\"\n  shows \"n = (c - b) / a\"\nproof -\n  have \"a * n + b = c\" using h1 by simp\n  then have \"a * n = c - b\" by simp\n  then show ?thesis using h0 by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem solve_linear_equation_generalized:\n  fixes a b c :: real\n  assumes h0 : \"a > 0\"\n    and h1 : \"a * n + b = c\"\n  shows \"n = (c - b) / a\"\nproof -\n  have \"a * n + b = c\" using h1 by simp\n  then have \"a * n = c - b\" by simp\n  then show ?thesis using h0 by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_linear": {"skill_name": "mathd_algebra_linear", "marker": "theorem mathd_algebra_linear:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  then have \"12 + 2 * b = c\" by simp\n  then have \"2 * b = c - 12\" by simp\n  then show \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_linear:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  then have \"12 + 2 * b = c\" by simp\n  then have \"2 * b = c - 12\" by simp\n  then show \"b = (c - 12) / 2\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV6": {"skill_name": "mathd_algebra_109_evolvedV6", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n    by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  thus \"b = 0\" \n    by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_complex": {"skill_name": "mathd_algebra_complex", "marker": "theorem mathd_algebra_complex:\n  fixes a b c d :: real\n  assumes h0 : \"3 * a + 2 * b = d\"\n    and h1 : \"a + b = 5\"\n    and h2 : \"d + c = 10\"\n  shows \"c = 10 - (3 * a + 2 * b)\"\nproof -\n  from h0 have \"d = 3 * a + 2 * b\" by simp\n  then have \"c = 10 - d\" using h2 by simp\n  thus \"c = 10 - (3 * a + 2 * b)\" by (simp add: `d = 3 * a + 2 * b`)\nqed", "description": "-", "full_code": "theorem mathd_algebra_complex:\n  fixes a b c d :: real\n  assumes h0 : \"3 * a + 2 * b = d\"\n    and h1 : \"a + b = 5\"\n    and h2 : \"d + c = 10\"\n  shows \"c = 10 - (3 * a + 2 * b)\"\nproof -\n  from h0 have \"d = 3 * a + 2 * b\" by simp\n  then have \"c = 10 - d\" using h2 by simp\n  thus \"c = 10 - (3 * a + 2 * b)\" by (simp add: `d = 3 * a + 2 * b`)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalizedV2": {"skill_name": "mathd_algebra_109_generalizedV2", "marker": "theorem mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_generalized:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n  shows \"b = (c - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" by simp\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV7": {"skill_name": "mathd_algebra_109_evolvedV7", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"... = 3 * 4 + 2 * b\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 0\" by auto\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * a + 2 * b = 12\" using h0 by simp\n  also have \"... = 3 * 4 + 2 * b\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  then have \"12 + 2 * b = 12\" by simp\n  hence \"2 * b = 0\" by auto\n  thus \"b = 0\" by (simp add: field_simps)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_n_dimensionsV2": {"skill_name": "mathd_algebra_n_dimensionsV2", "marker": "theorem mathd_algebra_n_dimensions:\n  fixes a b :: real\n    and n :: nat\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = (12 - 3 * a) / 2\"\n  using h1 h0 by (simp add: algebra_simps)", "description": "-", "full_code": "theorem mathd_algebra_n_dimensions:\n  fixes a b :: real\n    and n :: nat\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = (12 - 3 * a) / 2\"\n  using h1 h0 by (simp add: algebra_simps)", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_extendedV6": {"skill_name": "mathd_algebra_109_extendedV6", "marker": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = b + 2\"\n  shows \"b = 0 \\<and> c = 2\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  then have \"c = b + 2\" using h2 by simp\n  thus \"b = 0 \\<and> c = 2\" using `b = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_extended:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = b + 2\"\n  shows \"b = 0 \\<and> c = 2\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  then have \"c = b + 2\" using h2 by simp\n  thus \"b = 0 \\<and> c = 2\" using `b = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_generalizedV3": {"skill_name": "mathd_algebra_109_generalizedV3", "marker": "theorem mathd_algebra_109_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = k\"\n    and h1 : \"a = 4\"\n  shows \"b = (k - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = k\" using h1 by (metis h0)\n  then have \"12 + 2 * b = k\" by simp\n  have \"2 * b = k - 12\" using `12 + 2 * b = k` by simp\n  have \"b = (k - 12) / 2\" using `2 * b = k - 12` by (simp add: field_simps)\n  show ?thesis using `b = (k - 12) / 2` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = k\"\n    and h1 : \"a = 4\"\n  shows \"b = (k - 12) / 2\"\nproof -\n  have \"3 * 4 + 2 * b = k\" using h1 by (metis h0)\n  then have \"12 + 2 * b = k\" by simp\n  have \"2 * b = k - 12\" using `12 + 2 * b = k` by simp\n  have \"b = (k - 12) / 2\" using `2 * b = k - 12` by (simp add: field_simps)\n  show ?thesis using `b = (k - 12) / 2` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV8": {"skill_name": "mathd_algebra_109_evolvedV8", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  then have \"12 + 2 * b = 12\" by simp\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 0\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis h0)\n  then have \"12 + 2 * b = 12\" by simp\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV9": {"skill_name": "mathd_algebra_109_evolvedV9", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  have \"12 + 2 * b = 12\" using `c = 12` by (metis \\<open>12 + 2 * b = c\\<close>)\n  then have \"2 * b = 0\" by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3*a + 2*b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  have \"12 + 2 * b = 12\" using `c = 12` by (metis \\<open>12 + 2 * b = c\\<close>)\n  then have \"2 * b = 0\" by simp\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV10": {"skill_name": "mathd_algebra_109_evolvedV10", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  obtain c where \"c = b\" by auto\n  have \"3 * 4 + 2 * c = 12\" using h1 by (metis \\<open>c = b\\<close> dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * c = 12\" by (smt (verit) `3 * 4 + 2 * c = 12`)\n  have \"2 * c = 0\" using `12 + 2 * c = 12` by simp\n  hence \"c = 0\" using `2 * c = 0` by (simp add: field_simps)\n  thus ?thesis using `c = b` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  obtain c where \"c = b\" by auto\n  have \"3 * 4 + 2 * c = 12\" using h1 by (metis \\<open>c = b\\<close> dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * c = 12\" by (smt (verit) `3 * 4 + 2 * c = 12`)\n  have \"2 * c = 0\" using `12 + 2 * c = 12` by simp\n  hence \"c = 0\" using `2 * c = 0` by (simp add: field_simps)\n  thus ?thesis using `c = b` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_multi_dim": {"skill_name": "mathd_algebra_109_multi_dim", "marker": "theorem mathd_algebra_109_multi_dim:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0 \\<Longrightarrow> \\<forall>k. b = k * 0\"\nproof -\n  assume \"b = 0\"\n  then have \"b = 0\" by simp\n  then show \"\\<forall>k. b = k * 0\" by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_multi:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"12 + 2 * b = 12\" by (smt (verit) \\<open>3 * 4 + 2 * b = 12\\<close>)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  have \"b = 0\" using `2 * b = 0` by simp\n  show ?thesis using `b = 0` by simp\nqed\n\ntheorem mathd_algebra_109_multi_dim:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0 \\<Longrightarrow> \\<forall>k. b = k * 0\"\nproof -\n  assume \"b = 0\"\n  then have \"b = 0\" by simp\n  then show \"\\<forall>k. b = k * 0\" by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_generalized": {"skill_name": "mathd_algebra_generalized", "marker": "theorem mathd_algebra_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"      \nproof -\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by (simp add: field_simps)  \nqed", "description": "-", "full_code": "theorem mathd_algebra_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"      \nproof -\n  have \"3 * d + 2 * b = c\" using h1 by (metis h0)\n  then show ?thesis by (simp add: field_simps)  \nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_generalizedV2": {"skill_name": "mathd_algebra_generalizedV2", "marker": "theorem mathd_algebra_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"     \nproof -\n  have \"3 * d + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = c - 3 * d\" by (smt (verit) h0 h1)\n  show ?thesis using `2 * b = c - 3 * d` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_generalized:\n  fixes a b :: real\n  assumes h0 : \"3*a + 2*b = c\"  \n    and h1 : \"a = d\"            \n  shows \"b = (c - 3*d) / 2\"     \nproof -\n  have \"3 * d + 2 * b = c\" using h1 by (metis dbl_inc_simps(3) dbl_simps(3) h0)\n  have \"2 * b = c - 3 * d\" by (smt (verit) h0 h1)\n  show ?thesis using `2 * b = c - 3 * d` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109V5": {"skill_name": "mathd_algebra_109V5", "marker": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis assms(1))\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109:\n  fixes a b :: real\n  assumes h0 : \"3 * a + 2 * b = 12\"\n    and h1 : \"a = 4\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = 12\" using h1 by (metis assms(1))\n  then have \"12 + 2 * b = 12\" by simp\n  then have \"2 * b = 0\" by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV11": {"skill_name": "mathd_algebra_109_evolvedV11", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  hence \"12 + 2 * b = 12\" by (metis h2)\n  thus \"b = 0\" by auto\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 h0 by simp\n  then have \"12 + 2 * b = c\" using h2 by simp\n  hence \"12 + 2 * b = 12\" by (metis h2)\n  thus \"b = 0\" by auto\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_evolvedV12": {"skill_name": "mathd_algebra_109_evolvedV12", "marker": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  then have \"12 + 2 * b = c\" using h2 by simp\n  have \"12 + 2 * b = 12\" by (metis \\<open>12 + 2 * b = c\\<close> h2)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  thus \"b = 0\" by (simp)\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_evolved:\n  fixes a b c :: real\n  assumes h0 : \"3 * a + 2 * b = c\"\n    and h1 : \"a = 4\"\n    and h2 : \"c = 12\"\n  shows \"b = 0\"\nproof -\n  have \"3 * 4 + 2 * b = c\" using h1 by (metis h0)\n  then have \"12 + 2 * b = c\" using h2 by simp\n  have \"12 + 2 * b = 12\" by (metis \\<open>12 + 2 * b = c\\<close> h2)\n  have \"2 * b = 0\" using `12 + 2 * b = 12` by simp\n  thus \"b = 0\" by (simp)\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "mathd_algebra_109_n_dimensions": {"skill_name": "mathd_algebra_109_n_dimensions", "marker": "theorem mathd_algebra_109_n_dimensions:\n  fixes a :: \"real list\" and b :: \"real list\"\n  assumes h0 : \"3 * (a ! 0) + 2 * (b ! 0) = 12\" \n    and h1 : \"a ! 0 = 4\"\n  shows \"b ! 0 = 0\"\nproof -\n  have \"3 * 4 + 2 * (b ! 0) = 12\" using h1 by (metis assms(1))\n  have \"12 + 2 * (b ! 0) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * (b ! 0) = 12\\<close>)\n  have \"2 * (b ! 0) = 0\" using `12 + 2 * (b ! 0) = 12` by simp\n  have \"b ! 0 = 0\" using `2 * (b ! 0) = 0` by simp\n  show ?thesis using `b ! 0 = 0` by simp\nqed", "description": "-", "full_code": "theorem mathd_algebra_109_n_dimensions:\n  fixes a :: \"real list\" and b :: \"real list\"\n  assumes h0 : \"3 * (a ! 0) + 2 * (b ! 0) = 12\" \n    and h1 : \"a ! 0 = 4\"\n  shows \"b ! 0 = 0\"\nproof -\n  have \"3 * 4 + 2 * (b ! 0) = 12\" using h1 by (metis assms(1))\n  have \"12 + 2 * (b ! 0) = 12\" by (smt (verit) \\<open>3 * 4 + 2 * (b ! 0) = 12\\<close>)\n  have \"2 * (b ! 0) = 0\" using `12 + 2 * (b ! 0) = 12` by simp\n  have \"b ! 0 = 0\" using `2 * (b ! 0) = 0` by simp\n  show ?thesis using `b ! 0 = 0` by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}, "linear_substitution": {"skill_name": "linear_substitution", "marker": "lemma linear_substitution:\n  fixes a b :: real\n  assumes h0: \"m * a + n * b = k\" \n    and h1: \"a = v\" \n  shows \"m * v + n * b = k\"\nproof -\n  have \"m * a + n * b = m * v + n * b\" using h1 by simp\n  then show ?thesis using h0 by simp\nqed", "description": "-", "full_code": "lemma linear_substitution:\n  fixes a b :: real\n  assumes h0: \"m * a + n * b = k\" \n    and h1: \"a = v\" \n  shows \"m * v + n * b = k\"\nproof -\n  have \"m * a + n * b = m * v + n * b\" using h1 by simp\n  then show ?thesis using h0 by simp\nqed", "origin": "mathd_algebra_109", "update_count": 0}}