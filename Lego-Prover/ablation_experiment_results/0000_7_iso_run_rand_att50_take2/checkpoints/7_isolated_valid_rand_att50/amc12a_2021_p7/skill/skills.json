{"cal_log_value": {"skill_name": "cal_log_value", "marker": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "description": "This skill calculates the value of a number given its logarithm. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes four arguments: two real numbers 'a' and 'b' which are greater than 0 and 'a' is not equal to 1, and a real number 'c' which is the logarithm base 'a' of 'b'. It returns the value of 'b', which is equal to 'a' raised to the power 'c'.", "full_code": "lemma cal_log_value:\n  assumes \"a > 0\" and \"a \u2260 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nby (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)", "origin": "", "update_count": 0}, "mod_add_power": {"skill_name": "mod_add_power", "marker": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "description": "This skill is a mathematical property that states that if `x mod n = a`, then the modulus of the power of `(x + b)` and `(a + b)` with respect to `n` are equal. This skill can be used in any context where the modulus of the power of two numbers is required.", "full_code": "lemma mod_add_power:\n  fixes x n a b c :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"x mod n = a\"\n  shows \"((x + b)^c) mod n = ((a + b)^c) mod n\"\nproof -\n  have \"(x + b)^c mod n = ((x mod n) + b)^c mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = (a + b)^c mod n\"\n    using assms(4) by auto\n  finally show ?thesis by auto\nqed", "origin": "", "update_count": 0}, "cancle_div": {"skill_name": "cancle_div", "marker": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "description": "This skill is a mathematical property that can be used to simplify expressions involving division and multiplication. If you have an equation of the form \"a + b / x = c\" for some real numbers a, b, c, and x (where x > 0), you can use this skill to transform the equation into \"a * x + b = c * x\". This can be useful in many mathematical proofs where simplification of expressions is required.", "full_code": "lemma cancle_div:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then show ?thesis\n    using assms(1) by (simp add: mult.commute)\nqed", "origin": "", "update_count": 0}, "multi_distrib_complex": {"skill_name": "multi_distrib_complex", "marker": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "description": "This skill is a generalization of the distributive property of multiplication over addition for complex numbers. It can be used in any context where the distributive property of multiplication over addition for complex numbers is needed. To use this skill, you need to provide four complex numbers a, b, c, and d. The skill will then prove that the product of the sum of a and b and the sum of c and d is equal to the sum of the products of each pair of complex numbers.", "full_code": "lemma multi_distrib_complex:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\n  by (simp add: distrib_left distrib_right)", "origin": "", "update_count": 0}, "cal_log_exp_value": {"skill_name": "cal_log_exp_value", "marker": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "description": "This skill calculates the logarithm of a number raised to a power. It is a general mathematical property and can be used in any context where logarithms are involved. The skill takes three arguments: a real number 'a' which is greater than 0 and not equal to 1, and a positive integer 'n'. It returns the logarithm base 'a' of 'a' raised to the power 'n', which is equal to 'n'.", "full_code": "lemma cal_log_exp_value:\n  fixes a :: real\n  assumes \"a > 0\" \"a \u2260 1\" \"n > 0\"\n  shows \"log a (a^n) = n\"\nproof -\n  have c0: \"log a a = 1\"\n    by (simp add: assms(1) assms(2))\n  have \"log a (a^n) = n * (log a a)\"\n    using log_nat_power[of a a n] by (simp add: assms(1))\n  then have c1: \"log a (a^n) = n\"\n    using c0 by simp\n  then show ?thesis \n    by (simp add: c1)\nqed", "origin": "", "update_count": 0}, "a_times_vera": {"skill_name": "a_times_vera", "marker": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "description": "This skill demonstrates the property of any non-zero real number that when it is multiplied by its reciprocal, the result is 1. This is a fundamental property of division and multiplication in the field of real numbers. This skill can be used in any context where this property needs to be proven or used.", "full_code": "lemma a_times_vera:\n  fixes a :: real\n  assumes \"a \u2260 0\"\n  shows \" a * (1 / a) = 1\"\n  by (simp add: assms)", "origin": "", "update_count": 0}, "cal_log_value_extended": {"skill_name": "cal_log_value_extended", "marker": "lemma cal_log_value_extended:\n  fixes a b :: real\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c \\<Longrightarrow> b = a ^ c\" by (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)\n  then show ?thesis by (metis assms(4))\nqed", "description": "-", "full_code": "lemma cal_log_value_extended:\n  fixes a b :: real\n  assumes \"a > 0\" and \"a \\<noteq> 1\" and \"b > 0\" and \"log a b = c\"\n  shows \"b = a ^ c\"\nproof -\n  have \"log a b = c \\<Longrightarrow> b = a ^ c\" by (metis assms(1) assms(2) assms(3) assms(4) powr_log_cancel powr_realpow)\n  then show ?thesis by (metis assms(4))\nqed", "origin": "cal_log_value", "update_count": 0}, "log_exp_value_generalized": {"skill_name": "log_exp_value_generalized", "marker": "lemma log_exp_value_generalized:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\" \"m > 0\"\n  shows \"log a (a^(n * m)) = n * m\"\nproof -\n  have c0: \"log a a = 1\" by (simp add: assms(1) assms(2))\n  have \"log a (a^(n * m)) = (n * m) * log a a\"\n    using log_nat_power[of a a \"n * m\"] by (simp add: assms(1))\n  then have c1: \"log a (a^(n * m)) = n * m\"\n    using c0 by simp\n  then show ?thesis by (simp add: c1)\nqed", "description": "-", "full_code": "lemma log_exp_value_generalized:\n  fixes a :: real\n  assumes \"a > 0\" \"a \\<noteq> 1\" \"n > 0\" \"m > 0\"\n  shows \"log a (a^(n * m)) = n * m\"\nproof -\n  have c0: \"log a a = 1\" by (simp add: assms(1) assms(2))\n  have \"log a (a^(n * m)) = (n * m) * log a a\"\n    using log_nat_power[of a a \"n * m\"] by (simp add: assms(1))\n  then have c1: \"log a (a^(n * m)) = n * m\"\n    using c0 by simp\n  then show ?thesis by (simp add: c1)\nqed", "origin": "cal_log_exp_value", "update_count": 0}, "add_subtract": {"skill_name": "add_subtract", "marker": "lemma add_subtract:\n  fixes a b c :: real\n  assumes \"a + b = c\" \"b > 0\"\n  shows \"c - b = a\"\nproof -\n  have \"c - b = (a + b) - b\" using assms(1) by simp\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma add_subtract:\n  fixes a b c :: real\n  assumes \"a + b = c\" \"b > 0\"\n  shows \"c - b = a\"\nproof -\n  have \"c - b = (a + b) - b\" using assms(1) by simp\n  then show ?thesis by simp\nqed", "origin": "cancle_div", "update_count": 0}, "cancel_division": {"skill_name": "cancel_division", "marker": "lemma cancel_division:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + (b / x) = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + (b / x)) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + (x * (b / x)) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: mult.commute)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma cancel_division:\n  fixes x a b c:: real\n  assumes \"x > 0\" \"a + (b / x) = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + (b / x)) = c * x\"\n    using assms(2) by auto\n  then have \"x * a + (x * (b / x)) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: mult.commute)\n  thus ?thesis by sos\nqed", "origin": "cancle_div", "update_count": 0}, "mod_add_power_generalized": {"skill_name": "mod_add_power_generalized", "marker": "lemma mod_add_power_generalized:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x mod n) + b)^c + d) mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = ((a + b)^c + d) mod n\"\n    using assms(5) by auto\n  finally show ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_power_generalized:\n  fixes x n a b c d :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\" \"d > 0\" \"x mod n = a\"\n  shows \"((x + b)^c + d) mod n = ((a + b)^c + d) mod n\"\nproof -\n  have \"((x + b)^c + d) mod n = (((x mod n) + b)^c + d) mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  also have \"... = ((a + b)^c + d) mod n\"\n    using assms(5) by auto\n  finally show ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "cancel_div": {"skill_name": "cancel_div", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    by (metis add.commute assms(1) divide_divide_eq_left' divide_divide_eq_right divide_less_eq_1_pos divide_self_if less_numeral_extra(1) mult.commute mult.right_neutral real_divide_square_eq times_divide_eq_left times_divide_eq_right verit_comp_simplify1(1))\n  then show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    by (metis add.commute assms(1) divide_divide_eq_left' divide_divide_eq_right divide_less_eq_1_pos divide_self_if less_numeral_extra(1) mult.commute mult.right_neutral real_divide_square_eq times_divide_eq_left times_divide_eq_right verit_comp_simplify1(1))\n  then show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "cancel_divV2": {"skill_name": "cancel_divV2", "marker": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: divide_simps)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma cancel_div:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: divide_simps)\n  thus ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_square": {"skill_name": "expand_square", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y) * (x + y) = x * (x + y) + y * (x + y)\"\n    by sos\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by auto\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y) * (x + y) = x * (x + y) + y * (x + y)\"\n    by sos\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by auto\n  finally show ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV2": {"skill_name": "expand_squareV2", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x * (x + y) + y * (x + y)\" by sos\n  also have \"... = x^2 + x * y + y * x + y^2\" by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" by auto\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x * (x + y) + y * (x + y)\" by sos\n  also have \"... = x^2 + x * y + y * x + y^2\" by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" by auto\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negativity": {"skill_name": "non_negativity", "marker": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then have \"a^2 >= 0\" \n    by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then have \"a^2 >= 0\" \n    by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequality": {"skill_name": "trivial_inequality", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis \n    by auto\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "non_negativityV2": {"skill_name": "non_negativityV2", "marker": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV2": {"skill_name": "trivial_inequalityV2", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "expand_expression": {"skill_name": "expand_expression", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x^2 * y^2) - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2) + (x^2) + (y^2) + (1 - 2 * (x * y) + 2 * (x * y))\"\n    by auto\n  finally have \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\n    by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x^2 * y^2) - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp add: power2_eq_square)\n  also have \"... = (x^2 * y^2) + (x^2) + (y^2) + (1 - 2 * (x * y) + 2 * (x * y))\"\n    by auto\n  finally have \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\n    by simp\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV2": {"skill_name": "expand_expressionV2", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\" \n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have right_side: \"((x * y) - 1)^2 + (x^2 + 2 * x * y + y^2) = (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\" \n    by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = x^2 * y^2 + x^2 + y^2 + 1\" by sos\n    also have \"... + (- 2 * (x * y) + 2 * (x * y)) = x^2 * y^2 + (x^2 + y^2) + 1\" by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\" \n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have right_side: \"((x * y) - 1)^2 + (x^2 + 2 * x * y + y^2) = (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\" \n    by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = x^2 * y^2 + x^2 + y^2 + 1\" by sos\n    also have \"... + (- 2 * (x * y) + 2 * (x * y)) = x^2 * y^2 + (x^2 + y^2) + 1\" by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV3": {"skill_name": "expand_expressionV3", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\" \n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have right_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    using left_side by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\" \n    by (simp add: algebra_simps)\n  thus ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\" \n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by sos\n  have right_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    using left_side by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\" \n    by (simp add: algebra_simps)\n  thus ?thesis \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "cancel_div_with_inequality": {"skill_name": "cancel_div_with_inequality", "marker": "lemma cancel_div_with_inequality:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\" \"b >= 0\" \"a >= 0\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    by (metis \\<open>x * (a + b / x) = c * x\\<close> add.commute assms(1) assms(2) linorder_not_less nonzero_mult_div_cancel_left order_refl times_divide_eq_right)\n  have \"a * x + b >= 0\" using assms by auto\n  then show ?thesis\n    by (metis \\<open>x * a + b = c * x\\<close> frac_eq_eq mult.commute mult_eq_0_iff)\nqed", "description": "-", "full_code": "lemma cancel_div_with_inequality:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\" \"b >= 0\" \"a >= 0\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    by (metis \\<open>x * (a + b / x) = c * x\\<close> add.commute assms(1) assms(2) linorder_not_less nonzero_mult_div_cancel_left order_refl times_divide_eq_right)\n  have \"a * x + b >= 0\" using assms by auto\n  then show ?thesis\n    by (metis \\<open>x * a + b = c * x\\<close> frac_eq_eq mult.commute mult_eq_0_iff)\nqed", "origin": "cancel_div", "update_count": 0}, "divide_and_scale": {"skill_name": "divide_and_scale", "marker": "lemma divide_and_scale:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a * x = c - b\"\n  shows \"a = (c - b) / x\"\nproof -\n  have \"a * x + b = c\" using assms(2) by simp\n  then show ?thesis using assms(1) by auto\nqed", "description": "-", "full_code": "lemma divide_and_scale:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a * x = c - b\"\n  shows \"a = (c - b) / x\"\nproof -\n  have \"a * x + b = c\" using assms(2) by simp\n  then show ?thesis using assms(1) by auto\nqed", "origin": "cancel_div", "update_count": 0}, "non_negative_squares": {"skill_name": "non_negative_squares", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then have \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then have \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"a^2 >= 0\" and \"b^2 >= 0\" by auto\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then have \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then have \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"a^2 >= 0\" and \"b^2 >= 0\" by auto\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV2": {"skill_name": "non_negative_squaresV2", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV3": {"skill_name": "expand_squareV3", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"((x + y) * (x + y)) = (x + y) * x + (x + y) * y\"\n    by sos\n  also have \"... = x^2 + y * x + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"((x + y) * (x + y)) = (x + y) * x + (x + y) * y\"\n    by sos\n  also have \"... = x^2 + y * x + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV4": {"skill_name": "expand_squareV4", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \" (x + y)^2 = (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: add.commute)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \" (x + y)^2 = (x + y) * (x + y)\"\n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: add.commute)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV3": {"skill_name": "non_negative_squaresV3", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" using non_negative_power[of a] by simp\n  show \"b^2 >= 0\" using non_negative_power[of b] by simp\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed\n\nlemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" using non_negative_power[of a] by simp\n  show \"b^2 >= 0\" using non_negative_power[of b] by simp\nqed", "origin": "non_negative_squares", "update_count": 0}, "non_negative_power": {"skill_name": "non_negative_power", "marker": "lemma non_negative_power:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "non_negative_squares", "update_count": 0}, "non_negative_powers": {"skill_name": "non_negative_powers", "marker": "lemma non_negative_powers:\n  fixes x :: real and n :: nat\n  assumes \"n > 0\"\n  shows \"x^n >= 0 \\<longleftrightarrow> (x = 0 \\<or> n mod 2 = 0 \\<or> x > 0)\"\nproof -\n  have \"x^n = x * x^(n-1)\" by (metis assms bot_nat_0.not_eq_extremum power_eq_if)\n  then show \"x^n >= 0 \\<longleftrightarrow> (x = 0 \\<or> n mod 2 = 0 \\<or> x > 0)\"\n  proof (cases \"x = 0\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"x > 0 \\<or> x < 0\" by auto\n    thus ?thesis\n    proof (cases \"x > 0\")\n      case True\n      then have \"x^n > 0\" by auto\n      then show ?thesis by (metis True pos2 realpow_pos_nth_unique zero_le_power2)\n    next\n      case False\n      then have \"x < 0\" by (metis \\<open>0 < x \\<or> x < 0\\<close>)\n      have \"n mod 2 = 1 \\<Longrightarrow> x^n < 0\" using power_strict_mono by (metis \\<open>x < 0\\<close> even_mod_2_iff odd_one power_less_zero_eq)\n      thus ?thesis by (metis False \\<open>0 < x \\<or> x < 0\\<close> even_iff_mod_2_eq_zero less_eq_real_def less_numeral_extra(3) mod_eq_0_iff_dvd not_mod_2_eq_0_eq_1 zero_le_even_power zero_le_odd_power zero_neq_one)\n    qed\n  qed\nqed", "description": "-", "full_code": "lemma non_negative_powers:\n  fixes x :: real and n :: nat\n  assumes \"n > 0\"\n  shows \"x^n >= 0 \\<longleftrightarrow> (x = 0 \\<or> n mod 2 = 0 \\<or> x > 0)\"\nproof -\n  have \"x^n = x * x^(n-1)\" by (metis assms bot_nat_0.not_eq_extremum power_eq_if)\n  then show \"x^n >= 0 \\<longleftrightarrow> (x = 0 \\<or> n mod 2 = 0 \\<or> x > 0)\"\n  proof (cases \"x = 0\")\n    case True\n    then show ?thesis by simp\n  next\n    case False\n    then have \"x > 0 \\<or> x < 0\" by auto\n    thus ?thesis\n    proof (cases \"x > 0\")\n      case True\n      then have \"x^n > 0\" by auto\n      then show ?thesis by (metis True pos2 realpow_pos_nth_unique zero_le_power2)\n    next\n      case False\n      then have \"x < 0\" by (metis \\<open>0 < x \\<or> x < 0\\<close>)\n      have \"n mod 2 = 1 \\<Longrightarrow> x^n < 0\" using power_strict_mono by (metis \\<open>x < 0\\<close> even_mod_2_iff odd_one power_less_zero_eq)\n      thus ?thesis by (metis False \\<open>0 < x \\<or> x < 0\\<close> even_iff_mod_2_eq_zero less_eq_real_def less_numeral_extra(3) mod_eq_0_iff_dvd not_mod_2_eq_0_eq_1 zero_le_even_power zero_le_odd_power zero_neq_one)\n    qed\n  qed\nqed", "origin": "non_negative_squares", "update_count": 0}, "non_negative_squares_general": {"skill_name": "non_negative_squares_general", "marker": "lemma non_negative_squares_general:\n  fixes x y :: real\n  shows \"x^2 >= 0\" and \"y^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  then have \"y^2 >= 0\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"x^2 >= 0\" and \"y^2 >= 0\" by auto\nqed", "description": "-", "full_code": "lemma non_negative_squares_general:\n  fixes x y :: real\n  shows \"x^2 >= 0\" and \"y^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  then have \"y^2 >= 0\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"x^2 >= 0\" and \"y^2 >= 0\" by auto\nqed", "origin": "non_negative_squares", "update_count": 0}, "multi_distrib_complex_general": {"skill_name": "multi_distrib_complex_general", "marker": "lemma multi_distrib_complex_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"a * c + a * d + b * c + b * d = (a + b) * (c + d)\"\n    by (simp add: distrib_left distrib_right)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma multi_distrib_complex_general:\n  fixes a b c d :: complex\n  shows \"(a + b) * (c + d) = a * c + a * d + b * c + b * d\"\nproof -\n  have \"a * c + a * d + b * c + b * d = (a + b) * (c + d)\"\n    by (simp add: distrib_left distrib_right)\n  then show ?thesis by simp\nqed", "origin": "multi_distrib_complex", "update_count": 0}, "non_negativityV3": {"skill_name": "non_negativityV3", "marker": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "non_negativityV4": {"skill_name": "non_negativityV4", "marker": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> y^2\" by auto\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> x^2 + y^2\" \n    by auto\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> x^2 + y^2\" \n    by auto\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> y^2\" by auto\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> x^2 + y^2\" \n    by auto\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> x^2 + y^2\" \n    by auto\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negativityV5": {"skill_name": "non_negativityV5", "marker": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\" \n    using `x^2 >= 0` `y^2 >= 0` ` (x * y)^2 >= 0` by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\" \n    using `x^2 >= 0` `y^2 >= 0` ` (x * y)^2 >= 0` by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negativityV6": {"skill_name": "non_negativityV6", "marker": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  have \"(x * y)^2 >= 0\" by auto\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  have \"y^2 >= 0\" by auto\n  have \"(x * y)^2 >= 0\" by auto\n  then have \"x^2 + y^2 + (x * y)^2 >= 0 + 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_real_squares": {"skill_name": "non_negative_real_squares", "marker": "lemma non_negative_real_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\n  show \"b^2 >= 0\" \n  proof (cases \"b >= 0\")\n    case True\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"b < 0\" by simp\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma non_negative_real_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\n  show \"b^2 >= 0\" \n  proof (cases \"b >= 0\")\n    case True\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"b < 0\" by simp\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "origin": "non_negativityV3", "update_count": 0}, "min_of_non_negatives": {"skill_name": "min_of_non_negatives", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = a + b\" by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_of_non_negativesV2": {"skill_name": "min_of_non_negativesV2", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  from assms(1) and assms(2) show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  from assms(1) and assms(2) show ?thesis \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_of_non_negativesV3": {"skill_name": "min_of_non_negativesV3", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  then show ?thesis \n    using add_nonneg_nonneg[of a b] by (metis assms(1))\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  then show ?thesis \n    using add_nonneg_nonneg[of a b] by (metis assms(1))\nqed", "origin": "do_request", "update_count": 0}, "min_of_non_negativesV4": {"skill_name": "min_of_non_negativesV4", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  then show ?thesis \n    by (metis add_nonneg_nonneg assms(1))\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  then show ?thesis \n    by (metis add_nonneg_nonneg assms(1))\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_sum_of_squares": {"skill_name": "nonnegative_sum_of_squares", "marker": "lemma nonnegative_sum_of_squares:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  have \"c^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  have \"c^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "square_difference_nonneg": {"skill_name": "square_difference_nonneg", "marker": "lemma square_difference_nonneg:\n  fixes x y :: real\n  shows \"(x - y)^2 >= 0\"\nproof -\n  have \"(x - y)^2 = x^2 - 2*x*y + y^2\" by sos\n  then show ?thesis using nonnegative_sum_of_squares by sos\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  have \"c^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed\n\nlemma square_difference_nonneg:\n  fixes x y :: real\n  shows \"(x - y)^2 >= 0\"\nproof -\n  have \"(x - y)^2 = x^2 - 2*x*y + y^2\" by sos\n  then show ?thesis using nonnegative_sum_of_squares by sos\nqed", "origin": "trivial_inequalityV2", "update_count": 0}, "non_negativityV7": {"skill_name": "non_negativityV7", "marker": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 \\<ge> 0 + 0 + 0\"\n    using `x^2 \\<ge> 0` `y^2 \\<ge> 0` `(x * y)^2 \\<ge> 0` \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + (x * y)^2 \\<ge> 0 + 0 + 0\"\n    using `x^2 \\<ge> 0` `y^2 \\<ge> 0` `(x * y)^2 \\<ge> 0` \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "mod_add_intuition": {"skill_name": "mod_add_intuition", "marker": "lemma mod_add_intuition:\n  fixes x b c a :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\"\n  shows \"((x + b)^c) mod n = ((x mod n + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b)^c) mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma mod_add_intuition:\n  fixes x b c a :: nat\n  assumes \"n > 0\" \"b > 0\" \"c > 0\"\n  shows \"((x + b)^c) mod n = ((x mod n + b)^c) mod n\"\nproof -\n  have \"((x + b)^c) mod n = ((x mod n + b)^c) mod n\"\n    by (smt (verit) mod_add_left_eq power_mod)\n  thus ?thesis by auto\nqed", "origin": "mod_add_power", "update_count": 0}, "min_of_non_negatives_with_parameterization": {"skill_name": "min_of_non_negatives_with_parameterization", "marker": "lemma min_of_non_negatives_with_parameterization:\n  fixes a b c :: real\n  assumes \"a >= 0\" and \"b >= 0\" and \"c = a + b\"\n  shows \"c >= 0\"\nproof -\n  have \"c = a + b\" using assms(3) by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives_with_parameterization:\n  fixes a b c :: real\n  assumes \"a >= 0\" and \"b >= 0\" and \"c = a + b\"\n  shows \"c >= 0\"\nproof -\n  have \"c = a + b\" using assms(3) by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "min_of_non_negatives", "update_count": 0}, "min_of_non_negatives_generalized": {"skill_name": "min_of_non_negatives_generalized", "marker": "lemma min_of_non_negatives_generalized:\n  fixes x y :: real\n  assumes \"x >= 0\" and \"y >= 0\"\n  shows \"min x y >= 0\"\nproof -\n  have \"min x y = min x y\" by simp\n  then show ?thesis using assms by (metis min_def)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives_generalized:\n  fixes x y :: real\n  assumes \"x >= 0\" and \"y >= 0\"\n  shows \"min x y >= 0\"\nproof -\n  have \"min x y = min x y\" by simp\n  then show ?thesis using assms by (metis min_def)\nqed", "origin": "min_of_non_negatives", "update_count": 0}, "non_negative_powerV2": {"skill_name": "non_negative_powerV2", "marker": "lemma non_negative_power:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV3": {"skill_name": "trivial_inequalityV3", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  show \"0 \\<le> a^2\" using non_negative_power[of a] by simp\n  show \"0 \\<le> b^2\" using non_negative_power[of b] by simp\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma trivial_inequality:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  show \"0 \\<le> a^2\" using non_negative_power[of a] by simp\n  show \"0 \\<le> b^2\" using non_negative_power[of b] by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV4": {"skill_name": "non_negative_squaresV4", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> a^2\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> b^2\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> a^2\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> b^2\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "inverse_product": {"skill_name": "inverse_product", "marker": "lemma inverse_product:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\"\n  shows \"1 / (a * b) = (1 / a) * (1 / b)\"\nproof -\n  have \"a * b \\<noteq> 0\" using assms by auto\n  then show ?thesis by (simp add: field_simps)\nqed", "description": "-", "full_code": "lemma inverse_product:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\"\n  shows \"1 / (a * b) = (1 / a) * (1 / b)\"\nproof -\n  have \"a * b \\<noteq> 0\" using assms by auto\n  then show ?thesis by (simp add: field_simps)\nqed", "origin": "a_times_vera", "update_count": 0}, "a_times_vera_general": {"skill_name": "a_times_vera_general", "marker": "lemma a_times_vera_general:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" by (simp add: assms)\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma a_times_vera_general:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"a * (1 / a) = 1\" by (simp add: assms)\n  then show ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "sum_of_non_negative_squares": {"skill_name": "sum_of_non_negative_squares", "marker": "lemma sum_of_non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV2", "update_count": 0}, "non_negative_squares_and_sum": {"skill_name": "non_negative_squares_and_sum", "marker": "lemma non_negative_squares_and_sum:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"a^2 + b^2 = (a * a) + (b * b)\" by sos\n  then show \"a^2 + b^2 >= 0\"\n    by (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_and_sum:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"a^2 + b^2 = (a * a) + (b * b)\" by sos\n  then show \"a^2 + b^2 >= 0\"\n    by (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV2", "update_count": 0}, "sum_of_squares_nonneg": {"skill_name": "sum_of_squares_nonneg", "marker": "lemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  hence \"x^2 + y^2 >= y^2\" by simp\n  thus \"x^2 + y^2 >= 0\" by auto\nqed", "description": "-", "full_code": "lemma sum_of_squares_nonneg:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto\n  hence \"x^2 + y^2 >= y^2\" by simp\n  thus \"x^2 + y^2 >= 0\" by auto\nqed", "origin": "non_negative_squaresV2", "update_count": 0}, "non_negative_squares_for_nonneg_reals": {"skill_name": "non_negative_squares_for_nonneg_reals", "marker": "lemma non_negative_squares_for_nonneg_reals:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    using assms by (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    using assms by (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_for_nonneg_reals:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\" \n    using assms by (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\" \n    using assms by (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV2", "update_count": 0}, "expand_expressionV4": {"skill_name": "expand_expressionV4", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    using left_side expansion by sos\n  have final_expansion: \"(x^2 * y^2) - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2) = (x^2 * y^2) + (x^2) + (y^2) + 1\"\n  proof -\n    have \"(x^2 * y^2) - 2 * (x * y) + 1 + 2 * (x * y) = (x^2 * y^2) + 1\"\n      by simp\n    thus ?thesis by (simp add: algebra_simps)\n  qed\n  thus ?thesis by (simp add: combined_left)\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    using left_side expansion by sos\n  have final_expansion: \"(x^2 * y^2) - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2) = (x^2 * y^2) + (x^2) + (y^2) + 1\"\n  proof -\n    have \"(x^2 * y^2) - 2 * (x * y) + 1 + 2 * (x * y) = (x^2 * y^2) + 1\"\n      by simp\n    thus ?thesis by (simp add: algebra_simps)\n  qed\n  thus ?thesis by (simp add: combined_left)\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV5": {"skill_name": "expand_expressionV5", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have expanded_left: \"((x * y) - 1)^2 + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) =\n        (x^2 * y^2) + (x^2) + (y^2) + 1\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = x^2 * y^2 + x^2 + y^2 + 1\" by sos\n    also have \"... + (-2 * (x * y) + 2 * (x * y)) = x^2 * y^2 + (x^2 + y^2) + 1\"\n      by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have expanded_left: \"((x * y) - 1)^2 + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by sos\n  have \"((x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2) =\n        (x^2 * y^2) + (x^2) + (y^2) + 1\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = x^2 * y^2 + x^2 + y^2 + 1\" by sos\n    also have \"... + (-2 * (x * y) + 2 * (x * y)) = x^2 * y^2 + (x^2 + y^2) + 1\"\n      by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "non_negativity_extended": {"skill_name": "non_negativity_extended", "marker": "lemma non_negativity_extended:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" and \"z^2 >= 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + z^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma non_negativity_extended:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" and \"z^2 >= 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + z^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "non_negativity_extendedV2": {"skill_name": "non_negativity_extendedV2", "marker": "theorem non_negativity_extended:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" and \"(x * y)^2 >= 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + (x * y)^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\ntheorem non_negativity_extended:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" and \"(x * y)^2 >= 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + (x * y)^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "expand_expressionV6": {"skill_name": "expand_expressionV6", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  have final_expansion: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  have final_expansion: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV7": {"skill_name": "expand_expressionV7", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by simp\n  have final_expansion: \"(x^2 + y^2 + (x * y)^2 + 1) = (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by (simp add: power2_eq_square)\n    also have \"... + (-2 * (x * y) + 2 * (x * y)) = (x^2 * y^2) + (x^2 + y^2) + 1\" \n      by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by simp\n  have final_expansion: \"(x^2 + y^2 + (x * y)^2 + 1) = (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by (simp add: power2_eq_square)\n    also have \"... + (-2 * (x * y) + 2 * (x * y)) = (x^2 * y^2) + (x^2 + y^2) + 1\" \n      by simp\n    finally show ?thesis by simp\n  qed\n  thus ?thesis by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV8": {"skill_name": "expand_expressionV8", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side)\n  qed\n  show ?thesis using combined_left by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side)\n  qed\n  show ?thesis using combined_left by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV9": {"skill_name": "expand_expressionV9", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_expansion: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                         (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: algebra_simps)\n  qed\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_expansion: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                         (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: algebra_simps)\n  qed\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV10": {"skill_name": "expand_expressionV10", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion extra_terms)\n  qed\n  have right_side: \"x^2 + y^2 + (x * y)^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by simp\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion extra_terms)\n  qed\n  have right_side: \"x^2 + y^2 + (x * y)^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by simp\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squares_with_variables": {"skill_name": "non_negative_squares_with_variables", "marker": "lemma non_negative_squares_with_variables:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  using sum_of_non_negative_squares by simp", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed\n\nlemma non_negative_squares_with_variables:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  using sum_of_non_negative_squares by simp", "origin": "sum_of_non_negative_squares", "update_count": 0}, "non_negative_squares_for_any_c": {"skill_name": "non_negative_squares_for_any_c", "marker": "lemma non_negative_squares_for_any_c:\n  fixes a :: real and c :: real\n  assumes \"a^2 + c^2 >= 0\"\n  shows \"a^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_for_any_c:\n  fixes a :: real and c :: real\n  assumes \"a^2 + c^2 >= 0\"\n  shows \"a^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "sum_of_squares_greater_than_zero": {"skill_name": "sum_of_squares_greater_than_zero", "marker": "lemma sum_of_squares_greater_than_zero:\n  fixes a b :: real\n  assumes \"a^2 + b^2 > 0\"\n  shows \"a \\<noteq> 0 \\<or> b \\<noteq> 0\"\nproof -\n  have \"a^2 + b^2 >= 0\" by (simp add: sum_of_non_negative_squares)\n  then show ?thesis\n  proof (cases \"a = 0\")\n    case True\n    then have \"b^2 > 0\" using assms by simp\n    thus ?thesis by simp\n  next\n    case False\n    then have \"a^2 > 0\" using assms by simp\n    thus ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_greater_than_zero:\n  fixes a b :: real\n  assumes \"a^2 + b^2 > 0\"\n  shows \"a \\<noteq> 0 \\<or> b \\<noteq> 0\"\nproof -\n  have \"a^2 + b^2 >= 0\" by (simp add: sum_of_non_negative_squares)\n  then show ?thesis\n  proof (cases \"a = 0\")\n    case True\n    then have \"b^2 > 0\" using assms by simp\n    thus ?thesis by simp\n  next\n    case False\n    then have \"a^2 > 0\" using assms by simp\n    thus ?thesis by simp\n  qed\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "non_negative_squaresV5": {"skill_name": "non_negative_squaresV5", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then show \"b^2 >= 0\" \n  proof (cases \"b >= 0\")\n    case True\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"b < 0\" by simp\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"a^2 >= 0\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\n  have \"b^2 = b * b\" by (simp add: power2_eq_square)\n  then show \"b^2 >= 0\" \n  proof (cases \"b >= 0\")\n    case True\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"b < 0\" by simp\n    then have \"b * b >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expression": {"skill_name": "minimum_value_expression", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2\" \n  proof -\n    have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n    then have \"(x * y - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n    have \"0 \\<le> (x * y - 1)^2 + (x + y)^2\" by simp\n    have \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n      by sos\n    also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      using power2_eq_square by (simp add: algebra_simps)\n    ultimately show ?thesis by (simp add: zero_le_power)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> (x * y - 1)^2 + (x + y)^2\" \n  proof -\n    have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n    then have \"(x * y - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n    have \"0 \\<le> (x * y - 1)^2 + (x + y)^2\" by simp\n    have \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n      by sos\n    also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      using power2_eq_square by (simp add: algebra_simps)\n    ultimately show ?thesis by (simp add: zero_le_power)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV6": {"skill_name": "non_negative_squaresV6", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by sos\n  thus \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by sos\n  thus \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by sos\n  thus \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by sos\n  thus \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV7": {"skill_name": "non_negative_squaresV7", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by sos\n  hence \"0 \\<le> x^2\" \n    by (cases \"x \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  moreover\n  have \"y^2 = y * y\" by sos\n  hence \"0 \\<le> y^2\" \n    by (cases \"y \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  ultimately show \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by blast+\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by sos\n  hence \"0 \\<le> x^2\" \n    by (cases \"x \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  moreover\n  have \"y^2 = y * y\" by sos\n  hence \"0 \\<le> y^2\" \n    by (cases \"y \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  ultimately show \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by blast+\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV8": {"skill_name": "non_negative_squaresV8", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by auto\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  then have \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by auto\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV9": {"skill_name": "non_negative_squaresV9", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by auto\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by auto\nqed", "origin": "do_request", "update_count": 0}, "non_negativityV8": {"skill_name": "non_negativityV8", "marker": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> 0 + 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negativity:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"(x * y)^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 + (x * y)^2 \\<ge> 0 + 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_quadratic": {"skill_name": "min_quadratic", "marker": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp: power2_eq_square)\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 >= 0\" by (auto simp: power2_eq_square)\n  have \"y^2 >= 0\" by (auto simp: power2_eq_square)\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_quadraticV2": {"skill_name": "min_quadraticV2", "marker": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  have \"y^2 \\<ge> 0\" by auto\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  have \"y^2 \\<ge> 0\" by auto\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV11": {"skill_name": "expand_expressionV11", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" \n      by simp\n    show ?thesis\n      by (simp add: left_side expansion extra_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  show ?thesis\n    using combined_left right_side by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" \n      by simp\n    show ?thesis\n      by (simp add: left_side expansion extra_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  show ?thesis\n    using combined_left right_side by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_squareV5": {"skill_name": "expand_squareV5", "marker": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have left_side: \"(x + y)^2 = (x + y) * (x + y)\" \n    by sos\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by sos\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma expand_square:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have left_side: \"(x + y)^2 = (x + y) * (x + y)\" \n    by sos\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by sos\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "min_sum_of_squares": {"skill_name": "min_sum_of_squares", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by (simp add: non_negative_squares)\n  have \"b^2 >= 0\" by (simp add: non_negative_squares)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by sos\n  thus ?thesis \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by (simp add: non_negative_squares)\n  have \"b^2 >= 0\" by (simp add: non_negative_squares)\n  thus \"a^2 + b^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negative": {"skill_name": "sum_of_squares_non_negative", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: non_negative_square)\n  have \"y^2 >= 0\" by (simp add: non_negative_square)\n  thus \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_square:\n  fixes a :: real\n  shows \"a^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: non_negative_square)\n  have \"y^2 >= 0\" by (simp add: non_negative_square)\n  thus \"x^2 + y^2 >= 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_square": {"skill_name": "non_negative_square", "marker": "lemma non_negative_square:\n  fixes a :: real\n  shows \"a^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"a^2 \\<ge> 0\" by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_square:\n  fixes a :: real\n  shows \"a^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"a^2 \\<ge> 0\" by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV2": {"skill_name": "sum_of_squares_non_negativeV2", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  have \"y^2 \\<ge> 0\" by auto\n  then show \"x^2 + y^2 \\<ge> 0\" using `x^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  have \"y^2 \\<ge> 0\" by auto\n  then show \"x^2 + y^2 \\<ge> 0\" using `x^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV3": {"skill_name": "sum_of_squares_non_negativeV3", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  hence \"x^2 + y^2 \\<ge> y^2\" by simp\n  thus \"x^2 + y^2 \\<ge> 0\" by (cases \"y \\<ge> 0\") (auto simp: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by auto\n  hence \"x^2 + y^2 \\<ge> y^2\" by simp\n  thus \"x^2 + y^2 \\<ge> 0\" by (cases \"y \\<ge> 0\") (auto simp: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squares_generalized_n": {"skill_name": "non_negative_squares_generalized_n", "marker": "lemma non_negative_squares_generalized_n:\n  fixes a :: \"real list\"\n  assumes \"sum_list (map (\\<lambda>x. x^2) a) >= 0\"\n  shows \"\\<forall>x\\<in>set a. x^2 >= 0\"\nproof -\n  have \"sum_list (map (\\<lambda>x. x^2) a) = sum_list (map (\\<lambda>x. x * x) a)\" by (metis power2_eq_square)\n  thus ?thesis\n    by (induction a) (auto simp: sum_list_def)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized_n:\n  fixes a :: \"real list\"\n  assumes \"sum_list (map (\\<lambda>x. x^2) a) >= 0\"\n  shows \"\\<forall>x\\<in>set a. x^2 >= 0\"\nproof -\n  have \"sum_list (map (\\<lambda>x. x^2) a) = sum_list (map (\\<lambda>x. x * x) a)\" by (metis power2_eq_square)\n  thus ?thesis\n    by (induction a) (auto simp: sum_list_def)\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "min_square": {"skill_name": "min_square", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n    by (cases \"x - y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n    by (cases \"x - y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_squareV2": {"skill_name": "min_squareV2", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\"\n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    moreover have \"x - y = -(y - x)\" by simp\n    ultimately have \"(x - y)^2 = (-(y - x)) * (-(y - x))\" by sos\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\"\n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    moreover have \"x - y = -(y - x)\" by simp\n    ultimately have \"(x - y)^2 = (-(y - x)) * (-(y - x))\" by sos\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_squareV3": {"skill_name": "min_squareV3", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    then have \"-(x - y) > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    then have \"-(x - y) > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV4": {"skill_name": "sum_of_squares_non_negativeV4", "marker": "lemma sum_of_squares_non_negative:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (simp_all add: non_negative_squares)\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed\n\nlemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" using non_negative_power[of a] by simp\n  show \"b^2 >= 0\" using non_negative_power[of b] by simp\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" by (simp_all add: non_negative_squares)\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV3", "update_count": 0}, "non_negative_sum": {"skill_name": "non_negative_sum", "marker": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by simp\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_sum:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by simp\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "non_negative_squaresV3", "update_count": 0}, "non_negative_sum_of_squares": {"skill_name": "non_negative_sum_of_squares", "marker": "lemma non_negative_sum_of_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2 + y^2\"\nproof -\n  have \"x^2 >= 0\" using non_negative_power_general[of x] by simp\n  have \"y^2 >= 0\" using non_negative_power_general[of y] by simp\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_power_general:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma non_negative_sum_of_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2 + y^2\"\nproof -\n  have \"x^2 >= 0\" using non_negative_power_general[of x] by simp\n  have \"y^2 >= 0\" using non_negative_power_general[of y] by simp\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV3", "update_count": 0}, "square_expansion": {"skill_name": "square_expansion", "marker": "lemma square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n     and \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\"\nproof -\n  {\n    have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n    also have \"... = x * (x + y) + y * (x + y)\" by (simp add: algebra_simps)\n    also have \"... = x^2 + x * y + y * x + y^2\" by sos\n    also have \"... = x^2 + 2 * x * y + y^2\" by (simp add: field_simps)\n    finally show \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by simp\n  }\n  {\n    have \"(x * y - 1)^2 = (x * y - 1) * (x * y - 1)\" by sos\n    also have \"... = (x * y) * (x * y) - 2 * (x * y) * 1 + 1 * 1\" by (simp add: algebra_simps)\n    also have \"... = x^2 * y^2 - 2 * x * y + 1\" by sos\n    finally show \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\" by simp\n  }\nqed", "description": "-", "full_code": "lemma square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n     and \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\"\nproof -\n  {\n    have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n    also have \"... = x * (x + y) + y * (x + y)\" by (simp add: algebra_simps)\n    also have \"... = x^2 + x * y + y * x + y^2\" by sos\n    also have \"... = x^2 + 2 * x * y + y^2\" by (simp add: field_simps)\n    finally show \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by simp\n  }\n  {\n    have \"(x * y - 1)^2 = (x * y - 1) * (x * y - 1)\" by sos\n    also have \"... = (x * y) * (x * y) - 2 * (x * y) * 1 + 1 * 1\" by (simp add: algebra_simps)\n    also have \"... = x^2 * y^2 - 2 * x * y + 1\" by sos\n    finally show \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\" by simp\n  }\nqed", "origin": "do_request", "update_count": 0}, "square_expansionV2": {"skill_name": "square_expansionV2", "marker": "lemma square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n     and \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\" \n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\" \n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" \n    by (simp add: algebra_simps)\n  finally show \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by auto\n  have \"(x * y - 1)^2 = (x * y - 1) * (x * y - 1)\" \n    by (simp add: power2_eq_square)\n  also have \"... = (x * y) * (x * y) - 2 * (x * y) + 1\" \n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1\" \n    by sos\n  finally show \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\" \n    by auto\nqed", "description": "-", "full_code": "lemma square_expansion:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n     and \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\" \n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\" \n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" \n    by (simp add: algebra_simps)\n  finally show \"(x + y)^2 = x^2 + 2 * x * y + y^2\" \n    by auto\n  have \"(x * y - 1)^2 = (x * y - 1) * (x * y - 1)\" \n    by (simp add: power2_eq_square)\n  also have \"... = (x * y) * (x * y) - 2 * (x * y) + 1\" \n    by sos\n  also have \"... = x^2 * y^2 - 2 * (x * y) + 1\" \n    by sos\n  finally show \"(x * y - 1)^2 = x^2 * y^2 - 2 * x * y + 1\" \n    by auto\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_sum_of_squares_2": {"skill_name": "nonnegative_sum_of_squares_2", "marker": "lemma nonnegative_sum_of_squares_2:\n  fixes a b c :: real\n  assumes \"a^2 + b^2 + c^2 = 0\"\n  shows \"a = 0 \\<and> b = 0 \\<and> c = 0\"\nproof -\n  have \"a^2 = 0\" using assms by sos\n  then have \"a = 0\" by (metis power_eq_0_iff)\n  have \"b^2 = 0\" using assms by sos\n  then have \"b = 0\" by (metis power_eq_0_iff)\n  have \"c^2 = 0\" using assms by sos\n  then have \"c = 0\" by (metis power_eq_0_iff)\n  show ?thesis by (metis \\<open>a = 0\\<close> \\<open>b = 0\\<close> \\<open>c = 0\\<close>)\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  have \"c^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed\n\nlemma nonnegative_sum_of_squares_2:\n  fixes a b c :: real\n  assumes \"a^2 + b^2 + c^2 = 0\"\n  shows \"a = 0 \\<and> b = 0 \\<and> c = 0\"\nproof -\n  have \"a^2 = 0\" using assms by sos\n  then have \"a = 0\" by (metis power_eq_0_iff)\n  have \"b^2 = 0\" using assms by sos\n  then have \"b = 0\" by (metis power_eq_0_iff)\n  have \"c^2 = 0\" using assms by sos\n  then have \"c = 0\" by (metis power_eq_0_iff)\n  show ?thesis by (metis \\<open>a = 0\\<close> \\<open>b = 0\\<close> \\<open>c = 0\\<close>)\nqed", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "sum_of_squares_inequality": {"skill_name": "sum_of_squares_inequality", "marker": "lemma sum_of_squares_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 2 * a * b\"\nproof -\n  have \"a^2 - 2 * a * b + b^2 = (a - b)^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma sum_of_squares_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 2 * a * b\"\nproof -\n  have \"a^2 - 2 * a * b + b^2 = (a - b)^2\" by (simp add: power2_eq_square algebra_simps)\n  then show ?thesis by sos\nqed", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "multiply_positive": {"skill_name": "multiply_positive", "marker": "lemma multiply_positive:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\"\n  shows \"a * x = b * x\"\nproof -\n  have \"a * x = b * x\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma multiply_positive:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\"\n  shows \"a * x = b * x\"\nproof -\n  have \"a * x = b * x\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed", "origin": "cancle_div", "update_count": 0}, "polynomial_simplification": {"skill_name": "polynomial_simplification", "marker": "lemma polynomial_simplification:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have left_side: \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis\n    by simp\nqed", "description": "-", "full_code": "lemma polynomial_simplification:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have left_side: \"(x + y)^2 = (x + y) * (x + y)\" \n    by (simp add: power2_eq_square)\n  also have \"... = x * (x + y) + y * (x + y)\"\n    by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\"\n    by sos\n  also have \"... = x^2 + 2 * x * y + y^2\"\n    by (simp add: field_simps)\n  finally show ?thesis\n    by simp\nqed", "origin": "do_request", "update_count": 0}, "non_zero_times_inverse_generalized": {"skill_name": "non_zero_times_inverse_generalized", "marker": "lemma non_zero_times_inverse_generalized:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"c * (1 / a) = c / a\"\nproof -\n  have \"c * (1 / a) = (c * 1) / a\" by (simp add: divide_inverse)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_zero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma non_zero_times_inverse_generalized:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"c * (1 / a) = c / a\"\nproof -\n  have \"c * (1 / a) = (c * 1) / a\" by (simp add: divide_inverse)\n  thus ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "general_non_zero_times_inverse": {"skill_name": "general_non_zero_times_inverse", "marker": "lemma general_non_zero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  by (metis add.commute add_cancel_left_right add_cancel_right_left add_scale_eq_noteq assms crossproduct_eq div_by_1 divide_cancel_right divide_divide_eq_left divide_divide_eq_right divide_eq_0_iff divide_eq_eq divide_eq_eq_1 mult.commute mult_cancel_right2 mult_delta_left non_zero_times_inverse nonzero_divide_mult_cancel_right times_divide_eq_right zero_neq_one)", "description": "-", "full_code": "lemma non_zero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma general_non_zero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  by (metis add.commute add_cancel_left_right add_cancel_right_left add_scale_eq_noteq assms crossproduct_eq div_by_1 divide_cancel_right divide_divide_eq_left divide_divide_eq_right divide_eq_0_iff divide_eq_eq divide_eq_eq_1 mult.commute mult_cancel_right2 mult_delta_left non_zero_times_inverse nonzero_divide_mult_cancel_right times_divide_eq_right zero_neq_one)", "origin": "a_times_vera", "update_count": 0}, "trivial_inequalityV4": {"skill_name": "trivial_inequalityV4", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  then show ?thesis using `0 <= a^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  then show ?thesis using `0 <= a^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "cancel_div_general": {"skill_name": "cancel_div_general", "marker": "lemma cancel_div_general:\n  fixes x a b c :: \"'a::field\"\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: divide_simps)\n  thus ?thesis by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma cancel_div_general:\n  fixes x a b c :: \"'a::field\"\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + x * (b / x) = c * x\"\n    by (simp add: distrib_left)\n  then have \"x * a + b = c * x\"\n    using assms(1) by (simp add: divide_simps)\n  thus ?thesis by (auto simp: field_simps)\nqed", "origin": "cancel_divV2", "update_count": 0}, "cancel_div_generalV2": {"skill_name": "cancel_div_generalV2", "marker": "lemma cancel_div_general:\n  fixes x a b c :: \"'a::field\"\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + b = c * x\" \n    by (metis add.commute add_divide_eq_if_simps(2) add_right_imp_eq add_scale_eq_noteq assms(1) assms(2) divide_cancel_right mult.commute mult.left_commute mult_delta_left mult_right_cancel nonzero_eq_divide_eq times_divide_eq_left)\n  thus ?thesis using assms(1) by (auto simp: field_simps)\nqed", "description": "-", "full_code": "lemma cancel_div_general:\n  fixes x a b c :: \"'a::field\"\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\"\n    using assms(2) by (simp)\n  then have \"x * a + b = c * x\" \n    by (metis add.commute add_divide_eq_if_simps(2) add_right_imp_eq add_scale_eq_noteq assms(1) assms(2) divide_cancel_right mult.commute mult.left_commute mult_delta_left mult_right_cancel nonzero_eq_divide_eq times_divide_eq_left)\n  thus ?thesis using assms(1) by (auto simp: field_simps)\nqed", "origin": "cancel_divV2", "update_count": 0}, "non_negative_squares_for_any_c_extended": {"skill_name": "non_negative_squares_for_any_c_extended", "marker": "lemma non_negative_squares_for_any_c_extended:\n  fixes a b c :: real\n  assumes \"a^2 + b^2 + c^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_for_any_c_extended:\n  fixes a b c :: real\n  assumes \"a^2 + b^2 + c^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negative_squares_for_any_c", "update_count": 0}, "sum_of_squares_non_negativity": {"skill_name": "sum_of_squares_non_negativity", "marker": "lemma sum_of_squares_non_negativity:\n  fixes a b :: real\n  shows \"0 <= a^2 + b^2\"\nproof -\n  have \"a^2 >= 0\" using non_negative_squares_for_any_c(1) by simp\n  have \"b^2 >= 0\" using non_negative_squares_for_any_c(2) by simp\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_for_any_c:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  then show \"a^2 >= 0\"\n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  then show \"b^2 >= 0\"\n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_non_negativity:\n  fixes a b :: real\n  shows \"0 <= a^2 + b^2\"\nproof -\n  have \"a^2 >= 0\" using non_negative_squares_for_any_c(1) by simp\n  have \"b^2 >= 0\" using non_negative_squares_for_any_c(2) by simp\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squares_for_any_c", "update_count": 0}, "non_negative_squares_for_any_c_and_d": {"skill_name": "non_negative_squares_for_any_c_and_d", "marker": "lemma non_negative_squares_for_any_c_and_d:\n  fixes a :: real and c :: real and d :: real\n  assumes \"a^2 + c^2 >= 0\" \"d >= 0\"\n  shows \"a^2 >= 0\" and \"c^2 >= 0\" and \"d^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"d^2 = d * d\" by sos\n  thus \"d^2 >= 0\" \n    using assms by (cases \"d >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_for_any_c_and_d:\n  fixes a :: real and c :: real and d :: real\n  assumes \"a^2 + c^2 >= 0\" \"d >= 0\"\n  shows \"a^2 >= 0\" and \"c^2 >= 0\" and \"d^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"c^2 = c * c\" by sos\n  thus \"c^2 >= 0\" \n    by (cases \"c >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"d^2 = d * d\" by sos\n  thus \"d^2 >= 0\" \n    using assms by (cases \"d >= 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negative_squares_for_any_c", "update_count": 0}, "multiply_with_variable_generalized": {"skill_name": "multiply_with_variable_generalized", "marker": "lemma multiply_with_variable_generalized:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\" \"c > 0\"\n  shows \"a * (x * c) = b * (x * c)\"\nproof -\n  have \"a * (x * c) = b * (x * c)\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma multiply_with_variable:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\"\n  shows \"a * x = b * x\"\nproof -\n  have \"a * x = b * x\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed\n\nlemma multiply_with_variable_generalized:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\" \"c > 0\"\n  shows \"a * (x * c) = b * (x * c)\"\nproof -\n  have \"a * (x * c) = b * (x * c)\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed", "origin": "multiply_positive", "update_count": 0}, "sum_of_squares_non_negative_general": {"skill_name": "sum_of_squares_non_negative_general", "marker": "lemma sum_of_squares_non_negative_general:\n  fixes x y :: real\n  assumes \"x = a\" and \"y = b\"  \n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" using assms by auto\n  have \"b^2 \\<ge> 0\" using assms by auto\n  then show \"x^2 + y^2 \\<ge> 0\" using `a^2 \\<ge> 0` `b^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_general:\n  fixes x y :: real\n  assumes \"x = a\" and \"y = b\"  \n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" using assms by auto\n  have \"b^2 \\<ge> 0\" using assms by auto\n  then show \"x^2 + y^2 \\<ge> 0\" using `a^2 \\<ge> 0` `b^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_squares_non_negativeV2", "update_count": 0}, "sum_of_squares_non_negative_parametrized": {"skill_name": "sum_of_squares_non_negative_parametrized", "marker": "lemma sum_of_squares_non_negative_parametrized:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then show \"a^2 + b^2 \\<ge> 0\" using `a^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_parametrized:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then show \"a^2 + b^2 \\<ge> 0\" using `a^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_squares_non_negativeV2", "update_count": 0}, "general_non_zero_times_inverseV2": {"skill_name": "general_non_zero_times_inverseV2", "marker": "lemma general_non_zero_times_inverse:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  using assms by auto", "description": "-", "full_code": "lemma non_zero_times_inverse:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\n  by (simp add: assms)\n\nlemma general_non_zero_times_inverse:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  using assms by auto", "origin": "general_non_zero_times_inverse", "update_count": 0}, "product_of_non_zero": {"skill_name": "product_of_non_zero", "marker": "lemma product_of_non_zero:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\"\n  shows \"a * b \\<noteq> 0\"\n  using assms by auto", "description": "-", "full_code": "lemma product_of_non_zero:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\"\n  shows \"a * b \\<noteq> 0\"\n  using assms by auto", "origin": "general_non_zero_times_inverse", "update_count": 0}, "non_zero_multiplication": {"skill_name": "non_zero_multiplication", "marker": "lemma non_zero_multiplication:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\nproof -\n  have \"b = (a * (b / a))\" using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_zero_multiplication:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\nproof -\n  have \"b = (a * (b / a))\" using assms by auto\n  thus ?thesis by simp\nqed", "origin": "general_non_zero_times_inverse", "update_count": 0}, "non_zero_addition": {"skill_name": "non_zero_addition", "marker": "lemma non_zero_addition:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a + (-a) = 0\"\n  by (simp add: assms)", "description": "-", "full_code": "lemma non_zero_addition:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a + (-a) = 0\"\n  by (simp add: assms)", "origin": "general_non_zero_times_inverse", "update_count": 0}, "non_zero_multiplicationV2": {"skill_name": "non_zero_multiplicationV2", "marker": "lemma non_zero_multiplication:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  using non_zero_division[of a b] assms by auto", "description": "-", "full_code": "lemma non_zero_division:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"b / a * a = b\"\nproof -\n  have \"b / a * a = b\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed\n\nlemma non_zero_multiplication:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a * (b / a) = b\"\n  using non_zero_division[of a b] assms by auto", "origin": "general_non_zero_times_inverse", "update_count": 0}, "non_zero_division": {"skill_name": "non_zero_division", "marker": "lemma non_zero_division:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"b / a * a = b\"\nproof -\n  have \"b / a * a = b\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_zero_division:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"b / a * a = b\"\nproof -\n  have \"b / a * a = b\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "general_non_zero_times_inverse", "update_count": 0}, "min_of_non_negativesV5": {"skill_name": "min_of_non_negativesV5", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b >= 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "cancel_division_real": {"skill_name": "cancel_division_real", "marker": "lemma cancel_division_real:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + b = c * x\" using assms(1) by (simp add: distrib_left)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma cancel_division_real:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + b = c * x\" using assms(1) by (simp add: distrib_left)\n  thus ?thesis by sos\nqed", "origin": "cancle_div", "update_count": 0}, "cancel_division_with_positive": {"skill_name": "cancel_division_with_positive", "marker": "lemma cancel_division_with_positive:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + (b * (x / x)) = c * x\" by sos\n  thus ?thesis using assms(1) by (simp add: mult.commute)\nqed", "description": "-", "full_code": "lemma cancel_division_with_positive:\n  fixes x a b c :: real\n  assumes \"x > 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + (b * (x / x)) = c * x\" by sos\n  thus ?thesis using assms(1) by (simp add: mult.commute)\nqed", "origin": "cancle_div", "update_count": 0}, "extended_trivial_inequality": {"skill_name": "extended_trivial_inequality", "marker": "lemma extended_trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\" and \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  then show \"a^2 + b^2 >= 0\" using `0 <= a^2` by (simp add: add_nonneg_nonneg)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  then show \"a^2 + b^2 + c^2 >= 0\" using `0 <= a^2` `0 <= b^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma extended_trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\" and \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  then show \"a^2 + b^2 >= 0\" using `0 <= a^2` by (simp add: add_nonneg_nonneg)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  then show \"a^2 + b^2 + c^2 >= 0\" using `0 <= a^2` `0 <= b^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "extended_trivial_inequalityV2": {"skill_name": "extended_trivial_inequalityV2", "marker": "lemma extended_trivial_inequality:\n  fixes a b :: real and n :: nat\n  shows \"a^2 + b^2 + (a + b)^2 * (n - 1) >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= (a + b)^2\" by (simp add: power2_eq_square)\n  then show ?thesis using `0 <= a^2` `0 <= b^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma extended_trivial_inequality:\n  fixes a b :: real and n :: nat\n  shows \"a^2 + b^2 + (a + b)^2 * (n - 1) >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= (a + b)^2\" by (simp add: power2_eq_square)\n  then show ?thesis using `0 <= a^2` `0 <= b^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "min_squareV4": {"skill_name": "min_squareV4", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  moreover have \"x - y >= 0 \\<or> x - y < 0\" by auto\n  ultimately show \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then have \"(x - y)^2 >= 0\" by (simp add: mult_nonneg_nonneg)\n    thus ?thesis by simp\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"(x - y)^2 >= 0\" by (simp add: mult_nonneg_nonneg)\n    thus ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  moreover have \"x - y >= 0 \\<or> x - y < 0\" by auto\n  ultimately show \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then have \"(x - y)^2 >= 0\" by (simp add: mult_nonneg_nonneg)\n    thus ?thesis by simp\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"(x - y)^2 >= 0\" by (simp add: mult_nonneg_nonneg)\n    thus ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "min_squareV5": {"skill_name": "min_squareV5", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then have \"x - y >= 0\" by simp\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"x - y = -(y - x)\" by (simp add: algebra_simps)\n    have \"0 <= (y - x)\" by (metis \\<open>x - y < 0\\<close> diff_ge_0_iff_ge dual_order.order_iff_strict less_iff_diff_less_0)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then have \"x - y >= 0\" by simp\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"x - y = -(y - x)\" by (simp add: algebra_simps)\n    have \"0 <= (y - x)\" by (metis \\<open>x - y < 0\\<close> diff_ge_0_iff_ge dual_order.order_iff_strict less_iff_diff_less_0)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "nonneg_sum_of_four_squares": {"skill_name": "nonneg_sum_of_four_squares", "marker": "lemma nonneg_sum_of_four_squares:\n  fixes a b c d :: real\n  shows \"a^2 + b^2 + c^2 + d^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  have \"0 <= d^2\" by (simp add: power2_eq_square)\n  thus ?thesis by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma nonneg_sum_of_four_squares:\n  fixes a b c d :: real\n  shows \"a^2 + b^2 + c^2 + d^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  have \"0 <= d^2\" by (simp add: power2_eq_square)\n  thus ?thesis by (simp add: add_nonneg_nonneg add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "sum_of_squares_property": {"skill_name": "sum_of_squares_property", "marker": "lemma sum_of_squares_property:\n  fixes a b c d :: real\n  assumes \"a^2 + b^2 = c^2 + d^2\"\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_property:\n  fixes a b c d :: real\n  assumes \"a^2 + b^2 = c^2 + d^2\"\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "nonneg_sum_of_squares_with_condition": {"skill_name": "nonneg_sum_of_squares_with_condition", "marker": "lemma nonneg_sum_of_squares_with_condition:\n  fixes a b :: real\n  assumes \"a + b = c\"\n  shows \"a^2 + b^2 >= 0\"\n  using nonneg_sum_of_squares by auto", "description": "-", "full_code": "lemma nonneg_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed\n\nlemma nonneg_sum_of_squares_with_condition:\n  fixes a b :: real\n  assumes \"a + b = c\"\n  shows \"a^2 + b^2 >= 0\"\n  using nonneg_sum_of_squares by auto", "origin": "trivial_inequalityV4", "update_count": 0}, "nonneg_sum_of_squares_for_three": {"skill_name": "nonneg_sum_of_squares_for_three", "marker": "lemma nonneg_sum_of_squares_for_three:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonneg_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed\n\nlemma nonneg_sum_of_squares_for_three:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  have \"0 <= c^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "nonneg_sum_of_squares": {"skill_name": "nonneg_sum_of_squares", "marker": "lemma nonneg_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonneg_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 <= a^2\" by (simp add: power2_eq_square)\n  have \"0 <= b^2\" by (simp add: power2_eq_square)\n  thus ?thesis by simp\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "nonneg_sq_sum": {"skill_name": "nonneg_sq_sum", "marker": "lemma nonneg_sq_sum:\n  fixes a b c :: real\n  shows \"c^2 = a^2 + b^2 \\<Longrightarrow> c >= 0 \\<Longrightarrow> a^2 + b^2 >= 0\"\nproof -\n  assume \"c^2 = a^2 + b^2\" \"c >= 0\"\n  hence \"0 <= c^2\" by (simp add: power2_eq_square)\n  thus \"a^2 + b^2 >= 0\" using `c^2 = a^2 + b^2` by simp\nqed", "description": "-", "full_code": "lemma nonneg_sq_sum:\n  fixes a b c :: real\n  shows \"c^2 = a^2 + b^2 \\<Longrightarrow> c >= 0 \\<Longrightarrow> a^2 + b^2 >= 0\"\nproof -\n  assume \"c^2 = a^2 + b^2\" \"c >= 0\"\n  hence \"0 <= c^2\" by (simp add: power2_eq_square)\n  thus \"a^2 + b^2 >= 0\" using `c^2 = a^2 + b^2` by simp\nqed", "origin": "trivial_inequalityV4", "update_count": 0}, "min_value": {"skill_name": "min_value", "marker": "lemma min_value:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\n  proof -\n    have \"0 \\<le> ((x * y) - 1)^2\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n    then have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n      by (simp add: add_nonneg_nonneg)\n    have \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n      by sos\n    also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by sos\n    have \"((x * y) - 1)^2 + (x + y)^2 - 1 = (x^2 * y^2) + x^2 + y^2 + 1 - 1\"\n      by sos\n    thus ?thesis\n      by sos\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_value:\n  fixes x y :: real\n  shows \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\nproof -\n  have \"1 \\<le> ((x * y) - 1)^2 + (x + y)^2\"\n  proof -\n    have \"0 \\<le> ((x * y) - 1)^2\" by (simp add: power2_eq_square)\n    have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n    then have \"((x * y) - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n      by (simp add: add_nonneg_nonneg)\n    have \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n      by sos\n    also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by sos\n    have \"((x * y) - 1)^2 + (x + y)^2 - 1 = (x^2 * y^2) + x^2 + y^2 + 1 - 1\"\n      by sos\n    thus ?thesis\n      by sos\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV5": {"skill_name": "sum_of_squares_non_negativeV5", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" using non_negative_squares by auto\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  hence \"0 \\<le> y^2\" \n    by (cases \"y >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by auto\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" using non_negative_squares by auto\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV9", "update_count": 0}, "nonneg_square": {"skill_name": "nonneg_square", "marker": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 <= a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus ?thesis\n  proof (cases \"a >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"-a > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "description": "-", "full_code": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 <= a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus ?thesis\n  proof (cases \"a >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"-a > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "origin": "min_squareV3", "update_count": 0}, "add_subtract_generalization": {"skill_name": "add_subtract_generalization", "marker": "lemma add_subtract_generalization:\n  fixes a b c :: real\n  assumes \"a + b = c\" \"b > 0\"\n  shows \"c - b = a\" and \"c = a + b\"\nproof -\n  have \"c - b = (a + b) - b\" using assms(1) by simp\n  then show \"c - b = a\" by simp\n  then show \"c = a + b\" using assms(1) by simp\nqed", "description": "-", "full_code": "lemma add_subtract_generalization:\n  fixes a b c :: real\n  assumes \"a + b = c\" \"b > 0\"\n  shows \"c - b = a\" and \"c = a + b\"\nproof -\n  have \"c - b = (a + b) - b\" using assms(1) by simp\n  then show \"c - b = a\" by simp\n  then show \"c = a + b\" using assms(1) by simp\nqed", "origin": "add_subtract", "update_count": 0}, "expand_expressionV12": {"skill_name": "expand_expressionV12", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 - 2 * (x * y) + 1 + 2 * (x * y)\"\n    by (simp add: expansion)\n  have final_expansion: \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 + y^2 + (x * y)^2 + 1)\"\n    by simp\n  thus ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 + y^2 + (x * y)^2 + 1)\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 - 2 * (x * y) + 1 + 2 * (x * y)\"\n    by (simp add: expansion)\n  have final_expansion: \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 + y^2 + (x * y)^2 + 1)\"\n    by simp\n  thus ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV13": {"skill_name": "expand_expressionV13", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_expansion: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                         (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have cancel_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: cancel_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_expansion: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                         (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have cancel_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: cancel_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV14": {"skill_name": "expand_expressionV14", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_left: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                    (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: extra_terms)\n  qed\n  have right_side: \"(x^2 + y^2 + (x * y)^2 + 1) = (x * y)^2 + x^2 + y^2 + 1\"\n    by simp\n  show ?thesis\n    using final_left right_side by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by (simp)\n  have final_left: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                    (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: extra_terms)\n  qed\n  have right_side: \"(x^2 + y^2 + (x * y)^2 + 1) = (x * y)^2 + x^2 + y^2 + 1\"\n    by simp\n  show ?thesis\n    using final_left right_side by sos\nqed", "origin": "do_request", "update_count": 0}, "nonzero_division_property": {"skill_name": "nonzero_division_property", "marker": "lemma nonzero_division_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\" and \"b * (1 / b) = 1\"\n  by (simp_all add: assms)", "description": "-", "full_code": "lemma nonzero_division_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\" and \"b * (1 / b) = 1\"\n  by (simp_all add: assms)", "origin": "a_times_vera", "update_count": 0}, "division_of_nonzero": {"skill_name": "division_of_nonzero", "marker": "lemma division_of_nonzero:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) / a = b\" and \"(a * b) / b = a\"\nproof -\n  have \"(a * b) / a = b\" using assms by (simp add: field_simps)\n  thus \"(a * b) / a = b\" by simp\nnext\n  have \"(a * b) / b = a\" using assms by (simp add: field_simps)\n  thus \"(a * b) / b = a\" by simp\nqed", "description": "-", "full_code": "lemma division_of_nonzero:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) / a = b\" and \"(a * b) / b = a\"\nproof -\n  have \"(a * b) / a = b\" using assms by (simp add: field_simps)\n  thus \"(a * b) / a = b\" by simp\nnext\n  have \"(a * b) / b = a\" using assms by (simp add: field_simps)\n  thus \"(a * b) / b = a\" by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "division_properties": {"skill_name": "division_properties", "marker": "lemma division_properties:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"c / a = (c * b) / (a * b)\"\nproof -\n  have \"c / a = (c * b) / (a * b)\" by (simp add: assms(1) assms(2) field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma division_properties:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"c / a = (c * b) / (a * b)\"\nproof -\n  have \"c / a = (c * b) / (a * b)\" by (simp add: assms(1) assms(2) field_simps)\n  thus ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "non_zero_divisionV2": {"skill_name": "non_zero_divisionV2", "marker": "lemma non_zero_division:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 = a * (1 / a)\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_zero_division:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"a * (1 / a) = 1\"\nproof -\n  have \"1 = a * (1 / a)\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed", "origin": "a_times_vera", "update_count": 0}, "multiplicative_inverse_property": {"skill_name": "multiplicative_inverse_property", "marker": "lemma multiplicative_inverse_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) * (1 / (a * b)) = 1\"\nproof -\n  have \"1 = (a * b) * (1 / (a * b))\" using assms by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma multiplicative_inverse_property:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\"\n  shows \"(a * b) * (1 / (a * b)) = 1\"\nproof -\n  have \"1 = (a * b) * (1 / (a * b))\" using assms by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "origin": "a_times_vera", "update_count": 0}, "additive_inverses": {"skill_name": "additive_inverses", "marker": "lemma additive_inverses:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a + (-a) = 0\"\nproof -\n  have \"a + (-a) = 0\" using assms by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma additive_inverses:\n  fixes a :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"a + (-a) = 0\"\nproof -\n  have \"a + (-a) = 0\" using assms by (simp add: field_simps)\n  thus ?thesis by auto\nqed", "origin": "a_times_vera", "update_count": 0}, "non_negative_squaresV10": {"skill_name": "non_negative_squaresV10", "marker": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  moreover\n  {\n    assume \"x >= 0\"\n    hence \"0 <= x^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"x < 0\"\n    hence \"x^2 > 0\" by auto\n  }\n  ultimately show \"0 <= x^2\" by (auto simp: le_less_trans)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  moreover\n  {\n    assume \"y >= 0\"\n    hence \"0 <= y^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"y < 0\"\n    hence \"y^2 > 0\" by auto\n  }\n  ultimately show \"0 <= y^2\" by (auto simp: le_less_trans)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x y :: real\n  shows \"0 \\<le> x^2\" and \"0 \\<le> y^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  moreover\n  {\n    assume \"x >= 0\"\n    hence \"0 <= x^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"x < 0\"\n    hence \"x^2 > 0\" by auto\n  }\n  ultimately show \"0 <= x^2\" by (auto simp: le_less_trans)\n  have \"y^2 = y * y\" by (simp add: power2_eq_square)\n  moreover\n  {\n    assume \"y >= 0\"\n    hence \"0 <= y^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"y < 0\"\n    hence \"y^2 > 0\" by auto\n  }\n  ultimately show \"0 <= y^2\" by (auto simp: le_less_trans)\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansion": {"skill_name": "algebraic_expansion", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have cancel_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion)\n  qed\n  show ?thesis\n    using combined_left\n    by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have cancel_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion)\n  qed\n  show ?thesis\n    using combined_left\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV2": {"skill_name": "algebraic_expansionV2", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  have final_expansion: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    using combined_left final_expansion by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  have final_expansion: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    using combined_left final_expansion by sos\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV3": {"skill_name": "algebraic_expansionV3", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have right_side: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side right_side extra_terms)\n  qed\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV4": {"skill_name": "algebraic_expansionV4", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  finally have \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  have right_side: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  also have \"... = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  finally have \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: algebra_simps)\n  have right_side: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    by sos\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV5": {"skill_name": "algebraic_expansionV5", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by simp\n  have final_expansion: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + x^2 + y^2 + 1\" \n      by (simp add: power2_eq_square)\n    thus ?thesis by simp\n  qed\n  show ?thesis \n    using left_side combined_left final_expansion \n    by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) =\n                       (x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * x * y + y^2\"\n    by simp\n  have final_expansion: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + x^2 + y^2 + 1\" \n      by (simp add: power2_eq_square)\n    thus ?thesis by simp\n  qed\n  show ?thesis \n    using left_side combined_left final_expansion \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "algebraic_expansionV6": {"skill_name": "algebraic_expansionV6", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n                       (x * y)^2 + x^2 + y^2 - 2 * (x * y) + 1 + 2 * (x * y)\"\n    by simp\n  have final_expansion: \"(x^2 + y^2 + (x * y)^2 + 1) = (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by (simp add: power2_eq_square)\n    also have \"... + 0 = (x^2 * y^2) + (x^2 + y^2) + 1\" \n      by simp\n    finally show ?thesis by simp\n  qed\n  show ?thesis using left_side combined_left final_expansion by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * x * y + y^2) = \n                       (x * y)^2 + x^2 + y^2 - 2 * (x * y) + 1 + 2 * (x * y)\"\n    by simp\n  have final_expansion: \"(x^2 + y^2 + (x * y)^2 + 1) = (x^2 + y^2 + (x * y)^2 + 1)\"\n  proof -\n    have \"(x * y)^2 + x^2 + y^2 + 1 = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n      by (simp add: power2_eq_square)\n    also have \"... + 0 = (x^2 * y^2) + (x^2 + y^2) + 1\" \n      by simp\n    finally show ?thesis by simp\n  qed\n  show ?thesis using left_side combined_left final_expansion by sos\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV5": {"skill_name": "trivial_inequalityV5", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by simp\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a + b = (0 + a) + (0 + b)\" by simp\n  also have \"... >= 0 + 0\" using assms by (simp add: add_nonneg_nonneg)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV6": {"skill_name": "trivial_inequalityV6", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  from assms have \"a >= 0\" and \"b >= 0\" by simp_all\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma trivial_inequality:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  from assms have \"a >= 0\" and \"b >= 0\" by simp_all\n  then show ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_squareV6": {"skill_name": "min_squareV6", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"(x - y) * (x - y) = (-(x - y)) * (-(x - y))\" by sos\n    also have \"... = (x - y)^2\" by sos\n    finally show ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"(x - y) * (x - y) = (-(x - y)) * (-(x - y))\" by sos\n    also have \"... = (x - y)^2\" by sos\n    finally show ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negative_generalV2": {"skill_name": "sum_of_squares_non_negative_generalV2", "marker": "lemma sum_of_squares_non_negative_general:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" using assms(1) by auto\n  have \"y^2 >= 0\" using assms(2) by auto\n  then show \"x^2 + y^2 >= 0\" using `x^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_general:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" using assms(1) by auto\n  have \"y^2 >= 0\" using assms(2) by auto\n  then show \"x^2 + y^2 >= 0\" using `x^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_squares_non_negativeV2", "update_count": 0}, "sum_of_squares_non_negative_generalized": {"skill_name": "sum_of_squares_non_negative_generalized", "marker": "lemma sum_of_squares_non_negative_generalized:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then show \"a^2 + b^2 \\<ge> 0\" using `a^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative_generalized:\n  fixes a b :: real\n  shows \"a^2 + b^2 \\<ge> 0\"\nproof -\n  have \"a^2 \\<ge> 0\" by auto\n  have \"b^2 \\<ge> 0\" by auto\n  then show \"a^2 + b^2 \\<ge> 0\" using `a^2 \\<ge> 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_squares_non_negativeV2", "update_count": 0}, "multiply_with_variable_n_dimensions": {"skill_name": "multiply_with_variable_n_dimensions", "marker": "lemma multiply_with_variable_n_dimensions:\n  fixes x a b :: \"real list\" and c :: real\n  assumes \"x \\<noteq> []\" \"all_positive x\" \"a = b\"\n  shows \"dot_product a x = dot_product b x\"\nproof -\n  have \"dot_product a x = dot_product b x\" using assms by (simp add: assms(3))\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "fun dot_product :: \"real list \\<Rightarrow> real list \\<Rightarrow> real\" where\n\"dot_product [] [] = 0\" |\n\"dot_product (h1#t1) (h2#t2) = h1 * h2 + dot_product t1 t2\"\n\nfun all_positive :: \"real list \\<Rightarrow> bool\" where\n\"all_positive [] = True\" |\n\"all_positive (h#t) = (h > 0 \\<and> all_positive t)\"\n\nlemma multiply_with_variable:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a = b\"\n  shows \"a * x = b * x\"\nproof -\n  have \"a * x = b * x\" using assms by (simp add: assms(2))\n  thus ?thesis by simp\nqed\n\nlemma multiply_with_variable_n_dimensions:\n  fixes x a b :: \"real list\" and c :: real\n  assumes \"x \\<noteq> []\" \"all_positive x\" \"a = b\"\n  shows \"dot_product a x = dot_product b x\"\nproof -\n  have \"dot_product a x = dot_product b x\" using assms by (simp add: assms(3))\n  thus ?thesis by simp\nqed", "origin": "multiply_with_variable_generalized", "update_count": 0}, "all_positive": {"skill_name": "all_positive", "marker": "fun all_positive :: \"real list \\<Rightarrow> bool\" where\n\"all_positive [] = True\" |\n\"all_positive (h#t) = (h > 0 \\<and> all_positive t)\"", "description": "-", "full_code": "fun all_positive :: \"real list \\<Rightarrow> bool\" where\n\"all_positive [] = True\" |\n\"all_positive (h#t) = (h > 0 \\<and> all_positive t)\"", "origin": "multiply_with_variable_generalized", "update_count": 0}, "dot_product": {"skill_name": "dot_product", "marker": "fun dot_product :: \"real list \\<Rightarrow> real list \\<Rightarrow> real\" where\n\"dot_product [] [] = 0\" |\n\"dot_product (h1#t1) (h2#t2) = h1 * h2 + dot_product t1 t2\"", "description": "-", "full_code": "fun dot_product :: \"real list \\<Rightarrow> real list \\<Rightarrow> real\" where\n\"dot_product [] [] = 0\" |\n\"dot_product (h1#t1) (h2#t2) = h1 * h2 + dot_product t1 t2\"", "origin": "multiply_with_variable_generalized", "update_count": 0}, "min_quadraticV3": {"skill_name": "min_quadraticV3", "marker": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof - \n  have \"x^2 >= 0\" and \"y^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof - \n  have \"x^2 >= 0\" and \"y^2 >= 0\" by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "sum_of_non_negative_squares", "update_count": 0}, "min_of_non_negativesV6": {"skill_name": "min_of_non_negativesV6", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  show ?thesis \n    using `a >= 0` `b >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  have \"a >= 0\" using assms(1) by simp\n  have \"b >= 0\" using assms(2) by simp\n  show ?thesis \n    using `a >= 0` `b >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV7": {"skill_name": "trivial_inequalityV7", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 \\<le> a^2\" using non_negative_power[of a] by simp\n  have \"0 \\<le> b^2\" using non_negative_power[of b] by simp\n  then show ?thesis using `0 \\<le> a^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma trivial_inequality:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"0 \\<le> a^2\" using non_negative_power[of a] by simp\n  have \"0 \\<le> b^2\" using non_negative_power[of b] by simp\n  then show ?thesis using `0 \\<le> a^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squares_generalized": {"skill_name": "non_negative_squares_generalized", "marker": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" using non_negative_power_generalized[of a] assms(1) by simp\n  show \"b^2 >= 0\" using non_negative_power_generalized[of b] assms(2) by simp\nqed", "description": "-", "full_code": "lemma non_negative_power_generalized:\n  fixes x :: real\n  assumes \"x >= 0\"\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed\n\nlemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a >= 0\" \"b >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" using non_negative_power_generalized[of a] assms(1) by simp\n  show \"b^2 >= 0\" using non_negative_power_generalized[of b] assms(2) by simp\nqed", "origin": "non_negative_squaresV3", "update_count": 0}, "nonneg_squareV2": {"skill_name": "nonneg_squareV2", "marker": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a >= 0\")\n    case True\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"a * a >= 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "nonneg_squareV3": {"skill_name": "nonneg_squareV3", "marker": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"0 < a * a\" by sos\n    then show ?thesis by simp\n  qed\nqed", "description": "-", "full_code": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"0 < a * a\" by sos\n    then show ?thesis by simp\n  qed\nqed", "origin": "do_request", "update_count": 0}, "non_negative_sum_of_squaresV2": {"skill_name": "non_negative_sum_of_squaresV2", "marker": "lemma non_negative_sum_of_squares:\n  fixes x y :: real\n  assumes \"0 <= x\" and \"0 <= y\"\n  shows \"0 <= x^2 + y^2\"\nproof -\n  have \"0 <= x^2\" by auto\n  have \"0 <= y^2\" by auto\n  then show ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_sum_of_squares:\n  fixes x y :: real\n  assumes \"0 <= x\" and \"0 <= y\"\n  shows \"0 <= x^2 + y^2\"\nproof -\n  have \"0 <= x^2\" by auto\n  have \"0 <= y^2\" by auto\n  then show ?thesis by simp\nqed", "origin": "non_negative_squaresV10", "update_count": 0}, "sum_of_squares_non_negativeV6": {"skill_name": "sum_of_squares_non_negativeV6", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"0 \\<le> x^2 + y^2\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by (metis non_negative_squares)+\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  {\n    assume \"x >= 0\"\n    hence \"0 <= x^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"x < 0\"\n    hence \"x^2 > 0\" by auto\n  }\n  ultimately show \"0 <= x^2\" by (auto simp: le_less_trans)\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"0 \\<le> x^2 + y^2\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" by (metis non_negative_squares)+\n  thus ?thesis by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV10", "update_count": 0}, "non_negative_squaresV11": {"skill_name": "non_negative_squaresV11", "marker": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  {\n    assume \"x >= 0\"\n    hence \"0 <= x^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"x < 0\"\n    hence \"x^2 > 0\" by auto\n  }\n  ultimately show \"0 <= x^2\" by (auto simp: le_less_trans)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  {\n    assume \"x >= 0\"\n    hence \"0 <= x^2\" by (simp add: mult_nonneg_nonneg)\n  }\n  moreover\n  {\n    assume \"x < 0\"\n    hence \"x^2 > 0\" by auto\n  }\n  ultimately show \"0 <= x^2\" by (auto simp: le_less_trans)\nqed", "origin": "non_negative_squaresV10", "update_count": 0}, "non_negative_squaresV12": {"skill_name": "non_negative_squaresV12", "marker": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 <= x^2\" \n  proof (cases \"x >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then show ?thesis by (simp add: power2_eq_square)\n  qed\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 <= x^2\" \n  proof (cases \"x >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then show ?thesis by (simp add: power2_eq_square)\n  qed\nqed", "origin": "non_negative_squaresV10", "update_count": 0}, "non_negative_sumV2": {"skill_name": "non_negative_sumV2", "marker": "lemma non_negative_sum:\n  fixes x y :: real\n  assumes \"0 \\<le> x\" and \"0 \\<le> y\"\n  shows \"0 \\<le> x + y\"\nproof -\n  have \"x + y = x + 0 + y\" by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_sum:\n  fixes x y :: real\n  assumes \"0 \\<le> x\" and \"0 \\<le> y\"\n  shows \"0 \\<le> x + y\"\nproof -\n  have \"x + y = x + 0 + y\" by simp\n  then show ?thesis using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squaresV10", "update_count": 0}, "expand_square_with_coefficients": {"skill_name": "expand_square_with_coefficients", "marker": "lemma expand_square_with_coefficients:\n  fixes x y c :: real\n  shows \"(c * (x + y))^2 = c^2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"(c * (x + y)) * (c * (x + y)) = c * (x + y) * (c * (x + y))\"\n    by (simp add: algebra_simps)\n  also have \"... = c * (x + y) * (x + y) * c\"\n    by (simp add: algebra_simps)\n  also have \"... = c^2 * ((x + y) * (x + y))\"\n    by sos\n  also have \"... = c^2 * (x^2 + 2 * x * y + y^2)\"\n    by sos\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_square_with_coefficients:\n  fixes x y c :: real\n  shows \"(c * (x + y))^2 = c^2 * (x^2 + 2 * x * y + y^2)\"\nproof -\n  have \"(c * (x + y)) * (c * (x + y)) = c * (x + y) * (c * (x + y))\"\n    by (simp add: algebra_simps)\n  also have \"... = c * (x + y) * (x + y) * c\"\n    by (simp add: algebra_simps)\n  also have \"... = c^2 * ((x + y) * (x + y))\"\n    by sos\n  also have \"... = c^2 * (x^2 + 2 * x * y + y^2)\"\n    by sos\n  finally show ?thesis by sos\nqed", "origin": "expand_square", "update_count": 0}, "nonneg_squareV4": {"skill_name": "nonneg_squareV4", "marker": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a \\<ge> 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"-a > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "description": "-", "full_code": "lemma nonneg_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n  proof (cases \"a \\<ge> 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"-a > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "origin": "do_request", "update_count": 0}, "minimum_value_expressionV2": {"skill_name": "minimum_value_expressionV2", "marker": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  then have \"(x * y - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n    by (simp add: algebra_simps)\n  have \"((x * y)^2 + (x^2 + y^2) + 1 - 1) = (x * y)^2 + (x^2 + y^2)\" \n    by (simp add: algebra_simps)\n  have \"0 \\<le> (x * y)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  have \"((x * y)^2 + (x^2 + y^2) + 1) \\<ge> 1\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by sos\nqed", "description": "-", "full_code": "lemma minimum_value_expression:\n  fixes x y :: real\n  shows \"1 \\<le> (x * y - 1)^2 + (x + y)^2\"\nproof -\n  have \"0 \\<le> (x * y - 1)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> (x + y)^2\" by (simp add: power2_eq_square)\n  then have \"(x * y - 1)^2 + (x + y)^2 \\<ge> 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  have \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  also have \"... = (x^2 * y^2) + (x^2) + (y^2) + 1\" \n    by (simp add: algebra_simps)\n  have \"((x * y)^2 + (x^2 + y^2) + 1 - 1) = (x * y)^2 + (x^2 + y^2)\" \n    by (simp add: algebra_simps)\n  have \"0 \\<le> (x * y)^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  have \"((x * y)^2 + (x^2 + y^2) + 1) \\<ge> 1\" \n    by (simp add: add_nonneg_nonneg)\n  thus ?thesis \n    by sos\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squaresV13": {"skill_name": "non_negative_squaresV13", "marker": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" \n  by simp_all", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" \n  by simp_all", "origin": "expand_square", "update_count": 0}, "min_quadraticV4": {"skill_name": "min_quadraticV4", "marker": "lemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  by (simp add: non_negative_squares)", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a b :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" \n  by simp_all\n\nlemma min_quadratic:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  by (simp add: non_negative_squares)", "origin": "expand_square", "update_count": 0}, "expand_square_general": {"skill_name": "expand_square_general", "marker": "lemma expand_square_general:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b) * (a + b) = a * (a + b) + b * (a + b)\"\n    by (simp add: algebra_simps)\n  also have \"... = a^2 + a * b + b * a + b^2\"\n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_square_general:\n  fixes a b :: real\n  shows \"(a + b)^2 = a^2 + 2 * a * b + b^2\"\nproof -\n  have \"(a + b) * (a + b) = a * (a + b) + b * (a + b)\"\n    by (simp add: algebra_simps)\n  also have \"... = a^2 + a * b + b * a + b^2\"\n    by sos\n  also have \"... = a^2 + 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "origin": "expand_square", "update_count": 0}, "square_difference": {"skill_name": "square_difference", "marker": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * (a - b) - b * (a - b)\"\n    by (simp add: algebra_simps)\n  also have \"... = a^2 - a * b - b * a + b^2\"\n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "description": "-", "full_code": "lemma square_difference:\n  fixes a b :: real\n  shows \"(a - b)^2 = a^2 - 2 * a * b + b^2\"\nproof -\n  have \"(a - b) * (a - b) = a * (a - b) - b * (a - b)\"\n    by (simp add: algebra_simps)\n  also have \"... = a^2 - a * b - b * a + b^2\"\n    by sos\n  also have \"... = a^2 - 2 * a * b + b^2\"\n    by (simp add: algebra_simps)\n  finally show ?thesis by sos\nqed", "origin": "expand_square", "update_count": 0}, "sum_of_squares_non_negativeV7": {"skill_name": "sum_of_squares_non_negativeV7", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  thus \"x^2 + y^2 \\<ge> 0\" using `0 \\<le> x^2` `0 \\<le> y^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  thus \"x^2 + y^2 \\<ge> 0\" using `0 \\<le> x^2` `0 \\<le> y^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_square_sum": {"skill_name": "min_square_sum", "marker": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  thus \"x^2 + y^2 \\<ge> 0\" using `0 \\<le> x^2` `0 \\<le> y^2` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  thus \"x^2 + y^2 \\<ge> 0\" using `0 \\<le> x^2` `0 \\<le> y^2` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_square_sumV2": {"skill_name": "min_square_sumV2", "marker": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  moreover have \"x^2 + y^2 \\<ge> 0 + 0\" using `0 \\<le> x^2` `0 \\<le> y^2`\n    by (simp add: add_nonneg_nonneg)\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" by (simp add: power2_eq_square)\n  have \"0 \\<le> y^2\" by (simp add: power2_eq_square)\n  moreover have \"x^2 + y^2 \\<ge> 0 + 0\" using `0 \\<le> x^2` `0 \\<le> y^2`\n    by (simp add: add_nonneg_nonneg)\n  ultimately show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_square_sumV3": {"skill_name": "min_square_sumV3", "marker": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "expand_square_with_diff": {"skill_name": "expand_square_with_diff", "marker": "lemma expand_square_with_diff:\n  fixes x y :: real\n  shows \"(x + y)^2 - (x - y)^2 = 4 * x * y\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  have \"(x - y)^2 = x^2 - 2 * x * y + y^2\" by sos\n  then show ?thesis by sos\nqed", "description": "-", "full_code": "lemma expand_square_with_diff:\n  fixes x y :: real\n  shows \"(x + y)^2 - (x - y)^2 = 4 * x * y\"\nproof -\n  have \"(x + y)^2 = x^2 + 2 * x * y + y^2\" by sos\n  have \"(x - y)^2 = x^2 - 2 * x * y + y^2\" by sos\n  then show ?thesis by sos\nqed", "origin": "expand_squareV2", "update_count": 0}, "expand_square_with_coefficientsV2": {"skill_name": "expand_square_with_coefficientsV2", "marker": "lemma expand_square_with_coefficients:\n  fixes x y a b :: real\n  shows \"(a * x + b * y)^2 = a^2 * x^2 + 2 * a * b * x * y + b^2 * y^2\"\nproof -\n  have \"(a * x + b * y)^2 = (a * x + b * y) * (a * x + b * y)\" by sos\n  also have \"... = a * x * (a * x + b * y) + b * y * (a * x + b * y)\" by sos\n  also have \"... = a^2 * x^2 + a * b * x * y + b * a * y * x + b^2 * y^2\" by sos\n  also have \"... = a^2 * x^2 + 2 * a * b * x * y + b^2 * y^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma expand_square_with_coefficients:\n  fixes x y a b :: real\n  shows \"(a * x + b * y)^2 = a^2 * x^2 + 2 * a * b * x * y + b^2 * y^2\"\nproof -\n  have \"(a * x + b * y)^2 = (a * x + b * y) * (a * x + b * y)\" by sos\n  also have \"... = a * x * (a * x + b * y) + b * y * (a * x + b * y)\" by sos\n  also have \"... = a^2 * x^2 + a * b * x * y + b * a * y * x + b^2 * y^2\" by sos\n  also have \"... = a^2 * x^2 + 2 * a * b * x * y + b^2 * y^2\" by (simp add: algebra_simps)\n  finally show ?thesis by simp\nqed", "origin": "expand_squareV2", "update_count": 0}, "non_negative_minimum": {"skill_name": "non_negative_minimum", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b + c >= 0 + 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b + c >= 0 + 0 + 0\" \n    using assms by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimumV2": {"skill_name": "non_negative_minimumV2", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  moreover have \"c >= 0\" using assms(3) by simp\n  ultimately have \"a + b + c >= 0\" by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  moreover have \"c >= 0\" using assms(3) by simp\n  ultimately have \"a + b + c >= 0\" by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by simp\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimumV3": {"skill_name": "non_negative_minimumV3", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  moreover have \"c >= 0\" using assms(3) by assumption\n  ultimately have \"a + b + c >= 0\" by (simp add: add_nonneg_nonneg)\n  then show ?thesis using `a + b + c >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  moreover have \"c >= 0\" using assms(3) by assumption\n  ultimately have \"a + b + c >= 0\" by (simp add: add_nonneg_nonneg)\n  then show ?thesis using `a + b + c >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimumV4": {"skill_name": "non_negative_minimumV4", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b + c >= 0\" \n    using add_nonneg_nonneg[of a b] \n    using add_nonneg_nonneg[of _ c] \n    by (metis assms)\n  then have \"a + b + c + 1 >= 0 + 1\" by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b + c >= 0\" \n    using add_nonneg_nonneg[of a b] \n    using add_nonneg_nonneg[of _ c] \n    by (metis assms)\n  then have \"a + b + c + 1 >= 0 + 1\" by auto\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "add_subtract_with_d": {"skill_name": "add_subtract_with_d", "marker": "lemma add_subtract_with_d:\n  fixes a b c d :: real\n  assumes \"a + b = c\" \"c > 0\" \"b > 0\" \"d > 0\"\n  shows \"c - b + d = a + d\"\nproof -\n  have \"c - b + d = (a + b) - b + d\" using assms(1) by simp\n  also have \"... = a + (b - b) + d\" by simp\n  also have \"... = a + d\" by simp\n  finally show ?thesis .\nqed", "description": "-", "full_code": "lemma add_subtract_with_d:\n  fixes a b c d :: real\n  assumes \"a + b = c\" \"c > 0\" \"b > 0\" \"d > 0\"\n  shows \"c - b + d = a + d\"\nproof -\n  have \"c - b + d = (a + b) - b + d\" using assms(1) by simp\n  also have \"... = a + (b - b) + d\" by simp\n  also have \"... = a + d\" by simp\n  finally show ?thesis .\nqed", "origin": "add_subtract", "update_count": 0}, "add_subtract_generalized": {"skill_name": "add_subtract_generalized", "marker": "lemma add_subtract_generalized:\n  fixes a b c d :: real\n  assumes \"a + b = c\" \"c - d = a\" \"b > 0\" \"d > 0\"\n  shows \"c - b - d = a - d\"\nproof -\n  have \"c - b = a\" using assms(1) by simp\n  hence \"c - b - d = a - d\" using assms(3) by simp\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma add_subtract_generalized:\n  fixes a b c d :: real\n  assumes \"a + b = c\" \"c - d = a\" \"b > 0\" \"d > 0\"\n  shows \"c - b - d = a - d\"\nproof -\n  have \"c - b = a\" using assms(1) by simp\n  hence \"c - b - d = a - d\" using assms(3) by simp\n  thus ?thesis by simp\nqed", "origin": "add_subtract", "update_count": 0}, "min_of_non_negatives_with_parameterization_generalized": {"skill_name": "min_of_non_negatives_with_parameterization_generalized", "marker": "lemma min_of_non_negatives_with_parameterization_generalized:\n  fixes a b c :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"c = a + b \\<Longrightarrow> c >= 0\"\nproof -\n  assume \"c = a + b\"\n  then show \"c >= 0\" using assms by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma min_of_non_negatives_with_parameterization_generalized:\n  fixes a b c :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"c = a + b \\<Longrightarrow> c >= 0\"\nproof -\n  assume \"c = a + b\"\n  then show \"c >= 0\" using assms by (simp add: add_nonneg_nonneg)\nqed", "origin": "min_of_non_negatives_with_parameterization", "update_count": 0}, "non_negative_squares_generalizedV2": {"skill_name": "non_negative_squares_generalizedV2", "marker": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a \\<in> \\<real>\" and \"b \\<in> \\<real>\"\n  shows \"a^2 \\<ge> 0\" and \"b^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 \\<ge> 0\" \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 \\<ge> 0\" \n    by (cases \"b \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a \\<in> \\<real>\" and \"b \\<in> \\<real>\"\n  shows \"a^2 \\<ge> 0\" and \"b^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 \\<ge> 0\" \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 \\<ge> 0\" \n    by (cases \"b \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negativity_extendedV2", "update_count": 0}, "non_negativity_extendedV3": {"skill_name": "non_negativity_extendedV3", "marker": "theorem non_negativity_extended:\n  fixes x y :: real\n  assumes \"x \\<in> \\<real>\" and \"y \\<in> \\<real>\"\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" and \"y^2 \\<ge> 0\" and \"(x * y)^2 \\<ge> 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + (x * y)^2 \\<ge> 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a \\<in> \\<real>\" and \"b \\<in> \\<real>\"\n  shows \"a^2 \\<ge> 0\" and \"b^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 \\<ge> 0\" \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 \\<ge> 0\" \n    by (cases \"b \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\ntheorem non_negativity_extended:\n  fixes x y :: real\n  assumes \"x \\<in> \\<real>\" and \"y \\<in> \\<real>\"\n  shows \"x^2 + y^2 + (x * y)^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" and \"y^2 \\<ge> 0\" and \"(x * y)^2 \\<ge> 0\" \n    by (auto simp: non_negative_squares_generalized)\n  thus \"x^2 + y^2 + (x * y)^2 \\<ge> 0\" \n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negativity_extendedV2", "update_count": 0}, "non_negative_minimumV5": {"skill_name": "non_negative_minimumV5", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b >= 0\" using add_nonneg_nonneg[of a b] \n    by (simp add: assms(1) assms(2))\n  have \"a + b + c >= 0\" using add_nonneg_nonneg[of \"a + b\" c] \n    using `a + b >= 0` `c >= 0` \n    by simp\n  have \"a + b + c + 1 >= 0 + 1\" by (simp add: `a + b + c >= 0`)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a >= 0\" using assms(1) by assumption\n  have \"b >= 0\" using assms(2) by assumption\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b >= 0\" using add_nonneg_nonneg[of a b] \n    by (simp add: assms(1) assms(2))\n  have \"a + b + c >= 0\" using add_nonneg_nonneg[of \"a + b\" c] \n    using `a + b >= 0` `c >= 0` \n    by simp\n  have \"a + b + c + 1 >= 0 + 1\" by (simp add: `a + b + c >= 0`)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimumV6": {"skill_name": "non_negative_minimumV6", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  have \"c >= 0\" using assms(3) by assumption\n  then have \"a + b + c >= 0\" using `a + b >= 0` by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  have \"c >= 0\" using assms(3) by assumption\n  then have \"a + b + c >= 0\" using `a + b >= 0` by (simp add: add_nonneg_nonneg)\n  then have \"a + b + c + 1 >= 0 + 1\" by (simp add: add_nonneg_nonneg)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_squareV7": {"skill_name": "min_squareV7", "marker": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"x - y = -(y - x)\" by (simp add: algebra_simps)\n    have \"0 <= (y - x)\" by (metis \\<open>x - y < 0\\<close> diff_ge_0_iff_ge dual_order.order_iff_strict less_iff_diff_less_0)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma min_square:\n  fixes x y :: real\n  shows \"0 <= (x - y)^2\"\nproof -\n  have \"(x - y)^2 = (x - y) * (x - y)\" by (simp add: power2_eq_square)\n  hence \"0 <= (x - y)^2\" \n  proof (cases \"x - y >= 0\")\n    case True\n    then show ?thesis by (simp add: mult_nonneg_nonneg)\n  next\n    case False\n    then have \"x - y < 0\" by simp\n    hence \"x - y = -(y - x)\" by (simp add: algebra_simps)\n    have \"0 <= (y - x)\" by (metis \\<open>x - y < 0\\<close> diff_ge_0_iff_ge dual_order.order_iff_strict less_iff_diff_less_0)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV8": {"skill_name": "sum_of_squares_non_negativeV8", "marker": "lemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" using non_negative_square by simp\n  have \"0 \\<le> y^2\" using non_negative_square by simp\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_square:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"0 \\<le> a^2\" \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"0 \\<le> x^2\" using non_negative_square by simp\n  have \"0 \\<le> y^2\" using non_negative_square by simp\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_non_negativeV9": {"skill_name": "sum_of_squares_non_negativeV9", "marker": "lemma sum_of_squares_non_negative:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\n    by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 + c^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_generalized:\n  fixes a b :: real\n  assumes \"a^2 + b^2 >= 0\"\n  shows \"a^2 >= 0\" and \"b^2 >= 0\"\nproof -\n  have \"a^2 = a * a\" by sos\n  thus \"a^2 >= 0\" \n    by (cases \"a >= 0\") (auto simp: mult_nonneg_nonneg)\n  have \"b^2 = b * b\" by sos\n  thus \"b^2 >= 0\" \n    by (cases \"b >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_non_negative:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\n    by (auto simp: non_negative_squares_generalized)\n  thus \"a^2 + b^2 + c^2 >= 0\"\n    by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negativity_extended", "update_count": 0}, "nonnegative_sum_of_squares_general": {"skill_name": "nonnegative_sum_of_squares_general", "marker": "lemma nonnegative_sum_of_squares_general:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\n  by (auto simp: power2_eq_square)", "description": "-", "full_code": "lemma nonnegative_sum_of_squares_general:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\n  by (auto simp: power2_eq_square)", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "nonnegative_sum_of_squares_generalV2": {"skill_name": "nonnegative_sum_of_squares_generalV2", "marker": "lemma nonnegative_sum_of_squares_general:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares_general:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "nonnegative_sum_of_squares_three": {"skill_name": "nonnegative_sum_of_squares_three", "marker": "lemma nonnegative_sum_of_squares_three:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\n  using nonnegative_sum_of_squares_general[of a b] by simp", "description": "-", "full_code": "lemma nonnegative_sum_of_squares_general:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" by auto\n  have \"b^2 >= 0\" by auto\n  then show ?thesis using `a^2 >= 0` `b^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed\n\nlemma nonnegative_sum_of_squares_three:\n  fixes a b c :: real\n  shows \"a^2 + b^2 + c^2 >= 0\"\n  using nonnegative_sum_of_squares_general[of a b] by simp", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "nonnegative_sum_of_squares_generalized": {"skill_name": "nonnegative_sum_of_squares_generalized", "marker": "lemma nonnegative_sum_of_squares_generalized:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by simp\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma nonnegative_sum_of_squares_generalized:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by simp\n  then show ?thesis by (simp add: sum_nonneg)\nqed", "origin": "nonnegative_sum_of_squares", "update_count": 0}, "division_property": {"skill_name": "division_property", "marker": "lemma division_property:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a / x = b\"\n  shows \"a = b * x\"\nproof -\n  have \"a = b * x\" using assms by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma division_property:\n  fixes x a b :: real\n  assumes \"x > 0\" \"a / x = b\"\n  shows \"a = b * x\"\nproof -\n  have \"a = b * x\" using assms by auto\n  thus ?thesis by simp\nqed", "origin": "cancel_division_real", "update_count": 0}, "cancel_division_real_extended": {"skill_name": "cancel_division_real_extended", "marker": "lemma cancel_division_real_extended:\n  fixes x a b c d :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\" \"c + d = e\"\n  shows \"a * x + b = e * x - d * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + b = c * x\" using assms(1) by (simp add: distrib_left)\n  then have \"b = c * x - a * x\" by sos\n  then have \"b = (e - d) * x - a * x\" using assms(3) by (simp add: distrib_left)\n  thus ?thesis by sos\nqed", "description": "-", "full_code": "lemma cancel_division_real_extended:\n  fixes x a b c d :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\" \"c + d = e\"\n  shows \"a * x + b = e * x - d * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then have \"x * a + b = c * x\" using assms(1) by (simp add: distrib_left)\n  then have \"b = c * x - a * x\" by sos\n  then have \"b = (e - d) * x - a * x\" using assms(3) by (simp add: distrib_left)\n  thus ?thesis by sos\nqed", "origin": "cancel_division_real", "update_count": 0}, "cancel_division_real_general": {"skill_name": "cancel_division_real_general", "marker": "lemma cancel_division_real_general:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then show ?thesis using assms(1) by sos\nqed", "description": "-", "full_code": "lemma cancel_division_real_general:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"a + b / x = c\"\n  shows \"a * x + b = c * x\"\nproof -\n  have \"x * (a + b / x) = c * x\" using assms(2) by auto\n  then show ?thesis using assms(1) by sos\nqed", "origin": "cancel_division_real", "update_count": 0}, "rearrange_equation": {"skill_name": "rearrange_equation", "marker": "lemma rearrange_equation:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"c * x = a * x + b\"\n  shows \"a + b / x = c\"\nproof -\n  have \"c * x = a * x + b\" using assms(2) by auto\n  then have \"x * (a + b / x) = c * x\" by (auto simp: field_simps)\n  thus ?thesis using assms(1) by auto\nqed", "description": "-", "full_code": "lemma rearrange_equation:\n  fixes x a b c :: real\n  assumes \"x \\<noteq> 0\" \"c * x = a * x + b\"\n  shows \"a + b / x = c\"\nproof -\n  have \"c * x = a * x + b\" using assms(2) by auto\n  then have \"x * (a + b / x) = c * x\" by (auto simp: field_simps)\n  thus ?thesis using assms(1) by auto\nqed", "origin": "cancel_division_real", "update_count": 0}, "algebraic_expansionV7": {"skill_name": "algebraic_expansionV7", "marker": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * (x * y) + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2) = \n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion)\n  qed\n  have right_side: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\" \n    by (simp add: power2_eq_square)\n  show ?thesis\n    using combined_left right_side by sos\nqed", "description": "-", "full_code": "lemma algebraic_expansion:\n  fixes x y :: real\n  shows \"(x * y - 1)^2 + (x + y)^2 = x^2 * y^2 + x^2 + y^2 + 1\"\nproof -\n  have left_side: \"(x * y - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * (x * y) + y^2\"\n    by sos\n  have combined_left: \"((x * y)^2 - 2 * (x * y) + 1) + (x^2 + 2 * (x * y) + y^2) = \n                       (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have \"(- 2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis\n      by (simp add: left_side expansion)\n  qed\n  have right_side: \"x^2 * y^2 + x^2 + y^2 + 1 = (x * y)^2 + x^2 + y^2 + 1\" \n    by (simp add: power2_eq_square)\n  show ?thesis\n    using combined_left right_side by sos\nqed", "origin": "do_request", "update_count": 0}, "min_sum_of_squaresV2": {"skill_name": "min_sum_of_squaresV2", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using non_negative_square[of a] by simp\n  have \"b^2 >= 0\" using non_negative_square[of b] by simp\n  then show \"a^2 + b^2 >= 0\" using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_square:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using non_negative_square[of a] by simp\n  have \"b^2 >= 0\" using non_negative_square[of b] by simp\n  then show \"a^2 + b^2 >= 0\" using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "min_sum_of_squaresV3": {"skill_name": "min_sum_of_squaresV3", "marker": "lemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using non_negative_power[of a] by simp\n  have \"b^2 >= 0\" using non_negative_power[of b] by simp\n  then show \"a^2 + b^2 >= 0\" using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_power:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then have \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\n  thus ?thesis by simp\nqed\n\nlemma min_sum_of_squares:\n  fixes a b :: real\n  shows \"a^2 + b^2 >= 0\"\nproof -\n  have \"a^2 >= 0\" using non_negative_power[of a] by simp\n  have \"b^2 >= 0\" using non_negative_power[of b] by simp\n  then show \"a^2 + b^2 >= 0\" using `a^2 >= 0` by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_squares": {"skill_name": "nonnegative_squares", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  moreover have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  ultimately show \"x^2 + y^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  moreover have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  ultimately show \"x^2 + y^2 >= 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "do_request", "update_count": 0}, "non_negative_squares_any": {"skill_name": "non_negative_squares_any", "marker": "lemma non_negative_squares_any:\n  fixes a b c :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" by (rule non_negative_squares)\n  show \"b^2 >= 0\" by (rule non_negative_squares)\n  show \"c^2 >= 0\" by (rule non_negative_squares)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by sos\n  thus \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma non_negative_squares_any:\n  fixes a b c :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\nproof -\n  show \"a^2 >= 0\" by (rule non_negative_squares)\n  show \"b^2 >= 0\" by (rule non_negative_squares)\n  show \"c^2 >= 0\" by (rule non_negative_squares)\nqed", "origin": "non_negative_squares_for_any_c_extended", "update_count": 0}, "non_negative_squaresV14": {"skill_name": "non_negative_squaresV14", "marker": "lemma non_negative_squares:\n  fixes a b c :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\n  using non_negative_square by auto", "description": "-", "full_code": "lemma non_negative_square:\n  fixes x :: real\n  shows \"x^2 >= 0\"\nproof -\n  have \"x^2 = x * x\" by sos\n  thus \"x^2 >= 0\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma non_negative_squares:\n  fixes a b c :: real\n  shows \"a^2 >= 0\" and \"b^2 >= 0\" and \"c^2 >= 0\"\n  using non_negative_square by auto", "origin": "non_negative_squares_for_any_c_extended", "update_count": 0}, "nonnegative_squaresV2": {"skill_name": "nonnegative_squaresV2", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" \n    by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" and \"y^2 >= 0\" \n    by auto\n  then have \"x^2 + y^2 >= 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_squaresV3": {"skill_name": "nonnegative_squaresV3", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto \n  have \"y^2 >= 0\" by auto \n  then have \"x^2 + y^2 >= 0 + y^2\" by simp \n  also have \"... >= 0\" using `y^2 >= 0` by simp \n  ultimately show \"x^2 + y^2 >= 0\" by simp\nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by auto \n  have \"y^2 >= 0\" by auto \n  then have \"x^2 + y^2 >= 0 + y^2\" by simp \n  also have \"... >= 0\" using `y^2 >= 0` by simp \n  ultimately show \"x^2 + y^2 >= 0\" by simp\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_squaresV4": {"skill_name": "nonnegative_squaresV4", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" \n    by auto\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"0 \\<le> x^2\" and \"0 \\<le> y^2\" \n    by auto\n  then have \"x^2 + y^2 \\<ge> 0 + 0\" by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_squaresV5": {"skill_name": "nonnegative_squaresV5", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" by (simp add: power2_eq_square)\n  have \"y^2 >= 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 >= 0 + 0\" \n    by (simp add: add_nonneg_nonneg)\n  thus \"x^2 + y^2 >= 0\" by simp\nqed", "origin": "do_request", "update_count": 0}, "nonnegative_squaresV6": {"skill_name": "nonnegative_squaresV6", "marker": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"0 <= x^2\" by (simp add: power2_eq_square)  \n  have \"0 <= y^2\" by (simp add: power2_eq_square)  \n  have \"x^2 + y^2 >= 0 + 0\" using `0 <= x^2` `0 <= y^2`\n    by (simp add: add_nonneg_nonneg)  \n  thus \"x^2 + y^2 >= 0\" by simp  \nqed", "description": "-", "full_code": "lemma nonnegative_squares:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"0 <= x^2\" by (simp add: power2_eq_square)  \n  have \"0 <= y^2\" by (simp add: power2_eq_square)  \n  have \"x^2 + y^2 >= 0 + 0\" using `0 <= x^2` `0 <= y^2`\n    by (simp add: add_nonneg_nonneg)  \n  thus \"x^2 + y^2 >= 0\" by simp  \nqed", "origin": "do_request", "update_count": 0}, "expand_expressionV15": {"skill_name": "expand_expressionV15", "marker": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y) - 1)^2 + (x + y)^2 = \n                       (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  have final_left: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                    (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: extra_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    using final_left right_side by sos\nqed", "description": "-", "full_code": "lemma expand_expression:\n  fixes x y :: real\n  shows \"((x * y) - 1)^2 + (x + y)^2 = (x^2 * y^2) + (x^2) + (y^2) + 1\"\nproof -\n  have left_side: \"((x * y) - 1)^2 + (x + y)^2 = (x * y)^2 - 2 * (x * y) + 1 + (x + y)^2\"\n    by sos\n  have expansion: \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\n    by sos\n  have combined_left: \"((x * y) - 1)^2 + (x + y)^2 = \n                       (x * y)^2 - 2 * (x * y) + 1 + (x^2 + 2 * x * y + y^2)\"\n    by sos\n  have final_left: \"(x * y)^2 - 2 * (x * y) + 1 + x^2 + 2 * (x * y) + y^2 = \n                    (x * y)^2 + x^2 + y^2 + 1\"\n  proof -\n    have extra_terms: \"(-2 * (x * y) + 2 * (x * y)) = 0\" by simp\n    thus ?thesis by (simp add: extra_terms)\n  qed\n  have right_side: \"(x^2 * y^2) + (x^2) + (y^2) + 1 = (x * y)^2 + x^2 + y^2 + 1\"\n    by (simp add: power2_eq_square)\n  show ?thesis\n    using final_left right_side by sos\nqed", "origin": "do_request", "update_count": 0}, "trivial_inequalityV8": {"skill_name": "trivial_inequalityV8", "marker": "lemma trivial_inequality:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  show \"0 \\<le> a^2\" using non_negative_square[of a] by simp\n  show \"0 \\<le> b^2\" using non_negative_square[of b] by simp\nqed", "description": "-", "full_code": "lemma non_negative_square:\n  fixes x :: real\n  shows \"0 \\<le> x^2\"\nproof -\n  have \"x^2 = x * x\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> x^2\" \n    by (cases \"x >= 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma trivial_inequality:\n  fixes a b :: real\n  shows \"0 \\<le> a^2\" and \"0 \\<le> b^2\"\nproof -\n  show \"0 \\<le> a^2\" using non_negative_square[of a] by simp\n  show \"0 \\<le> b^2\" using non_negative_square[of b] by simp\nqed", "origin": "do_request", "update_count": 0}, "polynomial_simplificationV2": {"skill_name": "polynomial_simplificationV2", "marker": "lemma polynomial_simplification:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x * (x + y) + y * (x + y)\" by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\" by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" by (simp add: ac_simps)\n  finally show ?thesis by simp\nqed", "description": "-", "full_code": "lemma polynomial_simplification:\n  fixes x y :: real\n  shows \"(x + y)^2 = x^2 + 2 * x * y + y^2\"\nproof -\n  have \"(x + y)^2 = (x + y) * (x + y)\" by sos\n  also have \"... = x * (x + y) + y * (x + y)\" by (simp add: distrib_right)\n  also have \"... = x^2 + x * y + y * x + y^2\" by sos\n  also have \"... = x^2 + 2 * x * y + y^2\" by (simp add: ac_simps)\n  finally show ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "non_negative_minimumV7": {"skill_name": "non_negative_minimumV7", "marker": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b + c >= 0 + c\" using `a + b >= 0` by auto\n  have \"a + b + c >= c\" by (metis add_increasing assms(1) assms(2) dual_order.refl group_cancel.add1)\n  have \"a + b + c >= 0\" using `a + b + c >= 0 + c` by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\n  have \"a + b + c + 1 >= 0 + 1\" by (metis add.commute add_cancel_right_right add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1 group_cancel.add2 le_add_same_cancel1)\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_negative_minimum:\n  fixes a b c :: real\n  assumes \"a >= 0\" \"b >= 0\" \"c >= 0\"\n  shows \"a + b + c + 1 >= 1\"\nproof -\n  have \"a + b >= 0\" using assms(1) assms(2) by (simp add: add_nonneg_nonneg)\n  have \"c >= 0\" using assms(3) by assumption\n  have \"a + b + c >= 0 + c\" using `a + b >= 0` by auto\n  have \"a + b + c >= c\" by (metis add_increasing assms(1) assms(2) dual_order.refl group_cancel.add1)\n  have \"a + b + c >= 0\" using `a + b + c >= 0 + c` by (metis add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1)\n  have \"a + b + c + 1 >= 0 + 1\" by (metis add.commute add_cancel_right_right add_nonneg_nonneg assms(1) assms(2) assms(3) group_cancel.add1 group_cancel.add2 le_add_same_cancel1)\n  thus ?thesis by simp\nqed", "origin": "do_request", "update_count": 0}, "min_of_non_negativesV7": {"skill_name": "min_of_non_negativesV7", "marker": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  obtain x where \"x = a + b\" by auto\n  have \"x >= 0\" \n  proof -\n    have \"a >= 0\" using assms(1) by simp\n    have \"b >= 0\" using assms(2) by simp\n    thus ?thesis \n      using add_nonneg_nonneg[of a b] by (metis \\<open>x = a + b\\<close> assms(1))\n  qed\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "description": "-", "full_code": "lemma min_of_non_negatives:\n  fixes a b :: real\n  assumes \"a >= 0\" and \"b >= 0\"\n  shows \"a + b >= 0\"\nproof -\n  obtain x where \"x = a + b\" by auto\n  have \"x >= 0\" \n  proof -\n    have \"a >= 0\" using assms(1) by simp\n    have \"b >= 0\" using assms(2) by simp\n    thus ?thesis \n      using add_nonneg_nonneg[of a b] by (metis \\<open>x = a + b\\<close> assms(1))\n  qed\n  thus ?thesis by (metis add_nonneg_nonneg assms(1) assms(2))\nqed", "origin": "do_request", "update_count": 0}, "nonneg_square_sum_general": {"skill_name": "nonneg_square_sum_general", "marker": "lemma nonneg_square_sum_general:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x \\<in> set xs. x^2) >= 0\"\nproof (induction xs)\n  case Nil\n  then show ?case \n    by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (metis sum_nonneg zero_le_power2)\nqed", "description": "-", "full_code": "lemma nonneg_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  by (simp add: power2_eq_square)\n\nlemma nonneg_square_sum_general:\n  fixes xs :: \"real list\"\n  shows \"(\\<Sum>x \\<in> set xs. x^2) >= 0\"\nproof (induction xs)\n  case Nil\n  then show ?case \n    by simp\nnext\n  case (Cons x xs)\n  then show ?case \n    by (metis sum_nonneg zero_le_power2)\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "nonneg_square_sum": {"skill_name": "nonneg_square_sum", "marker": "lemma nonneg_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  by (simp add: power2_eq_square)", "description": "-", "full_code": "lemma nonneg_square_sum:\n  fixes x y :: real\n  shows \"x^2 + y^2 >= 0\"\n  by (simp add: power2_eq_square)", "origin": "trivial_inequalityV5", "update_count": 0}, "nonneg_square_sumV2": {"skill_name": "nonneg_square_sumV2", "marker": "lemma nonneg_square_sum:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" using assms(1) by (simp add: power2_eq_square)\n  moreover have \"y^2 >= 0\" using assms(2) by (simp add: power2_eq_square)\n  ultimately show ?thesis by simp\nqed", "description": "-", "full_code": "lemma nonneg_square_sum:\n  fixes x y :: real\n  assumes \"x >= 0\" \"y >= 0\"\n  shows \"x^2 + y^2 >= 0\"\nproof -\n  have \"x^2 >= 0\" using assms(1) by (simp add: power2_eq_square)\n  moreover have \"y^2 >= 0\" using assms(2) by (simp add: power2_eq_square)\n  ultimately show ?thesis by simp\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "square_sum_geq_1": {"skill_name": "square_sum_geq_1", "marker": "lemma square_sum_geq_1:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 1 \\<longleftrightarrow> (x^2 + y^2) + (x * y)^2 >= 1\"\nproof -\n  have \"x^2 + y^2 + (x * y)^2 = (x^2 + y^2) + (x * y)^2\" by simp\n  thus ?thesis by auto\nqed", "description": "-", "full_code": "lemma square_sum_geq_1:\n  fixes x y :: real\n  shows \"x^2 + y^2 + (x * y)^2 >= 1 \\<longleftrightarrow> (x^2 + y^2) + (x * y)^2 >= 1\"\nproof -\n  have \"x^2 + y^2 + (x * y)^2 = (x^2 + y^2) + (x * y)^2\" by simp\n  thus ?thesis by auto\nqed", "origin": "trivial_inequalityV5", "update_count": 0}, "division_propertyV2": {"skill_name": "division_propertyV2", "marker": "lemma division_property:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b = c * a\"\n  shows \"b / a = c\"\nproof -\n  have \"b / a = (c * a) / a\" using assms(2) by simp\n  then have \"b / a = c\" using non_zero_division_generalized[of a c] assms(1) by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma non_zero_division_generalized:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"b / a * a = b\"\nproof -\n  have \"b / a * a = b\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed\n\nlemma division_property:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b = c * a\"\n  shows \"b / a = c\"\nproof -\n  have \"b / a = (c * a) / a\" using assms(2) by simp\n  then have \"b / a = c\" using non_zero_division_generalized[of a c] assms(1) by auto\n  thus ?thesis by simp\nqed", "origin": "non_zero_multiplicationV2", "update_count": 0}, "non_zero_operations": {"skill_name": "non_zero_operations", "marker": "lemma non_zero_operations:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"c \\<noteq> 0\"\n  shows \"a * (b / a) = b\" and \"(c / a) * a = c\"\n  using non_zero_division_generalized[of a b] non_zero_division_generalized[of c a] assms by auto", "description": "-", "full_code": "lemma non_zero_division_generalized:\n  fixes a b :: real\n  assumes \"a \\<noteq> 0\"\n  shows \"b / a * a = b\"\nproof -\n  have \"b / a * a = b\" using assms by (simp add: field_simps)\n  thus ?thesis by simp\nqed\n\nlemma non_zero_operations:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"c \\<noteq> 0\"\n  shows \"a * (b / a) = b\" and \"(c / a) * a = c\"\n  using non_zero_division_generalized[of a b] non_zero_division_generalized[of c a] assms by auto", "origin": "non_zero_multiplicationV2", "update_count": 0}, "division_of_nonzero_with_variables": {"skill_name": "division_of_nonzero_with_variables", "marker": "lemma division_of_nonzero_with_variables:\n  fixes x y :: real\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\"\n  shows \"(x * y) / x = y\" and \"(x * y) / y = x\"\nproof -\n  have \"(x * y) / x = y\" using assms by (simp add: field_simps)\n  thus \"(x * y) / x = y\" by simp\nnext\n  have \"(x * y) / y = x\" using assms by (simp add: field_simps)\n  thus \"(x * y) / y = x\" by simp\nqed", "description": "-", "full_code": "lemma division_of_nonzero_with_variables:\n  fixes x y :: real\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\"\n  shows \"(x * y) / x = y\" and \"(x * y) / y = x\"\nproof -\n  have \"(x * y) / x = y\" using assms by (simp add: field_simps)\n  thus \"(x * y) / x = y\" by simp\nnext\n  have \"(x * y) / y = x\" using assms by (simp add: field_simps)\n  thus \"(x * y) / y = x\" by simp\nqed", "origin": "division_of_nonzero", "update_count": 0}, "division_of_nonzero_general": {"skill_name": "division_of_nonzero_general", "marker": "lemma division_of_nonzero_general:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\" \"c > 0\"\n  shows \"(a * b) / a = b\" and \"(a * b) / b = a\" and \"(a * b) / (c * a) = (b / c)\" and \"(a * b) / (c * b) = (a / c)\"\nproof -\n  have \"(a * b) / a = b\" using assms by (simp add: field_simps)\n  thus \"(a * b) / a = b\" by simp\nnext\n  have \"(a * b) / b = a\" using assms by (simp add: field_simps)\n  thus \"(a * b) / b = a\" by simp\nnext\n  have \"(a * b) / (c * a) = (b * a) / (c * a)\" using assms by simp\n  also have \"... = (b / c)\" by (metis assms(1) mult.commute nonzero_mult_divide_mult_cancel_left)\n  finally show \"(a * b) / (c * a) = (b / c)\" by simp\nnext\n  have \"(a * b) / (c * b) = (a * b) / (c * b)\" using assms by simp\n  also have \"... = (a / c)\" by (metis assms(2) mult.commute nonzero_mult_divide_mult_cancel_right2)\n  finally show \"(a * b) / (c * b) = (a / c)\" by (metis \\<open>a * b / (c * b) = a / c\\<close>)\nqed", "description": "-", "full_code": "lemma division_of_nonzero_general:\n  fixes a b c :: real\n  assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\" \"c > 0\"\n  shows \"(a * b) / a = b\" and \"(a * b) / b = a\" and \"(a * b) / (c * a) = (b / c)\" and \"(a * b) / (c * b) = (a / c)\"\nproof -\n  have \"(a * b) / a = b\" using assms by (simp add: field_simps)\n  thus \"(a * b) / a = b\" by simp\nnext\n  have \"(a * b) / b = a\" using assms by (simp add: field_simps)\n  thus \"(a * b) / b = a\" by simp\nnext\n  have \"(a * b) / (c * a) = (b * a) / (c * a)\" using assms by simp\n  also have \"... = (b / c)\" by (metis assms(1) mult.commute nonzero_mult_divide_mult_cancel_left)\n  finally show \"(a * b) / (c * a) = (b / c)\" by simp\nnext\n  have \"(a * b) / (c * b) = (a * b) / (c * b)\" using assms by simp\n  also have \"... = (a / c)\" by (metis assms(2) mult.commute nonzero_mult_divide_mult_cancel_right2)\n  finally show \"(a * b) / (c * b) = (a / c)\" by (metis \\<open>a * b / (c * b) = a / c\\<close>)\nqed", "origin": "division_of_nonzero", "update_count": 0}, "sum_of_squares_non_negativityV2": {"skill_name": "sum_of_squares_non_negativityV2", "marker": "lemma sum_of_squares_non_negativity:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then show ?thesis by auto\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negativity:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  then show ?thesis by auto\nqed", "origin": "non_negativityV5", "update_count": 0}, "sum_of_squares_non_negativityV3": {"skill_name": "sum_of_squares_non_negativityV3", "marker": "lemma sum_of_squares_non_negativity:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + z^2 \\<ge> 0 + 0 + 0\"\n    using `x^2 \\<ge> 0` `y^2 \\<ge> 0` `z^2 \\<ge> 0` by auto\n  thus ?thesis by simp\nqed", "description": "-", "full_code": "lemma sum_of_squares_non_negativity:\n  fixes x y z :: real\n  shows \"x^2 + y^2 + z^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"y^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"z^2 \\<ge> 0\" by (simp add: power2_eq_square)\n  have \"x^2 + y^2 + z^2 \\<ge> 0 + 0 + 0\"\n    using `x^2 \\<ge> 0` `y^2 \\<ge> 0` `z^2 \\<ge> 0` by auto\n  thus ?thesis by simp\nqed", "origin": "non_negativityV5", "update_count": 0}, "square_nonneg": {"skill_name": "square_nonneg", "marker": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"a^2 \\<ge> 0\" \n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"a * a \\<ge> 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"(-a) > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "description": "-", "full_code": "lemma square_nonneg:\n  fixes a :: real\n  shows \"a^2 \\<ge> 0\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  thus \"a^2 \\<ge> 0\" \n  proof (cases \"a \\<ge> 0\")\n    case True\n    then have \"a * a \\<ge> 0\" by (simp add: mult_nonneg_nonneg)\n    then show ?thesis by simp\n  next\n    case False\n    then have \"a < 0\" by simp\n    then have \"(-a) > 0\" by (simp add: not_le)\n    thus ?thesis by (simp add: mult_nonneg_nonneg)\n  qed\nqed", "origin": "do_request", "update_count": 0}, "sum_of_squares_bounds": {"skill_name": "sum_of_squares_bounds", "marker": "lemma sum_of_squares_bounds:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" and \"y^2 \\<ge> 0\" using non_negative_squares by auto\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show \"0 \\<le> a^2\" \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_bounds:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\nproof -\n  have \"x^2 \\<ge> 0\" and \"y^2 \\<ge> 0\" using non_negative_squares by auto\n  thus \"x^2 + y^2 \\<ge> 0\" by (simp add: add_nonneg_nonneg)\nqed", "origin": "non_negative_squares_general", "update_count": 0}, "sum_of_squares_minimum": {"skill_name": "sum_of_squares_minimum", "marker": "lemma sum_of_squares_minimum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  using non_negative_squares[of x] non_negative_squares[of y] by auto", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show ?thesis \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed\n\nlemma sum_of_squares_minimum:\n  fixes x y :: real\n  shows \"x^2 + y^2 \\<ge> 0\"\n  using non_negative_squares[of x] non_negative_squares[of y] by auto", "origin": "non_negative_squares_general", "update_count": 0}, "non_negative_squaresV15": {"skill_name": "non_negative_squaresV15", "marker": "lemma non_negative_squares:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show ?thesis \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares:\n  fixes a :: real\n  shows \"0 \\<le> a^2\"\nproof -\n  have \"a^2 = a * a\" by (simp add: power2_eq_square)\n  then show ?thesis \n    by (cases \"a \\<ge> 0\") (auto simp: mult_nonneg_nonneg)\nqed", "origin": "non_negative_squares_general", "update_count": 0}, "non_negative_squares_n_dim": {"skill_name": "non_negative_squares_n_dim", "marker": "lemma non_negative_squares_n_dim:\n  fixes xs :: \"real list\"\n  assumes \"length xs > 0\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis using assms by (simp add: sum_nonneg)\nqed", "description": "-", "full_code": "lemma non_negative_squares_n_dim:\n  fixes xs :: \"real list\"\n  assumes \"length xs > 0\"\n  shows \"(\\<Sum>x\\<in>set xs. x^2) >= 0\"\nproof -\n  have \"x^2 >= 0\" for x :: real by (simp add: power2_eq_square)\n  then show ?thesis using assms by (simp add: sum_nonneg)\nqed", "origin": "non_negative_squares", "update_count": 0}}